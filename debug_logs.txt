[33m[2mSource path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
[32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
[32m[2mStarting var:.. [22msource = PosixPath('/home/user/projects/personal/datamodel-code-generator-issue-2460/inputs')[0m
[32m[2mStarting var:.. [22mdata_model_type = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
[32m[2mStarting var:.. [22mdata_model_root_type = <class 'datamodel_code_generator.model.pydantic_v2.root_model.RootModel'>[0m
[32m[2mStarting var:.. [22mdata_type_manager_type = <class 'datamodel_code_generator.model.pydantic_v2.types.DataTypeManager'>[0m
[32m[2mStarting var:.. [22mdata_model_field_type = <class 'datamodel_code_generator.model.pydantic_v2.base_model.DataModelField'>[0m
[32m[2mStarting var:.. [22mbase_class = ''[0m
[32m[2mStarting var:.. [22madditional_imports = None[0m
[32m[2mStarting var:.. [22mcustom_template_dir = None[0m
[32m[2mStarting var:.. [22mextra_template_data = None[0m
[32m[2mStarting var:.. [22mtarget_python_version = <PythonVersion.PY_39: '3.9'>[0m
[32m[2mStarting var:.. [22mdump_resolve_reference_action = <function dump_resolve_reference_action at 0x7f80031c7a60>[0m
[32m[2mStarting var:.. [22mvalidation = False[0m
[32m[2mStarting var:.. [22mfield_constraints = False[0m
[32m[2mStarting var:.. [22msnake_case_field = False[0m
[32m[2mStarting var:.. [22mstrip_default_none = False[0m
[32m[2mStarting var:.. [22maliases = None[0m
[32m[2mStarting var:.. [22mallow_population_by_field_name = False[0m
[32m[2mStarting var:.. [22mapply_default_values_for_required_fields = False[0m
[32m[2mStarting var:.. [22mallow_extra_fields = False[0m
[32m[2mStarting var:.. [22mextra_fields = None[0m
[32m[2mStarting var:.. [22mforce_optional_for_required_fields = False[0m
[32m[2mStarting var:.. [22mclass_name = None[0m
[32m[2mStarting var:.. [22muse_standard_collections = False[0m
[32m[2mStarting var:.. [22mbase_path = None[0m
[32m[2mStarting var:.. [22muse_schema_description = False[0m
[32m[2mStarting var:.. [22muse_field_description = False[0m
[32m[2mStarting var:.. [22muse_default_kwarg = False[0m
[32m[2mStarting var:.. [22mreuse_model = False[0m
[32m[2mStarting var:.. [22mencoding = 'UTF-8'[0m
[32m[2mStarting var:.. [22menum_field_as_literal = None[0m
[32m[2mStarting var:.. [22muse_one_literal_as_default = False[0m
[32m[2mStarting var:.. [22mset_default_enum_member = False[0m
[32m[2mStarting var:.. [22muse_subclass_enum = False[0m
[32m[2mStarting var:.. [22mstrict_nullable = False[0m
[32m[2mStarting var:.. [22muse_generic_container_types = False[0m
[32m[2mStarting var:.. [22menable_faux_immutability = False[0m
[32m[2mStarting var:.. [22mremote_text_cache = {}[0m
[32m[2mStarting var:.. [22mdisable_appending_item_suffix = False[0m
[32m[2mStarting var:.. [22mstrict_types = [][0m
[32m[2mStarting var:.. [22mempty_enum_field_name = None[0m
[32m[2mStarting var:.. [22mcustom_class_name_generator = None[0m
[32m[2mStarting var:.. [22mfield_extra_keys = None[0m
[32m[2mStarting var:.. [22mfield_include_all_keys = False[0m
[32m[2mStarting var:.. [22mfield_extra_keys_without_x_prefix = None[0m
[32m[2mStarting var:.. [22mwrap_string_literal = None[0m
[32m[2mStarting var:.. [22muse_title_as_name = False[0m
[32m[2mStarting var:.. [22muse_operation_id_as_name = False[0m
[32m[2mStarting var:.. [22muse_unique_items_as_set = False[0m
[32m[2mStarting var:.. [22mhttp_headers = None[0m
[32m[2mStarting var:.. [22mhttp_ignore_tls = False[0m
[32m[2mStarting var:.. [22muse_annotated = False[0m
[32m[2mStarting var:.. [22muse_non_positive_negative_number_constrained_types = False[0m
[32m[2mStarting var:.. [22moriginal_field_name_delimiter = None[0m
[32m[2mStarting var:.. [22muse_double_quotes = False[0m
[32m[2mStarting var:.. [22muse_union_operator = False[0m
[32m[2mStarting var:.. [22mallow_responses_without_content = False[0m
[32m[2mStarting var:.. [22mcollapse_root_models = False[0m
[32m[2mStarting var:.. [22mspecial_field_name_prefix = None[0m
[32m[2mStarting var:.. [22mremove_special_field_name_prefix = False[0m
[32m[2mStarting var:.. [22mcapitalise_enum_members = False[0m
[32m[2mStarting var:.. [22mkeep_model_order = False[0m
[32m[2mStarting var:.. [22mknown_third_party = None[0m
[32m[2mStarting var:.. [22mcustom_formatters = None[0m
[32m[2mStarting var:.. [22mcustom_formatters_kwargs = None[0m
[32m[2mStarting var:.. [22muse_pendulum = False[0m
[32m[2mStarting var:.. [22mhttp_query_parameters = None[0m
[32m[2mStarting var:.. [22mtreat_dot_as_module = False[0m
[32m[2mStarting var:.. [22muse_exact_imports = False[0m
[32m[2mStarting var:.. [22mdefault_field_extras = None[0m
[32m[2mStarting var:.. [22mtarget_datetime_class = None[0m
[32m[2mStarting var:.. [22mkeyword_only = False[0m
[32m[2mStarting var:.. [22mfrozen_dataclasses = False[0m
[32m[2mStarting var:.. [22mno_alias = False[0m
[32m[2mStarting var:.. [22mformatters = [<Formatter.BLACK: 'black'>, <Formatter.ISORT: 'isort'>][0m
[32m[2mStarting var:.. [22mparent_scoped_naming = False[0m
[32m[2mStarting var:.. [22m__class__ = <class 'datamodel_code_generator.parser.jsonschema.JsonSchemaParser'>[0m
[2m19:41:41.520992 call       389[0m     def __init__(  # noqa: PLR0913
[2m19:41:41.521664 line       468[0m         super().__init__(
[2m19:41:41.521756 line       469[0m             source=source,
[2m19:41:41.521832 line       468[0m         super().__init__(
[2m19:41:41.521897 line       470[0m             data_model_type=data_model_type,
[2m19:41:41.521962 line       468[0m         super().__init__(
[2m19:41:41.522025 line       471[0m             data_model_root_type=data_model_root_type,
[2m19:41:41.522085 line       468[0m         super().__init__(
[2m19:41:41.522151 line       472[0m             data_type_manager_type=data_type_manager_type,
[2m19:41:41.522218 line       468[0m         super().__init__(
[2m19:41:41.522284 line       473[0m             data_model_field_type=data_model_field_type,
[2m19:41:41.522363 line       468[0m         super().__init__(
[2m19:41:41.522453 line       474[0m             base_class=base_class,
[2m19:41:41.522524 line       468[0m         super().__init__(
[2m19:41:41.522590 line       475[0m             additional_imports=additional_imports,
[2m19:41:41.522656 line       468[0m         super().__init__(
[2m19:41:41.522720 line       476[0m             custom_template_dir=custom_template_dir,
[2m19:41:41.522785 line       468[0m         super().__init__(
[2m19:41:41.522855 line       477[0m             extra_template_data=extra_template_data,
[2m19:41:41.522920 line       468[0m         super().__init__(
[2m19:41:41.522984 line       478[0m             target_python_version=target_python_version,
[2m19:41:41.523050 line       468[0m         super().__init__(
[2m19:41:41.523118 line       479[0m             dump_resolve_reference_action=dump_resolve_reference_action,
[2m19:41:41.523185 line       468[0m         super().__init__(
[2m19:41:41.523248 line       480[0m             validation=validation,
[2m19:41:41.523318 line       468[0m         super().__init__(
[2m19:41:41.523383 line       481[0m             field_constraints=field_constraints,
[2m19:41:41.523450 line       468[0m         super().__init__(
[2m19:41:41.523519 line       482[0m             snake_case_field=snake_case_field,
[2m19:41:41.523586 line       468[0m         super().__init__(
[2m19:41:41.523652 line       483[0m             strip_default_none=strip_default_none,
[2m19:41:41.523716 line       468[0m         super().__init__(
[2m19:41:41.523785 line       484[0m             aliases=aliases,
[2m19:41:41.523855 line       468[0m         super().__init__(
[2m19:41:41.523924 line       485[0m             allow_population_by_field_name=allow_population_by_field_name,
[2m19:41:41.523994 line       468[0m         super().__init__(
[2m19:41:41.524060 line       486[0m             allow_extra_fields=allow_extra_fields,
[2m19:41:41.524125 line       468[0m         super().__init__(
[2m19:41:41.524189 line       487[0m             extra_fields=extra_fields,
[2m19:41:41.524258 line       468[0m         super().__init__(
[2m19:41:41.524324 line       488[0m             apply_default_values_for_required_fields=apply_default_values_for_required_fields,
[2m19:41:41.524389 line       468[0m         super().__init__(
[2m19:41:41.524458 line       489[0m             force_optional_for_required_fields=force_optional_for_required_fields,
[2m19:41:41.524530 line       468[0m         super().__init__(
[2m19:41:41.524599 line       490[0m             class_name=class_name,
[2m19:41:41.524665 line       468[0m         super().__init__(
[2m19:41:41.524734 line       491[0m             use_standard_collections=use_standard_collections,
[2m19:41:41.524808 line       468[0m         super().__init__(
[2m19:41:41.524875 line       492[0m             base_path=base_path,
[2m19:41:41.524942 line       468[0m         super().__init__(
[2m19:41:41.525010 line       493[0m             use_schema_description=use_schema_description,
[2m19:41:41.525076 line       468[0m         super().__init__(
[2m19:41:41.525146 line       494[0m             use_field_description=use_field_description,
[2m19:41:41.525214 line       468[0m         super().__init__(
[2m19:41:41.525285 line       495[0m             use_default_kwarg=use_default_kwarg,
[2m19:41:41.525353 line       468[0m         super().__init__(
[2m19:41:41.525419 line       496[0m             reuse_model=reuse_model,
[2m19:41:41.525486 line       468[0m         super().__init__(
[2m19:41:41.525554 line       497[0m             encoding=encoding,
[2m19:41:41.525623 line       468[0m         super().__init__(
[2m19:41:41.525690 line       498[0m             enum_field_as_literal=enum_field_as_literal,
[2m19:41:41.525759 line       468[0m         super().__init__(
[2m19:41:41.525829 line       499[0m             use_one_literal_as_default=use_one_literal_as_default,
[2m19:41:41.525897 line       468[0m         super().__init__(
[2m19:41:41.525965 line       500[0m             set_default_enum_member=set_default_enum_member,
[2m19:41:41.526037 line       468[0m         super().__init__(
[2m19:41:41.526121 line       501[0m             use_subclass_enum=use_subclass_enum,
[2m19:41:41.526192 line       468[0m         super().__init__(
[2m19:41:41.526258 line       502[0m             strict_nullable=strict_nullable,
[2m19:41:41.526327 line       468[0m         super().__init__(
[2m19:41:41.526394 line       503[0m             use_generic_container_types=use_generic_container_types,
[2m19:41:41.526467 line       468[0m         super().__init__(
[2m19:41:41.526533 line       504[0m             enable_faux_immutability=enable_faux_immutability,
[2m19:41:41.526599 line       468[0m         super().__init__(
[2m19:41:41.526665 line       505[0m             remote_text_cache=remote_text_cache,
[2m19:41:41.526732 line       468[0m         super().__init__(
[2m19:41:41.526805 line       506[0m             disable_appending_item_suffix=disable_appending_item_suffix,
[2m19:41:41.526873 line       468[0m         super().__init__(
[2m19:41:41.526940 line       507[0m             strict_types=strict_types,
[2m19:41:41.527009 line       468[0m         super().__init__(
[2m19:41:41.527077 line       508[0m             empty_enum_field_name=empty_enum_field_name,
[2m19:41:41.527145 line       468[0m         super().__init__(
[2m19:41:41.527213 line       509[0m             custom_class_name_generator=custom_class_name_generator,
[2m19:41:41.527281 line       468[0m         super().__init__(
[2m19:41:41.527353 line       510[0m             field_extra_keys=field_extra_keys,
[2m19:41:41.527423 line       468[0m         super().__init__(
[2m19:41:41.527499 line       511[0m             field_include_all_keys=field_include_all_keys,
[2m19:41:41.527570 line       468[0m         super().__init__(
[2m19:41:41.527640 line       512[0m             field_extra_keys_without_x_prefix=field_extra_keys_without_x_prefix,
[2m19:41:41.527709 line       468[0m         super().__init__(
[2m19:41:41.527779 line       513[0m             wrap_string_literal=wrap_string_literal,
[2m19:41:41.527854 line       468[0m         super().__init__(
[2m19:41:41.527920 line       514[0m             use_title_as_name=use_title_as_name,
[2m19:41:41.527986 line       468[0m         super().__init__(
[2m19:41:41.528054 line       515[0m             use_operation_id_as_name=use_operation_id_as_name,
[2m19:41:41.528124 line       468[0m         super().__init__(
[2m19:41:41.528190 line       516[0m             use_unique_items_as_set=use_unique_items_as_set,
[2m19:41:41.528258 line       468[0m         super().__init__(
[2m19:41:41.528326 line       517[0m             http_headers=http_headers,
[2m19:41:41.528396 line       468[0m         super().__init__(
[2m19:41:41.528465 line       518[0m             http_ignore_tls=http_ignore_tls,
[2m19:41:41.528533 line       468[0m         super().__init__(
[2m19:41:41.528598 line       519[0m             use_annotated=use_annotated,
[2m19:41:41.528664 line       468[0m         super().__init__(
[2m19:41:41.528732 line       520[0m             use_non_positive_negative_number_constrained_types=use_non_positive_negative_number_constrained_types,
[2m19:41:41.528804 line       468[0m         super().__init__(
[2m19:41:41.528870 line       521[0m             original_field_name_delimiter=original_field_name_delimiter,
[2m19:41:41.528938 line       468[0m         super().__init__(
[2m19:41:41.529007 line       522[0m             use_double_quotes=use_double_quotes,
[2m19:41:41.529079 line       468[0m         super().__init__(
[2m19:41:41.529149 line       523[0m             use_union_operator=use_union_operator,
[2m19:41:41.529219 line       468[0m         super().__init__(
[2m19:41:41.529290 line       524[0m             allow_responses_without_content=allow_responses_without_content,
[2m19:41:41.529356 line       468[0m         super().__init__(
[2m19:41:41.529425 line       525[0m             collapse_root_models=collapse_root_models,
[2m19:41:41.529497 line       468[0m         super().__init__(
[2m19:41:41.529570 line       526[0m             special_field_name_prefix=special_field_name_prefix,
[2m19:41:41.529639 line       468[0m         super().__init__(
[2m19:41:41.529707 line       527[0m             remove_special_field_name_prefix=remove_special_field_name_prefix,
[2m19:41:41.529778 line       468[0m         super().__init__(
[2m19:41:41.529852 line       528[0m             capitalise_enum_members=capitalise_enum_members,
[2m19:41:41.529922 line       468[0m         super().__init__(
[2m19:41:41.529989 line       529[0m             keep_model_order=keep_model_order,
[2m19:41:41.530057 line       468[0m         super().__init__(
[2m19:41:41.530123 line       530[0m             known_third_party=known_third_party,
[2m19:41:41.530188 line       468[0m         super().__init__(
[2m19:41:41.530258 line       531[0m             custom_formatters=custom_formatters,
[2m19:41:41.530324 line       468[0m         super().__init__(
[2m19:41:41.530390 line       532[0m             custom_formatters_kwargs=custom_formatters_kwargs,
[2m19:41:41.530460 line       468[0m         super().__init__(
[2m19:41:41.530526 line       533[0m             use_pendulum=use_pendulum,
[2m19:41:41.530595 line       468[0m         super().__init__(
[2m19:41:41.530666 line       534[0m             http_query_parameters=http_query_parameters,
[2m19:41:41.530735 line       468[0m         super().__init__(
[2m19:41:41.530812 line       535[0m             treat_dot_as_module=treat_dot_as_module,
[2m19:41:41.530882 line       468[0m         super().__init__(
[2m19:41:41.530951 line       536[0m             use_exact_imports=use_exact_imports,
[2m19:41:41.531021 line       468[0m         super().__init__(
[2m19:41:41.531086 line       537[0m             default_field_extras=default_field_extras,
[2m19:41:41.531153 line       468[0m         super().__init__(
[2m19:41:41.531221 line       538[0m             target_datetime_class=target_datetime_class,
[2m19:41:41.531289 line       468[0m         super().__init__(
[2m19:41:41.531358 line       539[0m             keyword_only=keyword_only,
[2m19:41:41.531424 line       468[0m         super().__init__(
[2m19:41:41.531490 line       540[0m             frozen_dataclasses=frozen_dataclasses,
[2m19:41:41.531559 line       468[0m         super().__init__(
[2m19:41:41.531625 line       541[0m             no_alias=no_alias,
[2m19:41:41.531693 line       468[0m         super().__init__(
[2m19:41:41.531765 line       542[0m             formatters=formatters,
[2m19:41:41.531837 line       468[0m         super().__init__(
[2m19:41:41.531904 line       543[0m             parent_scoped_naming=parent_scoped_naming,
[2m19:41:41.531970 line       468[0m         super().__init__(
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22madditional_imports = None[0m
    [2m19:41:41.539712 call       521[0m     def _append_additional_imports(self, additional_imports: list[str] | None) -> None:
    [2m19:41:41.539989 line       522[0m         if additional_imports is None:
    [2m19:41:41.540008 line       523[0m             additional_imports = []
    [32m[2mModified var:.. [22madditional_imports = [][0m
    [2m19:41:41.540020 line       525[0m         for additional_import_string in additional_imports:
    [2m19:41:41.540037 return     525[0m         for additional_import_string in additional_imports:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000373[0m
[2m19:41:41.540203 line       546[0m         self.remote_object_cache: DefaultPutDict[str, dict[str, Any]] = DefaultPutDict()
[2m19:41:41.540310 line       547[0m         self.raw_obj: dict[Any, Any] = {}
[2m19:41:41.540386 line       548[0m         self._root_id: Optional[str] = None  # noqa: UP045
[2m19:41:41.540474 line       549[0m         self._root_id_base_path: Optional[str] = None  # noqa: UP045
[2m19:41:41.540553 line       550[0m         self.reserved_refs: defaultdict[tuple[str, ...], set[str]] = defaultdict(set)
[2m19:41:41.540623 line       551[0m         self.field_keys: set[str] = {
[2m19:41:41.540690 line       552[0m             *DEFAULT_FIELD_KEYS,
[2m19:41:41.540759 line       551[0m         self.field_keys: set[str] = {
[2m19:41:41.540832 line       553[0m             *self.field_extra_keys,
[2m19:41:41.540899 line       551[0m         self.field_keys: set[str] = {
[2m19:41:41.540967 line       554[0m             *self.field_extra_keys_without_x_prefix,
[2m19:41:41.541033 line       551[0m         self.field_keys: set[str] = {
[2m19:41:41.541103 line       557[0m         if self.data_model_field_type.can_have_extra_keys:
[2m19:41:41.541174 line       563[0m             self.get_field_extra_key = lambda key: key
[2m19:41:41.541243 return     563[0m             self.get_field_extra_key = lambda key: key
[36m[2mReturn value:.. [22mNone[0m
[33m[2mElapsed time: [22m00:00:00.020514[0m
[33m[2mSource path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
[32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
[32m[2mStarting var:.. [22mwith_import = True[0m
[32m[2mStarting var:.. [22mformat_ = True[0m
[32m[2mStarting var:.. [22msettings_path = None[0m
[2m19:41:41.541548 call      1238[0m     def parse(  # noqa: PLR0912, PLR0914, PLR0915
[2m19:41:41.541622 line      1244[0m         self.parse_raw()
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [2m19:41:41.541653 call      1631[0m     def parse_raw(self) -> None:
    [2m19:41:41.541680 line      1632[0m         for source, path_parts in self._get_context_source_path_parts():
[33m[2m        Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
        [2m19:41:41.541717 call      1611[0m     def _get_context_source_path_parts(self) -> Iterator[tuple[Source, list[str]]]:
        [2m19:41:41.541744 line      1612[0m         if isinstance(self.source, list) or (isinstance(self.source, Path) and self.source.is_dir()):
        [2m19:41:41.541765 line      1613[0m             self.current_source_path = Path()
        [2m19:41:41.541792 line      1615[0m                 self.base_path.joinpath(s.path).resolve().as_posix() for s in self.iter_source
        [2m19:41:41.541811 line      1614[0m             self.model_resolver.after_load_files = {
        [2m19:41:41.541822 line      1615[0m                 self.base_path.joinpath(s.path).resolve().as_posix() for s in self.iter_source
        [32m[2mNew var:....... [22ms = Source(path=PosixPath('aaaschema.json'), text='{...n  "title": "animals",\n  "type": "object"\n}\n')[0m
        [2m19:41:41.542315 line      1615[0m                 self.base_path.joinpath(s.path).resolve().as_posix() for s in self.iter_source
        [32m[2mModified var:.. [22ms = Source(path=PosixPath('bug.json'), text='{\n  "$...dAnimals" }\n    }\n  },\n  "title": "bug"\n}\n')[0m
        [2m19:41:41.542492 line      1615[0m                 self.base_path.joinpath(s.path).resolve().as_posix() for s in self.iter_source
        [32m[2mModified var:.. [22ms = Source(path=PosixPath('commons.json'), text='{\n...aft/2020-12/schema",\n  "title": "commons"\n}\n')[0m
        [2m19:41:41.542629 line      1615[0m                 self.base_path.joinpath(s.path).resolve().as_posix() for s in self.iter_source
        [2m19:41:41.542664 line      1614[0m             self.model_resolver.after_load_files = {
        [2m19:41:41.542685 line      1618[0m         for source in self.iter_source:
        [32m[2mNew var:....... [22msource = Source(path=PosixPath('aaaschema.json'), text='{...n  "title": "animals",\n  "type": "object"\n}\n')[0m
        [2m19:41:41.542877 line      1619[0m             if isinstance(self.source, ParseResult):
        [2m19:41:41.542918 line      1622[0m                 path_parts = list(source.path.parts)
        [32m[2mNew var:....... [22mpath_parts = ['aaaschema.json'][0m
        [2m19:41:41.542944 line      1623[0m             if self.current_source_path is not None:
        [2m19:41:41.542969 line      1624[0m                 self.current_source_path = source.path
        [2m19:41:41.542986 line      1626[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:41.543069 line      1627[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:41.543116 line      1629[0m                 yield source, path_parts
        [2m19:41:41.543138 return    1629[0m                 yield source, path_parts
        [36m[2mReturn value:.. [22m(Source(path=PosixPath('aaaschema.json'), text='...,\n  "type": "object"\n}\n'), ['aaaschema.json'])[0m
        [33m[2mElapsed time: [22m00:00:00.001481[0m
    [32m[2mNew var:....... [22msource = Source(path=PosixPath('aaaschema.json'), text='{...n  "title": "animals",\n  "type": "object"\n}\n')[0m
    [32m[2mNew var:....... [22mpath_parts = ['aaaschema.json'][0m
    [2m19:41:41.543207 line      1633[0m             self.raw_obj = load_yaml(source.text)
    [2m19:41:41.543882 line      1634[0m             if self.raw_obj is None:  # pragma: no cover
    [2m19:41:41.543914 line      1637[0m             if self.custom_class_name_generator:
    [2m19:41:41.543934 line      1640[0m                 if self.class_name:
    [2m19:41:41.543953 line      1644[0m                     obj_name = self.raw_obj.get("title", "Model")
    [32m[2mNew var:....... [22mobj_name = 'animals'[0m
    [2m19:41:41.543968 line      1645[0m                     if not self.model_resolver.validate_name(obj_name):
    [2m19:41:41.544004 line      1647[0m                 if not self.model_resolver.validate_name(obj_name):
    [2m19:41:41.544026 line      1649[0m             self._parse_file(self.raw_obj, obj_name, path_parts)
[33m[2m        Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
        [32m[2mStarting var:.. [22mraw = {'$defs': {'AllowedAnimals': {'oneOf': [{'$ref':...nimals'}}}, 'title': 'animals', 'type': 'object'}[0m
        [32m[2mStarting var:.. [22mobj_name = 'animals'[0m
        [32m[2mStarting var:.. [22mpath_parts = ['aaaschema.json'][0m
        [32m[2mStarting var:.. [22mobject_paths = None[0m
        [2m19:41:41.544077 call      1688[0m     def _parse_file(  # noqa: PLR0912
        [2m19:41:41.544144 line      1695[0m         object_paths = [o for o in object_paths or [] if o]
        [32m[2mModified var:.. [22mobject_paths = [][0m
        [2m19:41:41.544166 line      1696[0m         path = [*path_parts, f"#/{object_paths[0]}", *object_paths[1:]] if object_paths else path_parts
        [32m[2mNew var:....... [22mpath = ['aaaschema.json'][0m
        [2m19:41:41.544191 line      1697[0m         with self.model_resolver.current_root_context(path_parts):
        [2m19:41:41.544230 line      1698[0m             obj_name = self.model_resolver.add(path, obj_name, unique=False, class_name=True).name
        [32m[2mModified var:.. [22mobj_name = 'Animals'[0m
        [2m19:41:41.545000 line      1699[0m             with self.root_id_context(raw):
[33m[2m            Source path:... [22m/usr/lib/python3.13/contextlib.py[0m
            [32m[2mStarting var:.. [22margs = (<datamodel_code_generator.parser.jsonschema.Jso...imals'}}}, 'title': 'animals', 'type': 'object'})[0m
            [32m[2mStarting var:.. [22mkwds = {}[0m
            [32m[2mStarting var:.. [22mfunc = <function JsonSchemaParser.root_id_context at 0x7f80009f6e80>[0m
            [2m19:41:41.545061 call       304[0m     def helper(*args, **kwds):
            [2m19:41:41.545208 line       305[0m         return _GeneratorContextManager(func, args, kwds)
            [2m19:41:41.545238 return     305[0m         return _GeneratorContextManager(func, args, kwds)
            [36m[2mReturn value:.. [22m<contextlib._GeneratorContextManager object at 0x7f8001977380>[0m
            [33m[2mElapsed time: [22m00:00:00.000211[0m
        [2m19:41:41.545301 line      1701[0m                 raw.pop("self", None)
        [2m19:41:41.545330 line      1703[0m                 root_obj = self.SCHEMA_OBJECT_TYPE.parse_obj(raw)
        [32m[2mNew var:....... [22mroot_obj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'animals'}, discriminator=None)[0m
        [2m19:41:41.545604 line      1704[0m                 self.parse_id(root_obj, path_parts)
[33m[2m            Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'animals'}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['aaaschema.json'][0m
            [2m19:41:41.545718 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.545812 line      1547[0m         if obj.id:
            [2m19:41:41.545863 line      1548[0m             self.model_resolver.add_id(obj.id, path)
            [2m19:41:41.546091 line      1549[0m         if obj.items:
            [2m19:41:41.546148 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.546199 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.546243 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.546287 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.546330 line      1564[0m         if obj.properties:
            [2m19:41:41.546372 line      1565[0m             for property_value in obj.properties.values():
            [32m[2mNew var:....... [22mproperty_value = JsonSchemaObject(items=JsonSchemaObject(items=No...om_base_path=None, extras={}, discriminator=None)[0m
            [2m19:41:41.546415 line      1566[0m                 if isinstance(property_value, JsonSchemaObject):
            [2m19:41:41.546482 line      1567[0m                     self.parse_id(property_value, path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=JsonSchemaObject(items=No...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['aaaschema.json'][0m
                [2m19:41:41.546550 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                [2m19:41:41.546598 line      1547[0m         if obj.id:
                [2m19:41:41.546628 line      1549[0m         if obj.items:
                [2m19:41:41.546658 line      1550[0m             if isinstance(obj.items, JsonSchemaObject):
                [2m19:41:41.546688 line      1551[0m                 self.parse_id(obj.items, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json'][0m
                    [2m19:41:41.546725 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.546762 line      1547[0m         if obj.id:
                    [2m19:41:41.546785 line      1549[0m         if obj.items:
                    [2m19:41:41.546809 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.546832 line      1557[0m         if obj.patternProperties:
                    [2m19:41:41.546854 line      1560[0m         for item in obj.anyOf:
                    [2m19:41:41.546876 line      1562[0m         for item in obj.allOf:
                    [2m19:41:41.546897 line      1564[0m         if obj.properties:
                    [2m19:41:41.546918 return    1564[0m         if obj.properties:
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000230[0m
                [2m19:41:41.546969 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.547005 line      1557[0m         if obj.patternProperties:
                [2m19:41:41.547035 line      1560[0m         for item in obj.anyOf:
                [2m19:41:41.547066 line      1562[0m         for item in obj.allOf:
                [2m19:41:41.547097 line      1564[0m         if obj.properties:
                [2m19:41:41.547127 return    1564[0m         if obj.properties:
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.000619[0m
            [2m19:41:41.547178 line      1565[0m             for property_value in obj.properties.values():
            [2m19:41:41.547243 return    1565[0m             for property_value in obj.properties.values():
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.001607[0m
        [2m19:41:41.547327 line      1705[0m                 definitions: dict[Any, Any] | None = None
        [32m[2mNew var:....... [22mdefinitions = None[0m
        [2m19:41:41.547385 line      1706[0m                 _schema_path = ""
        [32m[2mNew var:....... [22m_schema_path = ''[0m
        [2m19:41:41.547445 line      1707[0m                 for _schema_path, split_schema_path in self.schema_paths:
        [32m[2mModified var:.. [22m_schema_path = '#/definitions'[0m
        [32m[2mNew var:....... [22msplit_schema_path = ['definitions'][0m
        [2m19:41:41.547518 line      1708[0m                     try:
        [2m19:41:41.547584 line      1709[0m                         definitions = get_model_by_path(raw, split_schema_path)
        [32m[2mModified var:.. [22mdefinitions = {}[0m
        [2m19:41:41.547657 line      1710[0m                         if definitions:
        [2m19:41:41.547720 line      1707[0m                 for _schema_path, split_schema_path in self.schema_paths:
        [32m[2mModified var:.. [22m_schema_path = '#/$defs'[0m
        [32m[2mModified var:.. [22msplit_schema_path = ['$defs'][0m
        [2m19:41:41.547773 line      1708[0m                     try:
        [2m19:41:41.547846 line      1709[0m                         definitions = get_model_by_path(raw, split_schema_path)
        [32m[2mModified var:.. [22mdefinitions = {'AllowedAnimals': {'oneOf': [{'$ref': '#/$defs/... {'name': {'type': 'string'}}, 'type': 'object'}}[0m
        [2m19:41:41.547912 line      1710[0m                         if definitions:
        [2m19:41:41.547969 line      1711[0m                             break
        [2m19:41:41.548021 line      1714[0m                 if definitions is None:
        [2m19:41:41.548073 line      1717[0m                 for key, model in definitions.items():
        [32m[2mNew var:....... [22mkey = 'AllowedAnimals'[0m
        [32m[2mNew var:....... [22mmodel = {'oneOf': [{'$ref': '#/$defs/dog'}, {'$ref': '#/$defs/cat'}]}[0m
        [2m19:41:41.548125 line      1718[0m                     obj = self.SCHEMA_OBJECT_TYPE.parse_obj(model)
        [32m[2mNew var:....... [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
        [2m19:41:41.548298 line      1719[0m                     self.parse_id(obj, [*path_parts, _schema_path, key])
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals'][0m
            [2m19:41:41.548396 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.548449 line      1547[0m         if obj.id:
            [2m19:41:41.548487 line      1549[0m         if obj.items:
            [2m19:41:41.548523 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.548573 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.548610 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.548648 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.548688 line      1564[0m         if obj.properties:
            [2m19:41:41.548728 return    1564[0m         if obj.properties:
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.000384[0m
        [2m19:41:41.548790 line      1717[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'cat'[0m
        [32m[2mModified var:.. [22mmodel = {'properties': {'name': {'type': 'string'}}, 'type': 'object'}[0m
        [2m19:41:41.548889 line      1718[0m                     obj = self.SCHEMA_OBJECT_TYPE.parse_obj(model)
        [2m19:41:41.549053 line      1719[0m                     self.parse_id(obj, [*path_parts, _schema_path, key])
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat'][0m
            [2m19:41:41.549142 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.549190 line      1547[0m         if obj.id:
            [2m19:41:41.549221 line      1549[0m         if obj.items:
            [2m19:41:41.549250 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.549281 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.549309 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.549338 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.549367 line      1564[0m         if obj.properties:
            [2m19:41:41.549395 line      1565[0m             for property_value in obj.properties.values():
            [32m[2mNew var:....... [22mproperty_value = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [2m19:41:41.549425 line      1566[0m                 if isinstance(property_value, JsonSchemaObject):
            [2m19:41:41.549468 line      1567[0m                     self.parse_id(property_value, path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat'][0m
                [2m19:41:41.549511 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                [2m19:41:41.549545 line      1547[0m         if obj.id:
                [2m19:41:41.549565 line      1549[0m         if obj.items:
                [2m19:41:41.549584 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.549604 line      1557[0m         if obj.patternProperties:
                [2m19:41:41.549623 line      1560[0m         for item in obj.anyOf:
                [2m19:41:41.549642 line      1562[0m         for item in obj.allOf:
                [2m19:41:41.549662 line      1564[0m         if obj.properties:
                [2m19:41:41.549681 return    1564[0m         if obj.properties:
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.000203[0m
            [2m19:41:41.549722 line      1565[0m             for property_value in obj.properties.values():
            [2m19:41:41.549782 return    1565[0m             for property_value in obj.properties.values():
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.000700[0m
        [2m19:41:41.549851 line      1717[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'dog'[0m
        [2m19:41:41.549945 line      1718[0m                     obj = self.SCHEMA_OBJECT_TYPE.parse_obj(model)
        [2m19:41:41.550119 line      1719[0m                     self.parse_id(obj, [*path_parts, _schema_path, key])
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog'][0m
            [2m19:41:41.550213 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.550264 line      1547[0m         if obj.id:
            [2m19:41:41.550298 line      1549[0m         if obj.items:
            [2m19:41:41.550329 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.550360 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.550393 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.550426 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.550458 line      1564[0m         if obj.properties:
            [2m19:41:41.550489 line      1565[0m             for property_value in obj.properties.values():
            [32m[2mNew var:....... [22mproperty_value = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [2m19:41:41.550522 line      1566[0m                 if isinstance(property_value, JsonSchemaObject):
            [2m19:41:41.550568 line      1567[0m                     self.parse_id(property_value, path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog'][0m
                [2m19:41:41.550615 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                [2m19:41:41.550653 line      1547[0m         if obj.id:
                [2m19:41:41.550677 line      1549[0m         if obj.items:
                [2m19:41:41.550698 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.550720 line      1557[0m         if obj.patternProperties:
                [2m19:41:41.550741 line      1560[0m         for item in obj.anyOf:
                [2m19:41:41.550763 line      1562[0m         for item in obj.allOf:
                [2m19:41:41.550783 line      1564[0m         if obj.properties:
                [2m19:41:41.550812 return    1564[0m         if obj.properties:
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.000234[0m
            [2m19:41:41.550857 line      1565[0m             for property_value in obj.properties.values():
            [2m19:41:41.550900 return    1565[0m             for property_value in obj.properties.values():
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.000737[0m
        [2m19:41:41.550958 line      1717[0m                 for key, model in definitions.items():
        [2m19:41:41.551036 line      1721[0m                 if object_paths:
        [2m19:41:41.551108 line      1726[0m                     self.parse_obj(obj_name, root_obj, path_parts or ["#"])
[33m[2m            Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'Animals'[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'animals'}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['aaaschema.json'][0m
            [2m19:41:41.551192 call      1585[0m     def parse_obj(
            [2m19:41:41.551266 line      1591[0m         if obj.is_array:
            [2m19:41:41.551330 line      1593[0m         elif obj.allOf:
            [2m19:41:41.551377 line      1595[0m         elif obj.oneOf or obj.anyOf:
            [2m19:41:41.551423 line      1599[0m         elif obj.properties:
            [2m19:41:41.551469 line      1600[0m             self.parse_object(name, obj, path)
[33m[2m                Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'Animals'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'animals'}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['aaaschema.json'][0m
                [32m[2mStarting var:.. [22msingular_name = False[0m
                [32m[2mStarting var:.. [22munique = True[0m
                [2m19:41:41.551536 call       970[0m     def parse_object(
                [2m19:41:41.551637 line       978[0m         if not unique:  # pragma: no cover
                [2m19:41:41.551697 line       985[0m         if self.use_title_as_name and obj.title:
                [2m19:41:41.551757 line       987[0m         reference = self.model_resolver.add(
                [2m19:41:41.551822 line       988[0m             path,
                [2m19:41:41.551881 line       989[0m             name,
                [2m19:41:41.551936 line       990[0m             class_name=True,
                [2m19:41:41.551989 line       991[0m             singular_name=singular_name,
                [2m19:41:41.552043 line       992[0m             loaded=True,
                [2m19:41:41.552095 line       987[0m         reference = self.model_resolver.add(
                [32m[2mNew var:....... [22mreference = Reference(path='aaaschema.json#', original_name=...name=None, loaded=True, source=None, children=[])[0m
                [2m19:41:41.552236 line       994[0m         class_name = reference.name
                [32m[2mNew var:....... [22mclass_name = 'Animals'[0m
                [2m19:41:41.552320 line       995[0m         self.set_title(class_name, obj)
[33m[2m                    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'Animals'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'animals'}, discriminator=None)[0m
                    [2m19:41:41.552400 call       660[0m     def set_title(self, name: str, obj: JsonSchemaObject) -> None:
                    [2m19:41:41.552486 line       661[0m         if obj.title:
                    [2m19:41:41.552537 line       662[0m             self.extra_template_data[name]["title"] = obj.title
                    [2m19:41:41.552588 return     662[0m             self.extra_template_data[name]["title"] = obj.title
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000255[0m
                [2m19:41:41.552663 line       996[0m         fields = self.parse_object_fields(
                [2m19:41:41.552726 line       997[0m             obj, path, get_module_name(class_name, None, treat_dot_as_module=self.treat_dot_as_module)
                [2m19:41:41.552793 line       996[0m         fields = self.parse_object_fields(
[33m[2m                    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'animals'}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json'][0m
                    [32m[2mStarting var:.. [22mmodule_name = ''[0m
                    [2m19:41:41.552880 call       914[0m     def parse_object_fields(
                    [2m19:41:41.552965 line       920[0m         properties: dict[str, JsonSchemaObject | bool] = {} if obj.properties is None else obj.properties
                    [32m[2mNew var:....... [22mproperties = {'animals': JsonSchemaObject(items=JsonSchemaObj...m_base_path=None, extras={}, discriminator=None)}[0m
                    [2m19:41:41.553018 line       921[0m         requires: set[str] = {*()} if obj.required is None else {*obj.required}
                    [32m[2mNew var:....... [22mrequires = set()[0m
                    [2m19:41:41.553095 line       922[0m         fields: list[DataModelFieldBase] = []
                    [32m[2mNew var:....... [22mfields = [][0m
                    [2m19:41:41.553173 line       924[0m         exclude_field_names: set[str] = set()
                    [32m[2mNew var:....... [22mexclude_field_names = set()[0m
                    [2m19:41:41.553247 line       925[0m         for original_field_name, field in properties.items():
                    [32m[2mNew var:....... [22moriginal_field_name = 'animals'[0m
                    [32m[2mNew var:....... [22mfield = JsonSchemaObject(items=JsonSchemaObject(items=No...om_base_path=None, extras={}, discriminator=None)[0m
                    [2m19:41:41.553319 line       926[0m             field_name, alias = self.model_resolver.get_valid_field_name_and_alias(
                    [2m19:41:41.553414 line       927[0m                 original_field_name, excludes=exclude_field_names
                    [2m19:41:41.553497 line       926[0m             field_name, alias = self.model_resolver.get_valid_field_name_and_alias(
                    [32m[2mNew var:....... [22mfield_name = 'animals'[0m
                    [32m[2mNew var:....... [22malias = None[0m
                    [2m19:41:41.553620 line       929[0m             modular_name = f"{module_name}.{field_name}" if module_name else field_name
                    [32m[2mNew var:....... [22mmodular_name = 'animals'[0m
                    [2m19:41:41.553719 line       931[0m             exclude_field_names.add(field_name)
                    [32m[2mModified var:.. [22mexclude_field_names = {'animals'}[0m
                    [2m19:41:41.553816 line       933[0m             if isinstance(field, bool):
                    [2m19:41:41.553913 line       950[0m             field_type = self.parse_item(modular_name, field, [*path, field_name])
[33m[2m                        Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'animals'[0m
                        [32m[2mStarting var:.. [22mitem = JsonSchemaObject(items=JsonSchemaObject(items=No...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['aaaschema.json', 'animals'][0m
                        [32m[2mStarting var:.. [22msingular_name = False[0m
                        [32m[2mStarting var:.. [22mparent = None[0m
                        [2m19:41:41.554025 call      1068[0m     def parse_item(  # noqa: PLR0911, PLR0912
                        [2m19:41:41.554105 line      1076[0m         if self.use_title_as_name and item.title:
                        [2m19:41:41.554141 line      1079[0m         if parent and not item.enum and item.has_constraint and (parent.has_constraint or self.field_constraints):
                        [2m19:41:41.554175 line      1091[0m         if item.ref:
                        [2m19:41:41.554209 line      1092[0m             return self.get_ref_data_type(item.ref)
[33m[2m                            Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mref = 'commons.json#/$defs/smallArray'[0m
                            [2m19:41:41.554248 call       652[0m     def get_ref_data_type(self, ref: str) -> DataType:
                            [2m19:41:41.554276 line       653[0m         reference = self.model_resolver.add_ref(ref)
                            [32m[2mNew var:....... [22mreference = Reference(path='commons.json#/$defs/smallArray',...ame=None, loaded=False, source=None, children=[])[0m
                            [2m19:41:41.554513 line       654[0m         return self.data_type(reference=reference)
                            [32m[2mModified var:.. [22mreference = Reference(path='commons.json#/$defs/smallArray',...alse, dict_key=None, treat_dot_as_module=False)])[0m
                            [2m19:41:41.554601 return     654[0m         return self.data_type(reference=reference)
                            [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                            [33m[2mElapsed time: [22m00:00:00.000439[0m
                        [2m19:41:41.554699 return    1092[0m             return self.get_ref_data_type(item.ref)
                        [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                        [33m[2mElapsed time: [22m00:00:00.000771[0m
                    [32m[2mNew var:....... [22mfield_type = ContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                    [2m19:41:41.554787 line       952[0m             if self.force_optional_for_required_fields or (
                    [2m19:41:41.554923 line       953[0m                 self.apply_default_values_for_required_fields and field.has_default
                    [2m19:41:41.555035 line       957[0m                 required = original_field_name in requires
                    [32m[2mNew var:....... [22mrequired = False[0m
                    [2m19:41:41.555144 line       958[0m             fields.append(
                    [2m19:41:41.555258 line       959[0m                 self.get_object_field(
                    [2m19:41:41.555367 line       960[0m                     field_name=field_name,
                    [2m19:41:41.555478 line       961[0m                     field=field,
                    [2m19:41:41.555586 line       962[0m                     required=required,
                    [2m19:41:41.555691 line       963[0m                     field_type=field_type,
                    [2m19:41:41.555796 line       964[0m                     alias=alias,
                    [2m19:41:41.555904 line       965[0m                     original_field_name=original_field_name,
                    [2m19:41:41.556008 line       959[0m                 self.get_object_field(
[33m[2m                        Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mfield_name = 'animals'[0m
                        [32m[2mStarting var:.. [22mfield = JsonSchemaObject(items=JsonSchemaObject(items=No...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mrequired = False[0m
                        [32m[2mStarting var:.. [22mfield_type = ContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                        [32m[2mStarting var:.. [22malias = None[0m
                        [32m[2mStarting var:.. [22moriginal_field_name = 'animals'[0m
                        [2m19:41:41.556127 call       603[0m     def get_object_field(  # noqa: PLR0913
                        [2m19:41:41.556228 line       613[0m         return self.data_model_field_type(
                        [2m19:41:41.556284 line       614[0m             name=field_name,
                        [2m19:41:41.556336 line       615[0m             default=field.default,
                        [2m19:41:41.556388 line       616[0m             data_type=field_type,
                        [2m19:41:41.556437 line       617[0m             required=required,
                        [2m19:41:41.556488 line       618[0m             alias=alias,
                        [2m19:41:41.556539 line       619[0m             constraints=field.dict() if self.is_constraints_field(field) else None,
[33m[2m                            Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=JsonSchemaObject(items=No...om_base_path=None, extras={}, discriminator=None)[0m
                            [2m19:41:41.556599 call       598[0m     def is_constraints_field(self, obj: JsonSchemaObject) -> bool:
                            [2m19:41:41.556650 line       599[0m         return obj.is_array or (
                            [2m19:41:41.556687 return     599[0m         return obj.is_array or (
                            [36m[2mReturn value:.. [22mTrue[0m
                            [33m[2mElapsed time: [22m00:00:00.000136[0m
                        [2m19:41:41.556792 line       620[0m             nullable=field.nullable if self.strict_nullable and (field.has_default or required) else None,
                        [2m19:41:41.556865 line       621[0m             strip_default_none=self.strip_default_none,
                        [2m19:41:41.556920 line       622[0m             extras=self.get_field_extras(field),
[33m[2m                            Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=JsonSchemaObject(items=No...om_base_path=None, extras={}, discriminator=None)[0m
                            [2m19:41:41.556989 call       565[0m     def get_field_extras(self, obj: JsonSchemaObject) -> dict[str, Any]:
                            [2m19:41:41.557043 line       566[0m         if self.field_include_all_keys:
                            [2m19:41:41.557091 line       574[0m                 for k, v in obj.extras.items()
                            [2m19:41:41.557134 line       572[0m             extras = {
                            [2m19:41:41.557165 line       574[0m                 for k, v in obj.extras.items()
                            [2m19:41:41.557194 line       572[0m             extras = {
                            [32m[2mNew var:....... [22mextras = {}[0m
                            [2m19:41:41.557223 line       577[0m         if self.default_field_extras:
                            [2m19:41:41.557259 line       579[0m         return extras
                            [2m19:41:41.557289 return     579[0m         return extras
                            [36m[2mReturn value:.. [22m{}[0m
                            [33m[2mElapsed time: [22m00:00:00.000353[0m
                        [2m19:41:41.557342 line       623[0m             use_annotated=self.use_annotated,
                        [2m19:41:41.557399 line       624[0m             use_field_description=self.use_field_description,
                        [2m19:41:41.557450 line       625[0m             use_default_kwarg=self.use_default_kwarg,
                        [2m19:41:41.557503 line       626[0m             original_name=original_field_name,
                        [2m19:41:41.557552 line       627[0m             has_default=field.has_default,
                        [2m19:41:41.557622 line       628[0m             type_has_null=field.type_has_null,
                        [2m19:41:41.557683 line       613[0m         return self.data_model_field_type(
                        [32m[2mModified var:.. [22mfield_type = REPR FAILED[0m
                        [2m19:41:41.557852 return     613[0m         return self.data_model_field_type(
                        [36m[2mReturn value:.. [22mREPR FAILED[0m
                        [33m[2mElapsed time: [22m00:00:00.005402[0m
                    [32m[2mModified var:.. [22mfield_type = REPR FAILED[0m
                    [2m19:41:41.561545 line       958[0m             fields.append(
                    [32m[2mModified var:.. [22mfields = REPR FAILED[0m
                    [2m19:41:41.563242 line       925[0m         for original_field_name, field in properties.items():
                    [2m19:41:41.567009 line       968[0m         return fields
                    [2m19:41:41.570515 return     968[0m         return fields
                    [36m[2mReturn value:.. [22mREPR FAILED[0m
                    [33m[2mElapsed time: [22m00:00:00.022272[0m
                [32m[2mNew var:....... [22mfields = REPR FAILED[0m
                [2m19:41:41.575162 line       999[0m         if fields or not isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.576650 line      1000[0m             data_model_type_class = self.data_model_type
                [32m[2mNew var:....... [22mdata_model_type_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                [2m19:41:41.578219 line      1024[0m         self.set_additional_properties(class_name, obj)
[33m[2m                    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'Animals'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'animals'}, discriminator=None)[0m
                    [2m19:41:41.579841 call       656[0m     def set_additional_properties(self, name: str, obj: JsonSchemaObject) -> None:
                    [2m19:41:41.579929 line       657[0m         if isinstance(obj.additionalProperties, bool):
                    [2m19:41:41.579976 line       658[0m             self.extra_template_data[name]["additionalProperties"] = obj.additionalProperties
                    [2m19:41:41.580022 return     658[0m             self.extra_template_data[name]["additionalProperties"] = obj.additionalProperties
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000246[0m
                [2m19:41:41.580093 line      1026[0m         data_model_type = self._create_data_model(
                [2m19:41:41.581731 line      1027[0m             model_type=data_model_type_class,
                [2m19:41:41.583822 line      1028[0m             reference=reference,
                [2m19:41:41.585548 line      1029[0m             fields=fields,
                [2m19:41:41.587174 line      1030[0m             custom_base_class=obj.custom_base_path or self.base_class,
                [2m19:41:41.588788 line      1031[0m             custom_template_dir=self.custom_template_dir,
                [2m19:41:41.590410 line      1032[0m             extra_template_data=self.extra_template_data,
                [2m19:41:41.592042 line      1033[0m             path=self.current_source_path,
                [2m19:41:41.593698 line      1034[0m             description=obj.description if self.use_schema_description else None,
                [2m19:41:41.595306 line      1035[0m             nullable=obj.type_has_null,
                [2m19:41:41.596918 line      1036[0m             keyword_only=self.keyword_only,
                [2m19:41:41.598589 line      1037[0m             treat_dot_as_module=self.treat_dot_as_module,
                [2m19:41:41.600634 line      1026[0m         data_model_type = self._create_data_model(
[33m[2m                    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mmodel_type = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                    [32m[2mStarting var:.. [22mkwargs = REPR FAILED[0m
                    [2m19:41:41.602669 call       731[0m     def _create_data_model(self, model_type: type[DataModel] | None = None, **kwargs: Any) -> DataModel:
                    [2m19:41:41.604352 line       733[0m         data_model_class = model_type or self.data_model_type
                    [32m[2mNew var:....... [22mdata_model_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                    [2m19:41:41.606007 line       734[0m         if issubclass(data_model_class, DataClass):
                    [2m19:41:41.607619 line       736[0m         return data_model_class(**kwargs)
                    [2m19:41:41.609411 return     736[0m         return data_model_class(**kwargs)
                    [36m[2mReturn value:.. [22m<datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
                    [33m[2mElapsed time: [22m00:00:00.008399[0m
                [32m[2mModified var:.. [22mreference = Reference(path='aaaschema.json#', original_name=...BaseModel object at 0x7f80009e17f0>, children=[])[0m
                [32m[2mNew var:....... [22mdata_model_type = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
                [2m19:41:41.611076 line      1039[0m         self.results.append(data_model_type)
                [2m19:41:41.612766 line      1040[0m         return self.data_type(reference=reference)
                [32m[2mModified var:.. [22mreference = Reference(path='aaaschema.json#', original_name=...alse, dict_key=None, treat_dot_as_module=False)])[0m
                [2m19:41:41.614536 return    1040[0m         return self.data_type(reference=reference)
                [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                [33m[2mElapsed time: [22m00:00:00.065465[0m
            [2m19:41:41.617015 line      1609[0m         self.parse_ref(obj, path)
[33m[2m                Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'animals'}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['aaaschema.json'][0m
                [2m19:41:41.617132 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                [2m19:41:41.617243 line      1522[0m         if obj.ref:
                [2m19:41:41.617302 line      1524[0m         if obj.items:
                [2m19:41:41.617352 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.617402 line      1532[0m         if obj.patternProperties:
                [2m19:41:41.617447 line      1535[0m         for item in obj.anyOf:
                [2m19:41:41.617492 line      1537[0m         for item in obj.allOf:
                [2m19:41:41.617536 line      1539[0m         for item in obj.oneOf:
                [2m19:41:41.617581 line      1541[0m         if obj.properties:
                [2m19:41:41.617626 line      1542[0m             for property_value in obj.properties.values():
                [32m[2mNew var:....... [22mproperty_value = JsonSchemaObject(items=JsonSchemaObject(items=No...om_base_path=None, extras={}, discriminator=None)[0m
                [2m19:41:41.617671 line      1543[0m                 if isinstance(property_value, JsonSchemaObject):
                [2m19:41:41.617745 line      1544[0m                     self.parse_ref(property_value, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=JsonSchemaObject(items=No...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json'][0m
                    [2m19:41:41.617820 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.617869 line      1522[0m         if obj.ref:
                    [2m19:41:41.617903 line      1523[0m             self.resolve_ref(obj.ref)
[33m[2m                        Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobject_ref = 'commons.json#/$defs/smallArray'[0m
                        [2m19:41:41.617955 call      1482[0m     def resolve_ref(self, object_ref: str) -> Reference:
                        [2m19:41:41.617997 line      1483[0m         reference = self.model_resolver.add_ref(object_ref)
                        [32m[2mNew var:....... [22mreference = REPR FAILED[0m
                        [2m19:41:41.618192 line      1484[0m         if reference.loaded:
                        [2m19:41:41.619894 line      1488[0m         ref = self.model_resolver.resolve_ref(object_ref)
                        [32m[2mNew var:....... [22mref = 'commons.json#/$defs/smallArray'[0m
                        [2m19:41:41.621732 line      1489[0m         if get_ref_type(object_ref) == JSONReference.LOCAL:
                        [2m19:41:41.623537 line      1493[0m         if self.model_resolver.is_after_load(ref):
                        [2m19:41:41.625239 line      1494[0m             self.reserved_refs[tuple(ref.split("#")[0].split("/"))].add(ref)
                        [2m19:41:41.626763 line      1495[0m             return reference
                        [2m19:41:41.628291 return    1495[0m             return reference
                        [36m[2mReturn value:.. [22mREPR FAILED[0m
                        [33m[2mElapsed time: [22m00:00:00.013387[0m
                    [2m19:41:41.631341 line      1524[0m         if obj.items:
                    [2m19:41:41.631392 line      1525[0m             if isinstance(obj.items, JsonSchemaObject):
                    [2m19:41:41.631426 line      1526[0m                 self.parse_ref(obj.items, path)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['aaaschema.json'][0m
                        [2m19:41:41.631469 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                        [2m19:41:41.631510 line      1522[0m         if obj.ref:
                        [2m19:41:41.631532 line      1523[0m             self.resolve_ref(obj.ref)
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobject_ref = '#/$defs/AllowedAnimals'[0m
                            [2m19:41:41.631559 call      1482[0m     def resolve_ref(self, object_ref: str) -> Reference:
                            [2m19:41:41.631583 line      1483[0m         reference = self.model_resolver.add_ref(object_ref)
                            [32m[2mNew var:....... [22mreference = Reference(path='aaaschema.json#/$defs/AllowedAni...ame=None, loaded=False, source=None, children=[])[0m
                            [2m19:41:41.631732 line      1484[0m         if reference.loaded:
                            [2m19:41:41.631764 line      1488[0m         ref = self.model_resolver.resolve_ref(object_ref)
                            [32m[2mNew var:....... [22mref = 'aaaschema.json#/$defs/AllowedAnimals'[0m
                            [2m19:41:41.631823 line      1489[0m         if get_ref_type(object_ref) == JSONReference.LOCAL:
                            [2m19:41:41.631851 line      1491[0m             self.reserved_refs[tuple(self.model_resolver.current_root)].add(ref)
                            [2m19:41:41.631873 line      1492[0m             return reference
                            [2m19:41:41.631895 return    1492[0m             return reference
                            [36m[2mReturn value:.. [22mReference(path='aaaschema.json#/$defs/AllowedAni...ame=None, loaded=False, source=None, children=[])[0m
                            [33m[2mElapsed time: [22m00:00:00.000368[0m
                        [2m19:41:41.631942 line      1524[0m         if obj.items:
                        [2m19:41:41.631976 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                        [2m19:41:41.632002 line      1532[0m         if obj.patternProperties:
                        [2m19:41:41.632024 line      1535[0m         for item in obj.anyOf:
                        [2m19:41:41.632047 line      1537[0m         for item in obj.allOf:
                        [2m19:41:41.632068 line      1539[0m         for item in obj.oneOf:
                        [2m19:41:41.632090 line      1541[0m         if obj.properties:
                        [2m19:41:41.632118 return    1541[0m         if obj.properties:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000692[0m
                    [2m19:41:41.632170 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.632217 line      1532[0m         if obj.patternProperties:
                    [2m19:41:41.632253 line      1535[0m         for item in obj.anyOf:
                    [2m19:41:41.632288 line      1537[0m         for item in obj.allOf:
                    [2m19:41:41.632337 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.632379 line      1541[0m         if obj.properties:
                    [2m19:41:41.632422 return    1541[0m         if obj.properties:
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.014653[0m
                [2m19:41:41.632482 line      1542[0m             for property_value in obj.properties.values():
                [2m19:41:41.632671 return    1542[0m             for property_value in obj.properties.values():
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.015684[0m
            [2m19:41:41.632841 return    1609[0m         self.parse_ref(obj, path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.081735[0m
        [2m19:41:41.632941 line      1727[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'AllowedAnimals'[0m
        [32m[2mModified var:.. [22mmodel = {'oneOf': [{'$ref': '#/$defs/dog'}, {'$ref': '#/$defs/cat'}]}[0m
        [2m19:41:41.633058 line      1728[0m                     path = [*path_parts, _schema_path, key]
        [32m[2mModified var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals'][0m
        [2m19:41:41.633164 line      1729[0m                     reference = self.model_resolver.get(path)
        [32m[2mNew var:....... [22mreference = Reference(path='aaaschema.json#/$defs/AllowedAni...ame=None, loaded=False, source=None, children=[])[0m
        [2m19:41:41.633446 line      1730[0m                     if not reference or not reference.loaded:
        [2m19:41:41.633564 line      1731[0m                         self.parse_raw_obj(key, model, path)
[33m[2m            Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
            [32m[2mStarting var:.. [22mraw = {'oneOf': [{'$ref': '#/$defs/dog'}, {'$ref': '#/$defs/cat'}]}[0m
            [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals'][0m
            [2m19:41:41.633676 call      1577[0m     def parse_raw_obj(
            [2m19:41:41.633725 line      1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals'][0m
                [2m19:41:41.633874 call      1585[0m     def parse_obj(
                [2m19:41:41.633959 line      1591[0m         if obj.is_array:
                [2m19:41:41.634020 line      1593[0m         elif obj.allOf:
                [2m19:41:41.634063 line      1595[0m         elif obj.oneOf or obj.anyOf:
                [2m19:41:41.634102 line      1596[0m             data_type = self.parse_root_type(name, obj, path)
[33m[2m                    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals'][0m
                    [2m19:41:41.634170 call      1256[0m     def parse_root_type(  # noqa: PLR0912
                    [2m19:41:41.634246 line      1262[0m         reference: Reference | None = None
                    [32m[2mNew var:....... [22mreference = None[0m
                    [2m19:41:41.634290 line      1263[0m         if obj.ref:
                    [2m19:41:41.634338 line      1265[0m         elif obj.custom_type_path:
                    [2m19:41:41.634381 line      1269[0m         elif obj.is_array:
                    [2m19:41:41.634422 line      1273[0m         elif obj.anyOf or obj.oneOf:
                    [2m19:41:41.634464 line      1274[0m             reference = self.model_resolver.add(path, name, loaded=True, class_name=True)
                    [32m[2mModified var:.. [22mreference = Reference(path='aaaschema.json#/$defs/AllowedAni...name=None, loaded=True, source=None, children=[])[0m
                    [2m19:41:41.634520 line      1275[0m             if obj.anyOf:
                    [2m19:41:41.634575 line      1278[0m                 data_types = self.parse_one_of(name, obj, get_special_path("oneOf", path))
[33m[2m                        Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals', '#-datamodel-code-generator-#-oneOf-#-special-#'][0m
                        [2m19:41:41.634630 call       728[0m     def parse_one_of(self, name: str, obj: JsonSchemaObject, path: list[str]) -> list[DataType]:
                        [2m19:41:41.634699 line       729[0m         return self.parse_combined_schema(name, obj, path, "oneOf")
[33m[2m                            Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals', '#-datamodel-code-generator-#-oneOf-#-special-#'][0m
                            [32m[2mStarting var:.. [22mtarget_attribute_name = 'oneOf'[0m
                            [2m19:41:41.634757 call       677[0m     def parse_combined_schema(
                            [2m19:41:41.634848 line       684[0m         base_object = obj.dict(exclude={target_attribute_name}, exclude_unset=True, by_alias=True)
                            [32m[2mNew var:....... [22mbase_object = {'#-datamodel-code-generator-#-extras-#-special-#': {}}[0m
                            [2m19:41:41.634956 line       685[0m         combined_schemas: list[JsonSchemaObject] = []
                            [32m[2mNew var:....... [22mcombined_schemas = [][0m
                            [2m19:41:41.635029 line       686[0m         refs = []
                            [32m[2mNew var:....... [22mrefs = [][0m
                            [2m19:41:41.635081 line       687[0m         for index, target_attribute in enumerate(getattr(obj, target_attribute_name, [])):
                            [32m[2mNew var:....... [22mindex = 0[0m
                            [32m[2mNew var:....... [22mtarget_attribute = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [2m19:41:41.635131 line       688[0m             if target_attribute.ref:
                            [2m19:41:41.635195 line       689[0m                 combined_schemas.append(target_attribute)
                            [32m[2mModified var:.. [22mcombined_schemas = [JsonSchemaObject(items=None, uniqueItems=None, ...m_base_path=None, extras={}, discriminator=None)][0m
                            [2m19:41:41.635250 line       690[0m                 refs.append(index)
                            [32m[2mModified var:.. [22mrefs = [0][0m
                            [2m19:41:41.635317 line       687[0m         for index, target_attribute in enumerate(getattr(obj, target_attribute_name, [])):
                            [32m[2mModified var:.. [22mindex = 1[0m
                            [2m19:41:41.635387 line       688[0m             if target_attribute.ref:
                            [2m19:41:41.635455 line       689[0m                 combined_schemas.append(target_attribute)
                            [2m19:41:41.635518 line       690[0m                 refs.append(index)
                            [32m[2mModified var:.. [22mrefs = [0, 1][0m
                            [2m19:41:41.635589 line       687[0m         for index, target_attribute in enumerate(getattr(obj, target_attribute_name, [])):
                            [2m19:41:41.635665 line       702[0m         parsed_schemas = self.parse_list_item(
                            [2m19:41:41.635736 line       703[0m             name,
                            [2m19:41:41.635810 line       704[0m             combined_schemas,
                            [2m19:41:41.635880 line       705[0m             path,
                            [2m19:41:41.635950 line       706[0m             obj,
                            [2m19:41:41.636020 line       707[0m             singular_name=False,
                            [2m19:41:41.636090 line       702[0m         parsed_schemas = self.parse_list_item(
[33m[2m                                Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                                [32m[2mStarting var:.. [22mtarget_items = [JsonSchemaObject(items=None, uniqueItems=None, ...m_base_path=None, extras={}, discriminator=None)][0m
                                [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals', '#-datamodel-code-generator-#-oneOf-#-special-#'][0m
                                [32m[2mStarting var:.. [22mparent = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [32m[2mStarting var:.. [22msingular_name = False[0m
                                [2m19:41:41.636174 call      1133[0m     def parse_list_item(
                                [2m19:41:41.636276 line      1149[0m             for index, item in enumerate(target_items)
                                [2m19:41:41.636339 line      1141[0m         return [
                                [2m19:41:41.636398 line      1149[0m             for index, item in enumerate(target_items)
                                [32m[2mNew var:....... [22mindex = 0[0m
                                [32m[2mNew var:....... [22mitem = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [2m19:41:41.636460 line      1142[0m             self.parse_item(
                                [2m19:41:41.636539 line      1143[0m                 name,
                                [2m19:41:41.636610 line      1144[0m                 item,
                                [2m19:41:41.636678 line      1145[0m                 [*path, str(index)],
                                [2m19:41:41.636746 line      1146[0m                 singular_name=singular_name,
                                [2m19:41:41.636833 line      1147[0m                 parent=parent,
                                [2m19:41:41.636902 line      1142[0m             self.parse_item(
                                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                    [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                                    [32m[2mStarting var:.. [22mitem = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals', ...tamodel-code-generator-#-oneOf-#-special-#', '0'][0m
                                    [32m[2mStarting var:.. [22msingular_name = False[0m
                                    [32m[2mStarting var:.. [22mparent = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                    [2m19:41:41.636988 call      1068[0m     def parse_item(  # noqa: PLR0911, PLR0912
                                    [2m19:41:41.637087 line      1076[0m         if self.use_title_as_name and item.title:
                                    [2m19:41:41.637147 line      1079[0m         if parent and not item.enum and item.has_constraint and (parent.has_constraint or self.field_constraints):
                                    [2m19:41:41.637224 line      1091[0m         if item.ref:
                                    [2m19:41:41.637283 line      1092[0m             return self.get_ref_data_type(item.ref)
                                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                        [32m[2mStarting var:.. [22mref = '#/$defs/dog'[0m
                                        [2m19:41:41.637344 call       652[0m     def get_ref_data_type(self, ref: str) -> DataType:
                                        [2m19:41:41.637368 line       653[0m         reference = self.model_resolver.add_ref(ref)
                                        [32m[2mNew var:....... [22mreference = Reference(path='aaaschema.json#/$defs/dog', orig...ame=None, loaded=False, source=None, children=[])[0m
                                        [2m19:41:41.637533 line       654[0m         return self.data_type(reference=reference)
                                        [32m[2mModified var:.. [22mreference = Reference(path='aaaschema.json#/$defs/dog', orig...alse, dict_key=None, treat_dot_as_module=False)])[0m
                                        [2m19:41:41.637604 return     654[0m         return self.data_type(reference=reference)
                                        [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                                        [33m[2mElapsed time: [22m00:00:00.000342[0m
                                    [2m19:41:41.637699 return    1092[0m             return self.get_ref_data_type(item.ref)
                                    [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                                    [33m[2mElapsed time: [22m00:00:00.000808[0m
                                [2m19:41:41.637806 line      1149[0m             for index, item in enumerate(target_items)
                                [32m[2mModified var:.. [22mindex = 1[0m
                                [2m19:41:41.637885 line      1142[0m             self.parse_item(
                                [2m19:41:41.637961 line      1143[0m                 name,
                                [2m19:41:41.638034 line      1144[0m                 item,
                                [2m19:41:41.638104 line      1145[0m                 [*path, str(index)],
                                [2m19:41:41.638175 line      1146[0m                 singular_name=singular_name,
                                [2m19:41:41.638245 line      1147[0m                 parent=parent,
                                [2m19:41:41.638315 line      1142[0m             self.parse_item(
                                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                    [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                                    [32m[2mStarting var:.. [22mitem = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals', ...tamodel-code-generator-#-oneOf-#-special-#', '1'][0m
                                    [32m[2mStarting var:.. [22msingular_name = False[0m
                                    [32m[2mStarting var:.. [22mparent = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                    [2m19:41:41.638394 call      1068[0m     def parse_item(  # noqa: PLR0911, PLR0912
                                    [2m19:41:41.638480 line      1076[0m         if self.use_title_as_name and item.title:
                                    [2m19:41:41.638536 line      1079[0m         if parent and not item.enum and item.has_constraint and (parent.has_constraint or self.field_constraints):
                                    [2m19:41:41.638614 line      1091[0m         if item.ref:
                                    [2m19:41:41.638678 line      1092[0m             return self.get_ref_data_type(item.ref)
                                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                        [32m[2mStarting var:.. [22mref = '#/$defs/cat'[0m
                                        [2m19:41:41.638746 call       652[0m     def get_ref_data_type(self, ref: str) -> DataType:
                                        [2m19:41:41.638781 line       653[0m         reference = self.model_resolver.add_ref(ref)
                                        [32m[2mNew var:....... [22mreference = Reference(path='aaaschema.json#/$defs/cat', orig...ame=None, loaded=False, source=None, children=[])[0m
                                        [2m19:41:41.638972 line       654[0m         return self.data_type(reference=reference)
                                        [32m[2mModified var:.. [22mreference = Reference(path='aaaschema.json#/$defs/cat', orig...alse, dict_key=None, treat_dot_as_module=False)])[0m
                                        [2m19:41:41.639054 return     654[0m         return self.data_type(reference=reference)
                                        [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                                        [33m[2mElapsed time: [22m00:00:00.000391[0m
                                    [2m19:41:41.639151 return    1092[0m             return self.get_ref_data_type(item.ref)
                                    [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                                    [33m[2mElapsed time: [22m00:00:00.000860[0m
                                [2m19:41:41.639259 line      1149[0m             for index, item in enumerate(target_items)
                                [2m19:41:41.639339 line      1141[0m         return [
                                [2m19:41:41.639416 return    1141[0m         return [
                                [36m[2mReturn value:.. [22m[ContextDataType(type=None, reference=Reference(...False, dict_key=None, treat_dot_as_module=False)][0m
                                [33m[2mElapsed time: [22m00:00:00.003367[0m
                            [32m[2mNew var:....... [22mparsed_schemas = [ContextDataType(type=None, reference=Reference(...False, dict_key=None, treat_dot_as_module=False)][0m
                            [2m19:41:41.639546 line       709[0m         common_path_keyword = f"{target_attribute_name}Common"
                            [32m[2mNew var:....... [22mcommon_path_keyword = 'oneOfCommon'[0m
                            [2m19:41:41.639677 line       722[0m             for i, d in enumerate(parsed_schemas)
                            [2m19:41:41.639793 line       710[0m         return [
                            [2m19:41:41.639905 line       722[0m             for i, d in enumerate(parsed_schemas)
                            [32m[2mNew var:....... [22mi = 0[0m
                            [32m[2mNew var:....... [22md = ContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                            [2m19:41:41.640012 line       720[0m             if i in refs and d.reference
                            [2m19:41:41.640146 line       711[0m             self._parse_object_common_part(
                            [2m19:41:41.640286 line       712[0m                 name,
                            [2m19:41:41.640418 line       713[0m                 obj,
                            [2m19:41:41.640553 line       714[0m                 [*get_special_path(common_path_keyword, path), str(i)],
                            [2m19:41:41.640684 line       715[0m                 ignore_duplicate_model=True,
                            [2m19:41:41.640814 line       716[0m                 fields=[],
                            [2m19:41:41.640939 line       717[0m                 base_classes=[d.reference],
                            [2m19:41:41.641064 line       718[0m                 required=[],
                            [2m19:41:41.641188 line       711[0m             self._parse_object_common_part(
[33m[2m                                Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals', ...l-code-generator-#-oneOfCommon-#-special-#', '0'][0m
                                [32m[2mStarting var:.. [22mignore_duplicate_model = True[0m
                                [32m[2mStarting var:.. [22mfields = [][0m
                                [32m[2mStarting var:.. [22mbase_classes = [Reference(path='aaaschema.json#/$defs/dog', ori...lse, dict_key=None, treat_dot_as_module=False)])][0m
                                [32m[2mStarting var:.. [22mrequired = [][0m
                                [2m19:41:41.641344 call       738[0m     def _parse_object_common_part(  # noqa: PLR0913, PLR0917
                                [2m19:41:41.641456 line       748[0m         if obj.properties:
                                [2m19:41:41.641516 line       755[0m         if ignore_duplicate_model and not fields and len(base_classes) == 1:
                                [2m19:41:41.641575 line       756[0m             with self.model_resolver.current_base_path_context(self.model_resolver._base_path):  # noqa: SLF001
                                [2m19:41:41.641712 line       757[0m                 self.model_resolver.delete(path)
                                [2m19:41:41.641918 line       758[0m                 return self.data_type(reference=base_classes[0])
                                [2m19:41:41.642027 line       756[0m             with self.model_resolver.current_base_path_context(self.model_resolver._base_path):  # noqa: SLF001
                                [2m19:41:41.642114 return     756[0m             with self.model_resolver.current_base_path_context(self.model_resolver._base_path):  # noqa: SLF001
                                [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                                [33m[2mElapsed time: [22m00:00:00.000907[0m
                            [2m19:41:41.642241 line       722[0m             for i, d in enumerate(parsed_schemas)
                            [32m[2mModified var:.. [22mi = 1[0m
                            [2m19:41:41.642395 line       720[0m             if i in refs and d.reference
                            [2m19:41:41.642537 line       711[0m             self._parse_object_common_part(
                            [2m19:41:41.642672 line       712[0m                 name,
                            [2m19:41:41.642809 line       713[0m                 obj,
                            [2m19:41:41.642944 line       714[0m                 [*get_special_path(common_path_keyword, path), str(i)],
                            [2m19:41:41.643082 line       715[0m                 ignore_duplicate_model=True,
                            [2m19:41:41.643216 line       716[0m                 fields=[],
                            [2m19:41:41.643347 line       717[0m                 base_classes=[d.reference],
                            [2m19:41:41.643480 line       718[0m                 required=[],
                            [2m19:41:41.643613 line       711[0m             self._parse_object_common_part(
                                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals', ...l-code-generator-#-oneOfCommon-#-special-#', '1'][0m
                                [32m[2mStarting var:.. [22mignore_duplicate_model = True[0m
                                [32m[2mStarting var:.. [22mfields = [][0m
                                [32m[2mStarting var:.. [22mbase_classes = [Reference(path='aaaschema.json#/$defs/cat', ori...lse, dict_key=None, treat_dot_as_module=False)])][0m
                                [32m[2mStarting var:.. [22mrequired = [][0m
                                [2m19:41:41.643758 call       738[0m     def _parse_object_common_part(  # noqa: PLR0913, PLR0917
                                [2m19:41:41.643862 line       748[0m         if obj.properties:
                                [2m19:41:41.643922 line       755[0m         if ignore_duplicate_model and not fields and len(base_classes) == 1:
                                [2m19:41:41.643979 line       756[0m             with self.model_resolver.current_base_path_context(self.model_resolver._base_path):  # noqa: SLF001
                                [2m19:41:41.644093 line       757[0m                 self.model_resolver.delete(path)
                                [2m19:41:41.644264 line       758[0m                 return self.data_type(reference=base_classes[0])
                                [2m19:41:41.644358 line       756[0m             with self.model_resolver.current_base_path_context(self.model_resolver._base_path):  # noqa: SLF001
                                [2m19:41:41.644437 return     756[0m             with self.model_resolver.current_base_path_context(self.model_resolver._base_path):  # noqa: SLF001
                                [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                                [33m[2mElapsed time: [22m00:00:00.000787[0m
                            [2m19:41:41.644553 line       722[0m             for i, d in enumerate(parsed_schemas)
                            [2m19:41:41.644710 line       710[0m         return [
                            [2m19:41:41.644866 return     710[0m         return [
                            [36m[2mReturn value:.. [22m[ContextDataType(type=None, reference=Reference(...False, dict_key=None, treat_dot_as_module=False)][0m
                            [33m[2mElapsed time: [22m00:00:00.010309[0m
                        [2m19:41:41.645063 return     729[0m         return self.parse_combined_schema(name, obj, path, "oneOf")
                        [36m[2mReturn value:.. [22m[ContextDataType(type=None, reference=Reference(...False, dict_key=None, treat_dot_as_module=False)][0m
                        [33m[2mElapsed time: [22m00:00:00.010544[0m
                    [32m[2mNew var:....... [22mdata_types = [ContextDataType(type=None, reference=Reference(...False, dict_key=None, treat_dot_as_module=False)][0m
                    [2m19:41:41.645185 line      1280[0m             if len(data_types) > 1:  # pragma: no cover
                    [2m19:41:41.645293 line      1281[0m                 data_type = self.data_type(data_types=data_types)
                    [32m[2mNew var:....... [22mdata_type = ContextDataType(type=None, reference=None, data_...=False, dict_key=None, treat_dot_as_module=False)[0m
                    [2m19:41:41.645444 line      1299[0m         if self.force_optional_for_required_fields:
                    [2m19:41:41.645662 line      1302[0m             required = not obj.nullable and not (obj.has_default and self.apply_default_values_for_required_fields)
                    [32m[2mNew var:....... [22mrequired = True[0m
                    [2m19:41:41.645880 line      1303[0m         if self.use_title_as_name and obj.title:
                    [2m19:41:41.646088 line      1305[0m         if not reference:
                    [2m19:41:41.646285 line      1307[0m         self.set_title(name, obj)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.646492 call       660[0m     def set_title(self, name: str, obj: JsonSchemaObject) -> None:
                        [2m19:41:41.646551 line       661[0m         if obj.title:
                        [2m19:41:41.646593 return     661[0m         if obj.title:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000156[0m
                    [2m19:41:41.646658 line      1308[0m         self.set_additional_properties(name, obj)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.646868 call       656[0m     def set_additional_properties(self, name: str, obj: JsonSchemaObject) -> None:
                        [2m19:41:41.646924 line       657[0m         if isinstance(obj.additionalProperties, bool):
                        [2m19:41:41.646965 return     657[0m         if isinstance(obj.additionalProperties, bool):
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000149[0m
                    [2m19:41:41.647027 line      1309[0m         data_model_root_type = self.data_model_root_type(
                    [2m19:41:41.647265 line      1310[0m             reference=reference,
                    [2m19:41:41.647477 line      1312[0m                 self.data_model_field_type(
                    [2m19:41:41.647677 line      1313[0m                     data_type=data_type,
                    [2m19:41:41.647877 line      1314[0m                     default=obj.default,
                    [2m19:41:41.648076 line      1315[0m                     required=required,
                    [2m19:41:41.648281 line      1316[0m                     constraints=obj.dict() if self.field_constraints else {},
                    [2m19:41:41.648482 line      1317[0m                     nullable=obj.nullable if self.strict_nullable else None,
                    [2m19:41:41.648701 line      1318[0m                     strip_default_none=self.strip_default_none,
                    [2m19:41:41.648962 line      1319[0m                     extras=self.get_field_extras(obj),
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.649244 call       565[0m     def get_field_extras(self, obj: JsonSchemaObject) -> dict[str, Any]:
                        [2m19:41:41.649311 line       566[0m         if self.field_include_all_keys:
                        [2m19:41:41.649358 line       574[0m                 for k, v in obj.extras.items()
                        [2m19:41:41.649408 line       572[0m             extras = {
                        [2m19:41:41.649456 line       574[0m                 for k, v in obj.extras.items()
                        [2m19:41:41.649522 line       572[0m             extras = {
                        [32m[2mNew var:....... [22mextras = {}[0m
                        [2m19:41:41.649569 line       577[0m         if self.default_field_extras:
                        [2m19:41:41.649627 line       579[0m         return extras
                        [2m19:41:41.649675 return     579[0m         return extras
                        [36m[2mReturn value:.. [22m{}[0m
                        [33m[2mElapsed time: [22m00:00:00.000503[0m
                    [2m19:41:41.649754 line      1320[0m                     use_annotated=self.use_annotated,
                    [2m19:41:41.650009 line      1321[0m                     use_field_description=self.use_field_description,
                    [2m19:41:41.650240 line      1322[0m                     original_name=None,
                    [2m19:41:41.650451 line      1323[0m                     has_default=obj.has_default,
                    [2m19:41:41.650656 line      1312[0m                 self.data_model_field_type(
                    [32m[2mModified var:.. [22mdata_type = REPR FAILED[0m
                    [32m[2mModified var:.. [22mdata_types = REPR FAILED[0m
                    [2m19:41:41.650932 line      1311[0m             fields=[
                    [2m19:41:41.653503 line      1326[0m             custom_base_class=obj.custom_base_path or self.base_class,
                    [2m19:41:41.656067 line      1327[0m             custom_template_dir=self.custom_template_dir,
                    [2m19:41:41.658535 line      1328[0m             extra_template_data=self.extra_template_data,
                    [2m19:41:41.660785 line      1329[0m             path=self.current_source_path,
                    [2m19:41:41.663072 line      1330[0m             nullable=obj.type_has_null,
                    [2m19:41:41.665357 line      1331[0m             treat_dot_as_module=self.treat_dot_as_module,
                    [2m19:41:41.668202 line      1332[0m             default=obj.default if obj.has_default else UNDEFINED,
                    [2m19:41:41.670536 line      1309[0m         data_model_root_type = self.data_model_root_type(
                    [32m[2mModified var:.. [22mreference = Reference(path='aaaschema.json#/$defs/AllowedAni...RootModel object at 0x7f80009e1a90>, children=[])[0m
                    [32m[2mNew var:....... [22mdata_model_root_type = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
                    [2m19:41:41.673022 line      1334[0m         self.results.append(data_model_root_type)
                    [2m19:41:41.675350 line      1335[0m         return self.data_type(reference=reference)
                    [32m[2mModified var:.. [22mreference = Reference(path='aaaschema.json#/$defs/AllowedAni...alse, dict_key=None, treat_dot_as_module=False)])[0m
                    [2m19:41:41.677662 return    1335[0m         return self.data_type(reference=reference)
                    [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                    [33m[2mElapsed time: [22m00:00:00.045837[0m
                [32m[2mNew var:....... [22mdata_type = ContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                [2m19:41:41.680000 line      1597[0m             if isinstance(data_type, EmptyDataType) and obj.properties:
                [2m19:41:41.680089 line      1609[0m         self.parse_ref(obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals'][0m
                    [2m19:41:41.680162 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.680230 line      1522[0m         if obj.ref:
                    [2m19:41:41.680271 line      1524[0m         if obj.items:
                    [2m19:41:41.680313 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.680354 line      1532[0m         if obj.patternProperties:
                    [2m19:41:41.680392 line      1535[0m         for item in obj.anyOf:
                    [2m19:41:41.680430 line      1537[0m         for item in obj.allOf:
                    [2m19:41:41.680467 line      1539[0m         for item in obj.oneOf:
                    [32m[2mNew var:....... [22mitem = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [2m19:41:41.680504 line      1540[0m             self.parse_ref(item, path)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals'][0m
                        [2m19:41:41.680563 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                        [2m19:41:41.680603 line      1522[0m         if obj.ref:
                        [2m19:41:41.680625 line      1523[0m             self.resolve_ref(obj.ref)
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobject_ref = '#/$defs/dog'[0m
                            [2m19:41:41.680653 call      1482[0m     def resolve_ref(self, object_ref: str) -> Reference:
                            [2m19:41:41.680677 line      1483[0m         reference = self.model_resolver.add_ref(object_ref)
                            [32m[2mNew var:....... [22mreference = REPR FAILED[0m
                            [2m19:41:41.680766 line      1484[0m         if reference.loaded:
                            [2m19:41:41.681908 line      1488[0m         ref = self.model_resolver.resolve_ref(object_ref)
                            [32m[2mNew var:....... [22mref = 'aaaschema.json#/$defs/dog'[0m
                            [2m19:41:41.683595 line      1489[0m         if get_ref_type(object_ref) == JSONReference.LOCAL:
                            [2m19:41:41.684898 line      1491[0m             self.reserved_refs[tuple(self.model_resolver.current_root)].add(ref)
                            [2m19:41:41.686064 line      1492[0m             return reference
                            [2m19:41:41.687226 return    1492[0m             return reference
                            [36m[2mReturn value:.. [22mREPR FAILED[0m
                            [33m[2mElapsed time: [22m00:00:00.009136[0m
                        [2m19:41:41.689822 line      1524[0m         if obj.items:
                        [2m19:41:41.689878 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                        [2m19:41:41.689919 line      1532[0m         if obj.patternProperties:
                        [2m19:41:41.689945 line      1535[0m         for item in obj.anyOf:
                        [2m19:41:41.689968 line      1537[0m         for item in obj.allOf:
                        [2m19:41:41.689992 line      1539[0m         for item in obj.oneOf:
                        [2m19:41:41.690016 line      1541[0m         if obj.properties:
                        [2m19:41:41.690050 return    1541[0m         if obj.properties:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.009529[0m
                    [2m19:41:41.690103 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.690167 line      1540[0m             self.parse_ref(item, path)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'AllowedAnimals'][0m
                        [2m19:41:41.690233 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                        [2m19:41:41.690279 line      1522[0m         if obj.ref:
                        [2m19:41:41.690307 line      1523[0m             self.resolve_ref(obj.ref)
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobject_ref = '#/$defs/cat'[0m
                            [2m19:41:41.690335 call      1482[0m     def resolve_ref(self, object_ref: str) -> Reference:
                            [2m19:41:41.690360 line      1483[0m         reference = self.model_resolver.add_ref(object_ref)
                            [32m[2mNew var:....... [22mreference = REPR FAILED[0m
                            [2m19:41:41.690449 line      1484[0m         if reference.loaded:
                            [2m19:41:41.691607 line      1488[0m         ref = self.model_resolver.resolve_ref(object_ref)
                            [32m[2mNew var:....... [22mref = 'aaaschema.json#/$defs/cat'[0m
                            [2m19:41:41.692789 line      1489[0m         if get_ref_type(object_ref) == JSONReference.LOCAL:
                            [2m19:41:41.693949 line      1491[0m             self.reserved_refs[tuple(self.model_resolver.current_root)].add(ref)
                            [2m19:41:41.695091 line      1492[0m             return reference
                            [2m19:41:41.696230 return    1492[0m             return reference
                            [36m[2mReturn value:.. [22mREPR FAILED[0m
                            [33m[2mElapsed time: [22m00:00:00.008219[0m
                        [2m19:41:41.698565 line      1524[0m         if obj.items:
                        [2m19:41:41.698616 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                        [2m19:41:41.698650 line      1532[0m         if obj.patternProperties:
                        [2m19:41:41.698677 line      1535[0m         for item in obj.anyOf:
                        [2m19:41:41.698702 line      1537[0m         for item in obj.allOf:
                        [2m19:41:41.698727 line      1539[0m         for item in obj.oneOf:
                        [2m19:41:41.698755 line      1541[0m         if obj.properties:
                        [2m19:41:41.698779 return    1541[0m         if obj.properties:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.008592[0m
                    [2m19:41:41.698835 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.698938 line      1541[0m         if obj.properties:
                    [2m19:41:41.699043 return    1541[0m         if obj.properties:
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.018979[0m
                [2m19:41:41.699159 return    1609[0m         self.parse_ref(obj, path)
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.065433[0m
            [2m19:41:41.699325 return    1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.065697[0m
        [32m[2mModified var:.. [22mreference = Reference(path='aaaschema.json#/$defs/AllowedAni...alse, dict_key=None, treat_dot_as_module=False)])[0m
        [2m19:41:41.699394 line      1727[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'cat'[0m
        [32m[2mModified var:.. [22mmodel = {'properties': {'name': {'type': 'string'}}, 'type': 'object'}[0m
        [2m19:41:41.699573 line      1728[0m                     path = [*path_parts, _schema_path, key]
        [32m[2mModified var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat'][0m
        [2m19:41:41.699704 line      1729[0m                     reference = self.model_resolver.get(path)
        [32m[2mModified var:.. [22mreference = REPR FAILED[0m
        [2m19:41:41.700076 line      1730[0m                     if not reference or not reference.loaded:
        [2m19:41:41.701500 line      1731[0m                         self.parse_raw_obj(key, model, path)
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'cat'[0m
            [32m[2mStarting var:.. [22mraw = {'properties': {'name': {'type': 'string'}}, 'type': 'object'}[0m
            [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat'][0m
            [2m19:41:41.702807 call      1577[0m     def parse_raw_obj(
            [2m19:41:41.702855 line      1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'cat'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat'][0m
                [2m19:41:41.702977 call      1585[0m     def parse_obj(
                [2m19:41:41.703041 line      1591[0m         if obj.is_array:
                [2m19:41:41.703082 line      1593[0m         elif obj.allOf:
                [2m19:41:41.703116 line      1595[0m         elif obj.oneOf or obj.anyOf:
                [2m19:41:41.703149 line      1599[0m         elif obj.properties:
                [2m19:41:41.703182 line      1600[0m             self.parse_object(name, obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'cat'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat'][0m
                    [32m[2mStarting var:.. [22msingular_name = False[0m
                    [32m[2mStarting var:.. [22munique = True[0m
                    [2m19:41:41.703224 call       970[0m     def parse_object(
                    [2m19:41:41.703294 line       978[0m         if not unique:  # pragma: no cover
                    [2m19:41:41.703331 line       985[0m         if self.use_title_as_name and obj.title:
                    [2m19:41:41.703366 line       987[0m         reference = self.model_resolver.add(
                    [2m19:41:41.703402 line       988[0m             path,
                    [2m19:41:41.703436 line       989[0m             name,
                    [2m19:41:41.703476 line       990[0m             class_name=True,
                    [2m19:41:41.703509 line       991[0m             singular_name=singular_name,
                    [2m19:41:41.703542 line       992[0m             loaded=True,
                    [2m19:41:41.703575 line       987[0m         reference = self.model_resolver.add(
                    [32m[2mNew var:....... [22mreference = REPR FAILED[0m
                    [2m19:41:41.703624 line       994[0m         class_name = reference.name
                    [32m[2mNew var:....... [22mclass_name = 'Cat'[0m
                    [2m19:41:41.704908 line       995[0m         self.set_title(class_name, obj)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'Cat'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.706235 call       660[0m     def set_title(self, name: str, obj: JsonSchemaObject) -> None:
                        [2m19:41:41.706301 line       661[0m         if obj.title:
                        [2m19:41:41.706338 return     661[0m         if obj.title:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000157[0m
                    [2m19:41:41.706406 line       996[0m         fields = self.parse_object_fields(
                    [2m19:41:41.707678 line       997[0m             obj, path, get_module_name(class_name, None, treat_dot_as_module=self.treat_dot_as_module)
                    [2m19:41:41.708851 line       996[0m         fields = self.parse_object_fields(
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat'][0m
                        [32m[2mStarting var:.. [22mmodule_name = ''[0m
                        [2m19:41:41.710039 call       914[0m     def parse_object_fields(
                        [2m19:41:41.710101 line       920[0m         properties: dict[str, JsonSchemaObject | bool] = {} if obj.properties is None else obj.properties
                        [32m[2mNew var:....... [22mproperties = {'name': JsonSchemaObject(items=None, uniqueItem...m_base_path=None, extras={}, discriminator=None)}[0m
                        [2m19:41:41.710136 line       921[0m         requires: set[str] = {*()} if obj.required is None else {*obj.required}
                        [32m[2mNew var:....... [22mrequires = set()[0m
                        [2m19:41:41.710185 line       922[0m         fields: list[DataModelFieldBase] = []
                        [32m[2mNew var:....... [22mfields = [][0m
                        [2m19:41:41.710234 line       924[0m         exclude_field_names: set[str] = set()
                        [32m[2mNew var:....... [22mexclude_field_names = set()[0m
                        [2m19:41:41.710282 line       925[0m         for original_field_name, field in properties.items():
                        [32m[2mNew var:....... [22moriginal_field_name = 'name'[0m
                        [32m[2mNew var:....... [22mfield = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.710332 line       926[0m             field_name, alias = self.model_resolver.get_valid_field_name_and_alias(
                        [2m19:41:41.710396 line       927[0m                 original_field_name, excludes=exclude_field_names
                        [2m19:41:41.710461 line       926[0m             field_name, alias = self.model_resolver.get_valid_field_name_and_alias(
                        [32m[2mNew var:....... [22mfield_name = 'name'[0m
                        [32m[2mNew var:....... [22malias = None[0m
                        [2m19:41:41.710552 line       929[0m             modular_name = f"{module_name}.{field_name}" if module_name else field_name
                        [32m[2mNew var:....... [22mmodular_name = 'name'[0m
                        [2m19:41:41.710623 line       931[0m             exclude_field_names.add(field_name)
                        [32m[2mModified var:.. [22mexclude_field_names = {'name'}[0m
                        [2m19:41:41.710687 line       933[0m             if isinstance(field, bool):
                        [2m19:41:41.710751 line       950[0m             field_type = self.parse_item(modular_name, field, [*path, field_name])
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mname = 'name'[0m
                            [32m[2mStarting var:.. [22mitem = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat', 'name'][0m
                            [32m[2mStarting var:.. [22msingular_name = False[0m
                            [32m[2mStarting var:.. [22mparent = None[0m
                            [2m19:41:41.710823 call      1068[0m     def parse_item(  # noqa: PLR0911, PLR0912
                            [2m19:41:41.710883 line      1076[0m         if self.use_title_as_name and item.title:
                            [2m19:41:41.710909 line      1079[0m         if parent and not item.enum and item.has_constraint and (parent.has_constraint or self.field_constraints):
                            [2m19:41:41.710934 line      1091[0m         if item.ref:
                            [2m19:41:41.710959 line      1093[0m         if item.custom_type_path:
                            [2m19:41:41.710984 line      1095[0m         if item.is_array:
                            [2m19:41:41.711014 line      1097[0m         if item.discriminator and parent and parent.is_array and (item.oneOf or item.anyOf):
                            [2m19:41:41.711041 line      1099[0m         if item.anyOf:
                            [2m19:41:41.711067 line      1101[0m         if item.oneOf:
                            [2m19:41:41.711092 line      1103[0m         if item.allOf:
                            [2m19:41:41.711117 line      1112[0m         if item.is_object or item.patternProperties:
                            [2m19:41:41.711153 line      1127[0m         if item.enum:
                            [2m19:41:41.711180 line      1131[0m         return self.get_data_type(item)
[33m[2m                                Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [2m19:41:41.711222 call       631[0m     def get_data_type(self, obj: JsonSchemaObject) -> DataType:
                                [2m19:41:41.711269 line       632[0m         if obj.type is None:
                                [2m19:41:41.711293 line       639[0m         def _get_data_type(type_: str, format__: str) -> DataType:
                                [32m[2mNew var:....... [22m_get_data_type = <function JsonSchemaParser.get_data_type.<locals>._get_data_type at 0x7f8001970540>[0m
                                [2m19:41:41.711315 line       645[0m         if isinstance(obj.type, list):
                                [2m19:41:41.711346 line       650[0m         return _get_data_type(obj.type, obj.format or "default")
                                [2m19:41:41.711456 return     650[0m         return _get_data_type(obj.type, obj.format or "default")
                                [36m[2mReturn value:.. [22mContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                                [33m[2mElapsed time: [22m00:00:00.000298[0m
                            [2m19:41:41.711524 return    1131[0m         return self.get_data_type(item)
                            [36m[2mReturn value:.. [22mContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                            [33m[2mElapsed time: [22m00:00:00.000753[0m
                        [32m[2mNew var:....... [22mfield_type = ContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                        [2m19:41:41.711581 line       952[0m             if self.force_optional_for_required_fields or (
                        [2m19:41:41.711660 line       953[0m                 self.apply_default_values_for_required_fields and field.has_default
                        [2m19:41:41.711728 line       957[0m                 required = original_field_name in requires
                        [32m[2mNew var:....... [22mrequired = False[0m
                        [2m19:41:41.711793 line       958[0m             fields.append(
                        [2m19:41:41.711866 line       959[0m                 self.get_object_field(
                        [2m19:41:41.711936 line       960[0m                     field_name=field_name,
                        [2m19:41:41.712002 line       961[0m                     field=field,
                        [2m19:41:41.712067 line       962[0m                     required=required,
                        [2m19:41:41.712131 line       963[0m                     field_type=field_type,
                        [2m19:41:41.712196 line       964[0m                     alias=alias,
                        [2m19:41:41.712259 line       965[0m                     original_field_name=original_field_name,
                        [2m19:41:41.712323 line       959[0m                 self.get_object_field(
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mfield_name = 'name'[0m
                            [32m[2mStarting var:.. [22mfield = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [32m[2mStarting var:.. [22mrequired = False[0m
                            [32m[2mStarting var:.. [22mfield_type = ContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                            [32m[2mStarting var:.. [22malias = None[0m
                            [32m[2mStarting var:.. [22moriginal_field_name = 'name'[0m
                            [2m19:41:41.712395 call       603[0m     def get_object_field(  # noqa: PLR0913
                            [2m19:41:41.712466 line       613[0m         return self.data_model_field_type(
                            [2m19:41:41.712500 line       614[0m             name=field_name,
                            [2m19:41:41.712532 line       615[0m             default=field.default,
                            [2m19:41:41.712563 line       616[0m             data_type=field_type,
                            [2m19:41:41.712593 line       617[0m             required=required,
                            [2m19:41:41.712624 line       618[0m             alias=alias,
                            [2m19:41:41.712655 line       619[0m             constraints=field.dict() if self.is_constraints_field(field) else None,
                                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [2m19:41:41.712691 call       598[0m     def is_constraints_field(self, obj: JsonSchemaObject) -> bool:
                                [2m19:41:41.712724 line       599[0m         return obj.is_array or (
                                [2m19:41:41.712746 line       600[0m             self.field_constraints and not (obj.ref or obj.anyOf or obj.oneOf or obj.allOf or obj.is_object or obj.enum)
                                [2m19:41:41.712768 line       599[0m         return obj.is_array or (
                                [2m19:41:41.712788 return     599[0m         return obj.is_array or (
                                [36m[2mReturn value:.. [22mFalse[0m
                                [33m[2mElapsed time: [22m00:00:00.000132[0m
                            [2m19:41:41.712832 line       620[0m             nullable=field.nullable if self.strict_nullable and (field.has_default or required) else None,
                            [2m19:41:41.712865 line       621[0m             strip_default_none=self.strip_default_none,
                            [2m19:41:41.712896 line       622[0m             extras=self.get_field_extras(field),
                                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [2m19:41:41.712933 call       565[0m     def get_field_extras(self, obj: JsonSchemaObject) -> dict[str, Any]:
                                [2m19:41:41.712967 line       566[0m         if self.field_include_all_keys:
                                [2m19:41:41.712989 line       574[0m                 for k, v in obj.extras.items()
                                [2m19:41:41.713009 line       572[0m             extras = {
                                [2m19:41:41.713030 line       574[0m                 for k, v in obj.extras.items()
                                [2m19:41:41.713050 line       572[0m             extras = {
                                [32m[2mNew var:....... [22mextras = {}[0m
                                [2m19:41:41.713070 line       577[0m         if self.default_field_extras:
                                [2m19:41:41.713097 line       579[0m         return extras
                                [2m19:41:41.713119 return     579[0m         return extras
                                [36m[2mReturn value:.. [22m{}[0m
                                [33m[2mElapsed time: [22m00:00:00.000219[0m
                            [2m19:41:41.713160 line       623[0m             use_annotated=self.use_annotated,
                            [2m19:41:41.713192 line       624[0m             use_field_description=self.use_field_description,
                            [2m19:41:41.713223 line       625[0m             use_default_kwarg=self.use_default_kwarg,
                            [2m19:41:41.713253 line       626[0m             original_name=original_field_name,
                            [2m19:41:41.713283 line       627[0m             has_default=field.has_default,
                            [2m19:41:41.713327 line       628[0m             type_has_null=field.type_has_null,
                            [2m19:41:41.713363 line       613[0m         return self.data_model_field_type(
                            [2m19:41:41.713436 return     613[0m         return self.data_model_field_type(
                            [36m[2mReturn value:.. [22mDataModelField(name='name', default=None, requir...ne_literal_as_default=False, type_has_null=False)[0m
                            [33m[2mElapsed time: [22m00:00:00.001107[0m
                        [2m19:41:41.713510 line       958[0m             fields.append(
                        [32m[2mModified var:.. [22mfields = [DataModelField(name='name', default=None, requi...e_literal_as_default=False, type_has_null=False)][0m
                        [2m19:41:41.713580 line       925[0m         for original_field_name, field in properties.items():
                        [2m19:41:41.713665 line       968[0m         return fields
                        [2m19:41:41.713745 return     968[0m         return fields
                        [36m[2mReturn value:.. [22m[DataModelField(name='name', default=None, requi...e_literal_as_default=False, type_has_null=False)][0m
                        [33m[2mElapsed time: [22m00:00:00.003817[0m
                    [32m[2mNew var:....... [22mfields = [DataModelField(name='name', default=None, requi...e_literal_as_default=False, type_has_null=False)][0m
                    [2m19:41:41.713861 line       999[0m         if fields or not isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.715100 line      1000[0m             data_model_type_class = self.data_model_type
                    [32m[2mNew var:....... [22mdata_model_type_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                    [2m19:41:41.716932 line      1024[0m         self.set_additional_properties(class_name, obj)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'Cat'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.718273 call       656[0m     def set_additional_properties(self, name: str, obj: JsonSchemaObject) -> None:
                        [2m19:41:41.718337 line       657[0m         if isinstance(obj.additionalProperties, bool):
                        [2m19:41:41.718373 return     657[0m         if isinstance(obj.additionalProperties, bool):
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000151[0m
                    [2m19:41:41.718436 line      1026[0m         data_model_type = self._create_data_model(
                    [2m19:41:41.719631 line      1027[0m             model_type=data_model_type_class,
                    [2m19:41:41.720862 line      1028[0m             reference=reference,
                    [2m19:41:41.722171 line      1029[0m             fields=fields,
                    [2m19:41:41.723463 line      1030[0m             custom_base_class=obj.custom_base_path or self.base_class,
                    [2m19:41:41.724617 line      1031[0m             custom_template_dir=self.custom_template_dir,
                    [2m19:41:41.725801 line      1032[0m             extra_template_data=self.extra_template_data,
                    [2m19:41:41.726990 line      1033[0m             path=self.current_source_path,
                    [2m19:41:41.728171 line      1034[0m             description=obj.description if self.use_schema_description else None,
                    [2m19:41:41.729355 line      1035[0m             nullable=obj.type_has_null,
                    [2m19:41:41.730542 line      1036[0m             keyword_only=self.keyword_only,
                    [2m19:41:41.731777 line      1037[0m             treat_dot_as_module=self.treat_dot_as_module,
                    [2m19:41:41.733502 line      1026[0m         data_model_type = self._create_data_model(
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mmodel_type = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                        [32m[2mStarting var:.. [22mkwargs = REPR FAILED[0m
                        [2m19:41:41.734853 call       731[0m     def _create_data_model(self, model_type: type[DataModel] | None = None, **kwargs: Any) -> DataModel:
                        [2m19:41:41.736029 line       733[0m         data_model_class = model_type or self.data_model_type
                        [32m[2mNew var:....... [22mdata_model_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                        [2m19:41:41.737240 line       734[0m         if issubclass(data_model_class, DataClass):
                        [2m19:41:41.738422 line       736[0m         return data_model_class(**kwargs)
                        [2m19:41:41.739734 return     736[0m         return data_model_class(**kwargs)
                        [36m[2mReturn value:.. [22m<datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
                        [33m[2mElapsed time: [22m00:00:00.006151[0m
                    [32m[2mNew var:....... [22mdata_model_type = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
                    [2m19:41:41.741007 line      1039[0m         self.results.append(data_model_type)
                    [2m19:41:41.742241 line      1040[0m         return self.data_type(reference=reference)
                    [2m19:41:41.743550 return    1040[0m         return self.data_type(reference=reference)
                    [36m[2mReturn value:.. [22mREPR FAILED[0m
                    [33m[2mElapsed time: [22m00:00:00.042770[0m
                [2m19:41:41.746010 line      1609[0m         self.parse_ref(obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat'][0m
                    [2m19:41:41.746071 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.746126 line      1522[0m         if obj.ref:
                    [2m19:41:41.746160 line      1524[0m         if obj.items:
                    [2m19:41:41.746192 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.746227 line      1532[0m         if obj.patternProperties:
                    [2m19:41:41.746259 line      1535[0m         for item in obj.anyOf:
                    [2m19:41:41.746292 line      1537[0m         for item in obj.allOf:
                    [2m19:41:41.746325 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.746357 line      1541[0m         if obj.properties:
                    [2m19:41:41.746388 line      1542[0m             for property_value in obj.properties.values():
                    [32m[2mNew var:....... [22mproperty_value = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [2m19:41:41.746420 line      1543[0m                 if isinstance(property_value, JsonSchemaObject):
                    [2m19:41:41.746468 line      1544[0m                     self.parse_ref(property_value, path)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'cat'][0m
                        [2m19:41:41.746517 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                        [2m19:41:41.746563 line      1522[0m         if obj.ref:
                        [2m19:41:41.746587 line      1524[0m         if obj.items:
                        [2m19:41:41.746612 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                        [2m19:41:41.746635 line      1532[0m         if obj.patternProperties:
                        [2m19:41:41.746671 line      1535[0m         for item in obj.anyOf:
                        [2m19:41:41.746692 line      1537[0m         for item in obj.allOf:
                        [2m19:41:41.746715 line      1539[0m         for item in obj.oneOf:
                        [2m19:41:41.746736 line      1541[0m         if obj.properties:
                        [2m19:41:41.746758 return    1541[0m         if obj.properties:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000277[0m
                    [2m19:41:41.746818 line      1542[0m             for property_value in obj.properties.values():
                    [2m19:41:41.746862 return    1542[0m             for property_value in obj.properties.values():
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000846[0m
                [2m19:41:41.746922 return    1609[0m         self.parse_ref(obj, path)
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.043993[0m
            [2m19:41:41.746977 return    1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.044203[0m
        [2m19:41:41.747019 line      1727[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'dog'[0m
        [2m19:41:41.748288 line      1728[0m                     path = [*path_parts, _schema_path, key]
        [32m[2mModified var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog'][0m
        [2m19:41:41.750110 line      1729[0m                     reference = self.model_resolver.get(path)
        [2m19:41:41.751598 line      1730[0m                     if not reference or not reference.loaded:
        [2m19:41:41.752842 line      1731[0m                         self.parse_raw_obj(key, model, path)
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'dog'[0m
            [32m[2mStarting var:.. [22mraw = {'properties': {'name': {'type': 'string'}}, 'type': 'object'}[0m
            [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog'][0m
            [2m19:41:41.754070 call      1577[0m     def parse_raw_obj(
            [2m19:41:41.754112 line      1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'dog'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog'][0m
                [2m19:41:41.754231 call      1585[0m     def parse_obj(
                [2m19:41:41.754300 line      1591[0m         if obj.is_array:
                [2m19:41:41.754348 line      1593[0m         elif obj.allOf:
                [2m19:41:41.754383 line      1595[0m         elif obj.oneOf or obj.anyOf:
                [2m19:41:41.754416 line      1599[0m         elif obj.properties:
                [2m19:41:41.754448 line      1600[0m             self.parse_object(name, obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'dog'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog'][0m
                    [32m[2mStarting var:.. [22msingular_name = False[0m
                    [32m[2mStarting var:.. [22munique = True[0m
                    [2m19:41:41.754488 call       970[0m     def parse_object(
                    [2m19:41:41.754557 line       978[0m         if not unique:  # pragma: no cover
                    [2m19:41:41.754593 line       985[0m         if self.use_title_as_name and obj.title:
                    [2m19:41:41.754629 line       987[0m         reference = self.model_resolver.add(
                    [2m19:41:41.754662 line       988[0m             path,
                    [2m19:41:41.754697 line       989[0m             name,
                    [2m19:41:41.754730 line       990[0m             class_name=True,
                    [2m19:41:41.754763 line       991[0m             singular_name=singular_name,
                    [2m19:41:41.754796 line       992[0m             loaded=True,
                    [2m19:41:41.754832 line       987[0m         reference = self.model_resolver.add(
                    [32m[2mNew var:....... [22mreference = REPR FAILED[0m
                    [2m19:41:41.754879 line       994[0m         class_name = reference.name
                    [32m[2mNew var:....... [22mclass_name = 'Dog'[0m
                    [2m19:41:41.756034 line       995[0m         self.set_title(class_name, obj)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'Dog'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.757243 call       660[0m     def set_title(self, name: str, obj: JsonSchemaObject) -> None:
                        [2m19:41:41.757301 line       661[0m         if obj.title:
                        [2m19:41:41.757335 return     661[0m         if obj.title:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000141[0m
                    [2m19:41:41.757396 line       996[0m         fields = self.parse_object_fields(
                    [2m19:41:41.758551 line       997[0m             obj, path, get_module_name(class_name, None, treat_dot_as_module=self.treat_dot_as_module)
                    [2m19:41:41.759677 line       996[0m         fields = self.parse_object_fields(
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog'][0m
                        [32m[2mStarting var:.. [22mmodule_name = ''[0m
                        [2m19:41:41.760834 call       914[0m     def parse_object_fields(
                        [2m19:41:41.760890 line       920[0m         properties: dict[str, JsonSchemaObject | bool] = {} if obj.properties is None else obj.properties
                        [32m[2mNew var:....... [22mproperties = {'name': JsonSchemaObject(items=None, uniqueItem...m_base_path=None, extras={}, discriminator=None)}[0m
                        [2m19:41:41.760929 line       921[0m         requires: set[str] = {*()} if obj.required is None else {*obj.required}
                        [32m[2mNew var:....... [22mrequires = set()[0m
                        [2m19:41:41.760977 line       922[0m         fields: list[DataModelFieldBase] = []
                        [32m[2mNew var:....... [22mfields = [][0m
                        [2m19:41:41.761025 line       924[0m         exclude_field_names: set[str] = set()
                        [32m[2mNew var:....... [22mexclude_field_names = set()[0m
                        [2m19:41:41.761075 line       925[0m         for original_field_name, field in properties.items():
                        [32m[2mNew var:....... [22moriginal_field_name = 'name'[0m
                        [32m[2mNew var:....... [22mfield = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.761127 line       926[0m             field_name, alias = self.model_resolver.get_valid_field_name_and_alias(
                        [2m19:41:41.761191 line       927[0m                 original_field_name, excludes=exclude_field_names
                        [2m19:41:41.761244 line       926[0m             field_name, alias = self.model_resolver.get_valid_field_name_and_alias(
                        [32m[2mNew var:....... [22mfield_name = 'name'[0m
                        [32m[2mNew var:....... [22malias = None[0m
                        [2m19:41:41.761331 line       929[0m             modular_name = f"{module_name}.{field_name}" if module_name else field_name
                        [32m[2mNew var:....... [22mmodular_name = 'name'[0m
                        [2m19:41:41.761400 line       931[0m             exclude_field_names.add(field_name)
                        [32m[2mModified var:.. [22mexclude_field_names = {'name'}[0m
                        [2m19:41:41.761463 line       933[0m             if isinstance(field, bool):
                        [2m19:41:41.761526 line       950[0m             field_type = self.parse_item(modular_name, field, [*path, field_name])
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mname = 'name'[0m
                            [32m[2mStarting var:.. [22mitem = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog', 'name'][0m
                            [32m[2mStarting var:.. [22msingular_name = False[0m
                            [32m[2mStarting var:.. [22mparent = None[0m
                            [2m19:41:41.761592 call      1068[0m     def parse_item(  # noqa: PLR0911, PLR0912
                            [2m19:41:41.761650 line      1076[0m         if self.use_title_as_name and item.title:
                            [2m19:41:41.761677 line      1079[0m         if parent and not item.enum and item.has_constraint and (parent.has_constraint or self.field_constraints):
                            [2m19:41:41.761703 line      1091[0m         if item.ref:
                            [2m19:41:41.761728 line      1093[0m         if item.custom_type_path:
                            [2m19:41:41.761755 line      1095[0m         if item.is_array:
                            [2m19:41:41.761785 line      1097[0m         if item.discriminator and parent and parent.is_array and (item.oneOf or item.anyOf):
                            [2m19:41:41.761825 line      1099[0m         if item.anyOf:
                            [2m19:41:41.761858 line      1101[0m         if item.oneOf:
                            [2m19:41:41.761883 line      1103[0m         if item.allOf:
                            [2m19:41:41.761908 line      1112[0m         if item.is_object or item.patternProperties:
                            [2m19:41:41.761940 line      1127[0m         if item.enum:
                            [2m19:41:41.761966 line      1131[0m         return self.get_data_type(item)
                                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [2m19:41:41.761998 call       631[0m     def get_data_type(self, obj: JsonSchemaObject) -> DataType:
                                [2m19:41:41.762033 line       632[0m         if obj.type is None:
                                [2m19:41:41.762055 line       639[0m         def _get_data_type(type_: str, format__: str) -> DataType:
                                [32m[2mNew var:....... [22m_get_data_type = <function JsonSchemaParser.get_data_type.<locals>._get_data_type at 0x7f8001970360>[0m
                                [2m19:41:41.762077 line       645[0m         if isinstance(obj.type, list):
                                [2m19:41:41.762104 line       650[0m         return _get_data_type(obj.type, obj.format or "default")
                                [2m19:41:41.762189 return     650[0m         return _get_data_type(obj.type, obj.format or "default")
                                [36m[2mReturn value:.. [22mContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                                [33m[2mElapsed time: [22m00:00:00.000245[0m
                            [2m19:41:41.762255 return    1131[0m         return self.get_data_type(item)
                            [36m[2mReturn value:.. [22mContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                            [33m[2mElapsed time: [22m00:00:00.000714[0m
                        [32m[2mNew var:....... [22mfield_type = ContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                        [2m19:41:41.762312 line       952[0m             if self.force_optional_for_required_fields or (
                        [2m19:41:41.762384 line       953[0m                 self.apply_default_values_for_required_fields and field.has_default
                        [2m19:41:41.762447 line       957[0m                 required = original_field_name in requires
                        [32m[2mNew var:....... [22mrequired = False[0m
                        [2m19:41:41.762509 line       958[0m             fields.append(
                        [2m19:41:41.762578 line       959[0m                 self.get_object_field(
                        [2m19:41:41.762642 line       960[0m                     field_name=field_name,
                        [2m19:41:41.762704 line       961[0m                     field=field,
                        [2m19:41:41.762767 line       962[0m                     required=required,
                        [2m19:41:41.762831 line       963[0m                     field_type=field_type,
                        [2m19:41:41.762892 line       964[0m                     alias=alias,
                        [2m19:41:41.762954 line       965[0m                     original_field_name=original_field_name,
                        [2m19:41:41.763016 line       959[0m                 self.get_object_field(
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mfield_name = 'name'[0m
                            [32m[2mStarting var:.. [22mfield = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [32m[2mStarting var:.. [22mrequired = False[0m
                            [32m[2mStarting var:.. [22mfield_type = ContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                            [32m[2mStarting var:.. [22malias = None[0m
                            [32m[2mStarting var:.. [22moriginal_field_name = 'name'[0m
                            [2m19:41:41.763088 call       603[0m     def get_object_field(  # noqa: PLR0913
                            [2m19:41:41.763157 line       613[0m         return self.data_model_field_type(
                            [2m19:41:41.763190 line       614[0m             name=field_name,
                            [2m19:41:41.763220 line       615[0m             default=field.default,
                            [2m19:41:41.763250 line       616[0m             data_type=field_type,
                            [2m19:41:41.763280 line       617[0m             required=required,
                            [2m19:41:41.763313 line       618[0m             alias=alias,
                            [2m19:41:41.763342 line       619[0m             constraints=field.dict() if self.is_constraints_field(field) else None,
                                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [2m19:41:41.763377 call       598[0m     def is_constraints_field(self, obj: JsonSchemaObject) -> bool:
                                [2m19:41:41.763410 line       599[0m         return obj.is_array or (
                                [2m19:41:41.763431 line       600[0m             self.field_constraints and not (obj.ref or obj.anyOf or obj.oneOf or obj.allOf or obj.is_object or obj.enum)
                                [2m19:41:41.763453 line       599[0m         return obj.is_array or (
                                [2m19:41:41.763473 return     599[0m         return obj.is_array or (
                                [36m[2mReturn value:.. [22mFalse[0m
                                [33m[2mElapsed time: [22m00:00:00.000128[0m
                            [2m19:41:41.763513 line       620[0m             nullable=field.nullable if self.strict_nullable and (field.has_default or required) else None,
                            [2m19:41:41.763546 line       621[0m             strip_default_none=self.strip_default_none,
                            [2m19:41:41.763575 line       622[0m             extras=self.get_field_extras(field),
                                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                                [2m19:41:41.763612 call       565[0m     def get_field_extras(self, obj: JsonSchemaObject) -> dict[str, Any]:
                                [2m19:41:41.763645 line       566[0m         if self.field_include_all_keys:
                                [2m19:41:41.763666 line       574[0m                 for k, v in obj.extras.items()
                                [2m19:41:41.763686 line       572[0m             extras = {
                                [2m19:41:41.763706 line       574[0m                 for k, v in obj.extras.items()
                                [2m19:41:41.763725 line       572[0m             extras = {
                                [32m[2mNew var:....... [22mextras = {}[0m
                                [2m19:41:41.763746 line       577[0m         if self.default_field_extras:
                                [2m19:41:41.763772 line       579[0m         return extras
                                [2m19:41:41.763793 return     579[0m         return extras
                                [36m[2mReturn value:.. [22m{}[0m
                                [33m[2mElapsed time: [22m00:00:00.000226[0m
                            [2m19:41:41.763845 line       623[0m             use_annotated=self.use_annotated,
                            [2m19:41:41.763877 line       624[0m             use_field_description=self.use_field_description,
                            [2m19:41:41.763910 line       625[0m             use_default_kwarg=self.use_default_kwarg,
                            [2m19:41:41.763938 line       626[0m             original_name=original_field_name,
                            [2m19:41:41.763971 line       627[0m             has_default=field.has_default,
                            [2m19:41:41.764016 line       628[0m             type_has_null=field.type_has_null,
                            [2m19:41:41.764053 line       613[0m         return self.data_model_field_type(
                            [2m19:41:41.764123 return     613[0m         return self.data_model_field_type(
                            [36m[2mReturn value:.. [22mDataModelField(name='name', default=None, requir...ne_literal_as_default=False, type_has_null=False)[0m
                            [33m[2mElapsed time: [22m00:00:00.001104[0m
                        [2m19:41:41.764204 line       958[0m             fields.append(
                        [32m[2mModified var:.. [22mfields = [DataModelField(name='name', default=None, requi...e_literal_as_default=False, type_has_null=False)][0m
                        [2m19:41:41.764275 line       925[0m         for original_field_name, field in properties.items():
                        [2m19:41:41.764359 line       968[0m         return fields
                        [2m19:41:41.764438 return     968[0m         return fields
                        [36m[2mReturn value:.. [22m[DataModelField(name='name', default=None, requi...e_literal_as_default=False, type_has_null=False)][0m
                        [33m[2mElapsed time: [22m00:00:00.003710[0m
                    [32m[2mNew var:....... [22mfields = [DataModelField(name='name', default=None, requi...e_literal_as_default=False, type_has_null=False)][0m
                    [2m19:41:41.764550 line       999[0m         if fields or not isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.765798 line      1000[0m             data_model_type_class = self.data_model_type
                    [32m[2mNew var:....... [22mdata_model_type_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                    [2m19:41:41.766985 line      1024[0m         self.set_additional_properties(class_name, obj)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'Dog'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.768178 call       656[0m     def set_additional_properties(self, name: str, obj: JsonSchemaObject) -> None:
                        [2m19:41:41.768227 line       657[0m         if isinstance(obj.additionalProperties, bool):
                        [2m19:41:41.768262 return     657[0m         if isinstance(obj.additionalProperties, bool):
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000131[0m
                    [2m19:41:41.768322 line      1026[0m         data_model_type = self._create_data_model(
                    [2m19:41:41.769510 line      1027[0m             model_type=data_model_type_class,
                    [2m19:41:41.770654 line      1028[0m             reference=reference,
                    [2m19:41:41.771910 line      1029[0m             fields=fields,
                    [2m19:41:41.773093 line      1030[0m             custom_base_class=obj.custom_base_path or self.base_class,
                    [2m19:41:41.774257 line      1031[0m             custom_template_dir=self.custom_template_dir,
                    [2m19:41:41.775424 line      1032[0m             extra_template_data=self.extra_template_data,
                    [2m19:41:41.776585 line      1033[0m             path=self.current_source_path,
                    [2m19:41:41.777840 line      1034[0m             description=obj.description if self.use_schema_description else None,
                    [2m19:41:41.779018 line      1035[0m             nullable=obj.type_has_null,
                    [2m19:41:41.780191 line      1036[0m             keyword_only=self.keyword_only,
                    [2m19:41:41.781348 line      1037[0m             treat_dot_as_module=self.treat_dot_as_module,
                    [2m19:41:41.782490 line      1026[0m         data_model_type = self._create_data_model(
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mmodel_type = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                        [32m[2mStarting var:.. [22mkwargs = REPR FAILED[0m
                        [2m19:41:41.783649 call       731[0m     def _create_data_model(self, model_type: type[DataModel] | None = None, **kwargs: Any) -> DataModel:
                        [2m19:41:41.784794 line       733[0m         data_model_class = model_type or self.data_model_type
                        [32m[2mNew var:....... [22mdata_model_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                        [2m19:41:41.785913 line       734[0m         if issubclass(data_model_class, DataClass):
                        [2m19:41:41.787037 line       736[0m         return data_model_class(**kwargs)
                        [2m19:41:41.788258 return     736[0m         return data_model_class(**kwargs)
                        [36m[2mReturn value:.. [22m<datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
                        [33m[2mElapsed time: [22m00:00:00.005755[0m
                    [32m[2mNew var:....... [22mdata_model_type = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
                    [2m19:41:41.789413 line      1039[0m         self.results.append(data_model_type)
                    [2m19:41:41.790569 line      1040[0m         return self.data_type(reference=reference)
                    [2m19:41:41.791750 return    1040[0m         return self.data_type(reference=reference)
                    [36m[2mReturn value:.. [22mREPR FAILED[0m
                    [33m[2mElapsed time: [22m00:00:00.039527[0m
                [2m19:41:41.794025 line      1609[0m         self.parse_ref(obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog'][0m
                    [2m19:41:41.794079 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.794136 line      1522[0m         if obj.ref:
                    [2m19:41:41.794175 line      1524[0m         if obj.items:
                    [2m19:41:41.794206 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.794240 line      1532[0m         if obj.patternProperties:
                    [2m19:41:41.794271 line      1535[0m         for item in obj.anyOf:
                    [2m19:41:41.794303 line      1537[0m         for item in obj.allOf:
                    [2m19:41:41.794332 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.794363 line      1541[0m         if obj.properties:
                    [2m19:41:41.794393 line      1542[0m             for property_value in obj.properties.values():
                    [32m[2mNew var:....... [22mproperty_value = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [2m19:41:41.794433 line      1543[0m                 if isinstance(property_value, JsonSchemaObject):
                    [2m19:41:41.794480 line      1544[0m                     self.parse_ref(property_value, path)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['aaaschema.json', '#/$defs', 'dog'][0m
                        [2m19:41:41.794526 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                        [2m19:41:41.794565 line      1522[0m         if obj.ref:
                        [2m19:41:41.794589 line      1524[0m         if obj.items:
                        [2m19:41:41.794612 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                        [2m19:41:41.794635 line      1532[0m         if obj.patternProperties:
                        [2m19:41:41.794659 line      1535[0m         for item in obj.anyOf:
                        [2m19:41:41.794680 line      1537[0m         for item in obj.allOf:
                        [2m19:41:41.794701 line      1539[0m         for item in obj.oneOf:
                        [2m19:41:41.794722 line      1541[0m         if obj.properties:
                        [2m19:41:41.794743 return    1541[0m         if obj.properties:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000252[0m
                    [2m19:41:41.794787 line      1542[0m             for property_value in obj.properties.values():
                    [2m19:41:41.794834 return    1542[0m             for property_value in obj.properties.values():
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000810[0m
                [2m19:41:41.794894 return    1609[0m         self.parse_ref(obj, path)
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.040710[0m
            [2m19:41:41.794949 return    1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.040909[0m
        [2m19:41:41.794988 line      1727[0m                 for key, model in definitions.items():
        [2m19:41:41.796219 line      1733[0m                 key = tuple(path_parts)
        [32m[2mModified var:.. [22mkey = ('aaaschema.json',)[0m
        [2m19:41:41.797468 line      1734[0m                 reserved_refs = set(self.reserved_refs.get(key) or [])
        [32m[2mNew var:....... [22mreserved_refs = {'aaaschema.json#/$defs/dog', 'aaaschema.json#/$defs/AllowedAnimals', 'aaaschema.json#/$defs/cat'}[0m
        [2m19:41:41.798676 line      1735[0m                 while reserved_refs:
        [2m19:41:41.799881 line      1736[0m                     for reserved_path in sorted(reserved_refs):
        [32m[2mNew var:....... [22mreserved_path = 'aaaschema.json#/$defs/AllowedAnimals'[0m
        [2m19:41:41.801101 line      1737[0m                         reference = self.model_resolver.get(reserved_path)
        [32m[2mModified var:.. [22mreference = Reference(path='aaaschema.json#/$defs/AllowedAni...alse, dict_key=None, treat_dot_as_module=False)])[0m
        [2m19:41:41.802509 line      1738[0m                         if not reference or reference.loaded:
        [2m19:41:41.802629 line      1739[0m                             continue
        [2m19:41:41.802725 line      1736[0m                     for reserved_path in sorted(reserved_refs):
        [32m[2mModified var:.. [22mreserved_path = 'aaaschema.json#/$defs/cat'[0m
        [2m19:41:41.802821 line      1737[0m                         reference = self.model_resolver.get(reserved_path)
        [32m[2mModified var:.. [22mreference = REPR FAILED[0m
        [2m19:41:41.803021 line      1738[0m                         if not reference or reference.loaded:
        [2m19:41:41.804244 line      1739[0m                             continue
        [2m19:41:41.805461 line      1736[0m                     for reserved_path in sorted(reserved_refs):
        [32m[2mModified var:.. [22mreserved_path = 'aaaschema.json#/$defs/dog'[0m
        [2m19:41:41.806703 line      1737[0m                         reference = self.model_resolver.get(reserved_path)
        [2m19:41:41.808098 line      1738[0m                         if not reference or reference.loaded:
        [2m19:41:41.809349 line      1739[0m                             continue
        [2m19:41:41.810599 line      1736[0m                     for reserved_path in sorted(reserved_refs):
        [2m19:41:41.811817 line      1745[0m                     previous_reserved_refs = reserved_refs
        [32m[2mNew var:....... [22mprevious_reserved_refs = {'aaaschema.json#/$defs/dog', 'aaaschema.json#/$defs/AllowedAnimals', 'aaaschema.json#/$defs/cat'}[0m
        [2m19:41:41.813026 line      1746[0m                     reserved_refs = set(self.reserved_refs.get(key) or [])
        [2m19:41:41.814262 line      1747[0m                     if previous_reserved_refs == reserved_refs:
        [2m19:41:41.815495 line      1748[0m                         break
        [2m19:41:41.816730 line      1699[0m             with self.root_id_context(raw):
        [2m19:41:41.818026 line      1697[0m         with self.model_resolver.current_root_context(path_parts):
        [2m19:41:41.819280 return    1697[0m         with self.model_resolver.current_root_context(path_parts):
        [36m[2mReturn value:.. [22mNone[0m
        [33m[2mElapsed time: [22m00:00:00.276483[0m
    [2m19:41:41.820550 line      1632[0m         for source, path_parts in self._get_context_source_path_parts():
        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
        [32m[2mStarting var:.. [22msource = Source(path=PosixPath('aaaschema.json'), text='{...n  "title": "animals",\n  "type": "object"\n}\n')[0m
        [32m[2mStarting var:.. [22mpath_parts = ['aaaschema.json'][0m
        [2m19:41:41.820604 call      1629[0m                 yield source, path_parts
        [2m19:41:41.820646 line      1627[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:41.820674 line      1626[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:41.820698 line      1618[0m         for source in self.iter_source:
        [32m[2mModified var:.. [22msource = Source(path=PosixPath('bug.json'), text='{\n  "$...dAnimals" }\n    }\n  },\n  "title": "bug"\n}\n')[0m
        [2m19:41:41.820861 line      1619[0m             if isinstance(self.source, ParseResult):
        [2m19:41:41.820906 line      1622[0m                 path_parts = list(source.path.parts)
        [32m[2mModified var:.. [22mpath_parts = ['bug.json'][0m
        [2m19:41:41.820930 line      1623[0m             if self.current_source_path is not None:
        [2m19:41:41.820953 line      1624[0m                 self.current_source_path = source.path
        [2m19:41:41.820969 line      1626[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:41.821070 line      1627[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:41.821105 line      1629[0m                 yield source, path_parts
        [2m19:41:41.821123 return    1629[0m                 yield source, path_parts
        [36m[2mReturn value:.. [22m(Source(path=PosixPath('bug.json'), text='{\n  "...  }\n  },\n  "title": "bug"\n}\n'), ['bug.json'])[0m
        [33m[2mElapsed time: [22m00:00:00.000559[0m
    [32m[2mModified var:.. [22msource = Source(path=PosixPath('bug.json'), text='{\n  "$...dAnimals" }\n    }\n  },\n  "title": "bug"\n}\n')[0m
    [32m[2mModified var:.. [22mpath_parts = ['bug.json'][0m
    [2m19:41:41.821173 line      1633[0m             self.raw_obj = load_yaml(source.text)
    [2m19:41:41.821475 line      1634[0m             if self.raw_obj is None:  # pragma: no cover
    [2m19:41:41.821509 line      1637[0m             if self.custom_class_name_generator:
    [2m19:41:41.821531 line      1640[0m                 if self.class_name:
    [2m19:41:41.821554 line      1644[0m                     obj_name = self.raw_obj.get("title", "Model")
    [32m[2mModified var:.. [22mobj_name = 'bug'[0m
    [2m19:41:41.821571 line      1645[0m                     if not self.model_resolver.validate_name(obj_name):
    [2m19:41:41.821605 line      1647[0m                 if not self.model_resolver.validate_name(obj_name):
    [2m19:41:41.821625 line      1649[0m             self._parse_file(self.raw_obj, obj_name, path_parts)
        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
        [32m[2mStarting var:.. [22mraw = {'$defs': {'AllowedAnimals': {'additionalPropert...ef': '#/$defs/AllowedAnimals'}}}, 'title': 'bug'}[0m
        [32m[2mStarting var:.. [22mobj_name = 'bug'[0m
        [32m[2mStarting var:.. [22mpath_parts = ['bug.json'][0m
        [32m[2mStarting var:.. [22mobject_paths = None[0m
        [2m19:41:41.821655 call      1688[0m     def _parse_file(  # noqa: PLR0912
        [2m19:41:41.821708 line      1695[0m         object_paths = [o for o in object_paths or [] if o]
        [32m[2mModified var:.. [22mobject_paths = [][0m
        [2m19:41:41.821730 line      1696[0m         path = [*path_parts, f"#/{object_paths[0]}", *object_paths[1:]] if object_paths else path_parts
        [32m[2mNew var:....... [22mpath = ['bug.json'][0m
        [2m19:41:41.821754 line      1697[0m         with self.model_resolver.current_root_context(path_parts):
        [2m19:41:41.821790 line      1698[0m             obj_name = self.model_resolver.add(path, obj_name, unique=False, class_name=True).name
        [32m[2mModified var:.. [22mobj_name = 'Bug'[0m
        [2m19:41:41.821895 line      1699[0m             with self.root_id_context(raw):
            [32m[2mStarting var:.. [22margs = (<datamodel_code_generator.parser.jsonschema.Jso...f': '#/$defs/AllowedAnimals'}}}, 'title': 'bug'})[0m
            [32m[2mStarting var:.. [22mkwds = {}[0m
            [32m[2mStarting var:.. [22mfunc = <function JsonSchemaParser.root_id_context at 0x7f80009f6e80>[0m
            [2m19:41:41.821931 call       304[0m     def helper(*args, **kwds):
            [2m19:41:41.821972 line       305[0m         return _GeneratorContextManager(func, args, kwds)
            [2m19:41:41.821991 return     305[0m         return _GeneratorContextManager(func, args, kwds)
            [36m[2mReturn value:.. [22m<contextlib._GeneratorContextManager object at 0x7f8001977930>[0m
            [33m[2mElapsed time: [22m00:00:00.000093[0m
        [2m19:41:41.822047 line      1701[0m                 raw.pop("self", None)
        [2m19:41:41.822068 line      1703[0m                 root_obj = self.SCHEMA_OBJECT_TYPE.parse_obj(raw)
        [32m[2mNew var:....... [22mroot_obj = JsonSchemaObject(items=None, uniqueItems=None, t...-12/schema', 'title': 'bug'}, discriminator=None)[0m
        [2m19:41:41.822220 line      1704[0m                 self.parse_id(root_obj, path_parts)
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...-12/schema', 'title': 'bug'}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['bug.json'][0m
            [2m19:41:41.822299 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.822364 line      1547[0m         if obj.id:
            [2m19:41:41.822408 line      1548[0m             self.model_resolver.add_id(obj.id, path)
            [2m19:41:41.822612 line      1549[0m         if obj.items:
            [2m19:41:41.822666 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.822714 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.822757 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.822821 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.822864 line      1564[0m         if obj.properties:
            [2m19:41:41.822906 line      1565[0m             for property_value in obj.properties.values():
            [32m[2mNew var:....... [22mproperty_value = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [2m19:41:41.822949 line      1566[0m                 if isinstance(property_value, JsonSchemaObject):
            [2m19:41:41.823015 line      1567[0m                     self.parse_id(property_value, path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['bug.json'][0m
                [2m19:41:41.823084 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                [2m19:41:41.823133 line      1547[0m         if obj.id:
                [2m19:41:41.823167 line      1549[0m         if obj.items:
                [2m19:41:41.823199 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.823230 line      1556[0m             self.parse_id(obj.additionalProperties, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['bug.json'][0m
                    [2m19:41:41.823267 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.823306 line      1547[0m         if obj.id:
                    [2m19:41:41.823328 line      1549[0m         if obj.items:
                    [2m19:41:41.823351 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.823373 line      1557[0m         if obj.patternProperties:
                    [2m19:41:41.823401 line      1560[0m         for item in obj.anyOf:
                    [2m19:41:41.823423 line      1562[0m         for item in obj.allOf:
                    [2m19:41:41.823445 line      1564[0m         if obj.properties:
                    [2m19:41:41.823466 return    1564[0m         if obj.properties:
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000236[0m
                [2m19:41:41.823515 line      1557[0m         if obj.patternProperties:
                [2m19:41:41.823547 line      1560[0m         for item in obj.anyOf:
                [2m19:41:41.823578 line      1562[0m         for item in obj.allOf:
                [2m19:41:41.823609 line      1564[0m         if obj.properties:
                [2m19:41:41.823640 return    1564[0m         if obj.properties:
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.000601[0m
            [2m19:41:41.823691 line      1565[0m             for property_value in obj.properties.values():
            [2m19:41:41.823755 return    1565[0m             for property_value in obj.properties.values():
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.001539[0m
        [2m19:41:41.823848 line      1705[0m                 definitions: dict[Any, Any] | None = None
        [32m[2mNew var:....... [22mdefinitions = None[0m
        [2m19:41:41.823901 line      1706[0m                 _schema_path = ""
        [32m[2mNew var:....... [22m_schema_path = ''[0m
        [2m19:41:41.823957 line      1707[0m                 for _schema_path, split_schema_path in self.schema_paths:
        [32m[2mModified var:.. [22m_schema_path = '#/definitions'[0m
        [32m[2mNew var:....... [22msplit_schema_path = ['definitions'][0m
        [2m19:41:41.824014 line      1708[0m                     try:
        [2m19:41:41.824075 line      1709[0m                         definitions = get_model_by_path(raw, split_schema_path)
        [32m[2mModified var:.. [22mdefinitions = {}[0m
        [2m19:41:41.824134 line      1710[0m                         if definitions:
        [2m19:41:41.824191 line      1707[0m                 for _schema_path, split_schema_path in self.schema_paths:
        [32m[2mModified var:.. [22m_schema_path = '#/$defs'[0m
        [32m[2mModified var:.. [22msplit_schema_path = ['$defs'][0m
        [2m19:41:41.824246 line      1708[0m                     try:
        [2m19:41:41.824315 line      1709[0m                         definitions = get_model_by_path(raw, split_schema_path)
        [32m[2mModified var:.. [22mdefinitions = {'AllowedAnimals': {'additionalProperties': False, 'type': 'object'}}[0m
        [2m19:41:41.824371 line      1710[0m                         if definitions:
        [2m19:41:41.824429 line      1711[0m                             break
        [2m19:41:41.824482 line      1714[0m                 if definitions is None:
        [2m19:41:41.824537 line      1717[0m                 for key, model in definitions.items():
        [32m[2mNew var:....... [22mkey = 'AllowedAnimals'[0m
        [32m[2mNew var:....... [22mmodel = {'additionalProperties': False, 'type': 'object'}[0m
        [2m19:41:41.824591 line      1718[0m                     obj = self.SCHEMA_OBJECT_TYPE.parse_obj(model)
        [32m[2mNew var:....... [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
        [2m19:41:41.824753 line      1719[0m                     self.parse_id(obj, [*path_parts, _schema_path, key])
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['bug.json', '#/$defs', 'AllowedAnimals'][0m
            [2m19:41:41.824865 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.824919 line      1547[0m         if obj.id:
            [2m19:41:41.824946 line      1549[0m         if obj.items:
            [2m19:41:41.824972 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.825001 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.825027 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.825052 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.825079 line      1564[0m         if obj.properties:
            [2m19:41:41.825104 return    1564[0m         if obj.properties:
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.000279[0m
        [2m19:41:41.825159 line      1717[0m                 for key, model in definitions.items():
        [2m19:41:41.825240 line      1721[0m                 if object_paths:
        [2m19:41:41.825335 line      1726[0m                     self.parse_obj(obj_name, root_obj, path_parts or ["#"])
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'Bug'[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...-12/schema', 'title': 'bug'}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['bug.json'][0m
            [2m19:41:41.825417 call      1585[0m     def parse_obj(
            [2m19:41:41.825493 line      1591[0m         if obj.is_array:
            [2m19:41:41.825548 line      1593[0m         elif obj.allOf:
            [2m19:41:41.825595 line      1595[0m         elif obj.oneOf or obj.anyOf:
            [2m19:41:41.825641 line      1599[0m         elif obj.properties:
            [2m19:41:41.825687 line      1600[0m             self.parse_object(name, obj, path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'Bug'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...-12/schema', 'title': 'bug'}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['bug.json'][0m
                [32m[2mStarting var:.. [22msingular_name = False[0m
                [32m[2mStarting var:.. [22munique = True[0m
                [2m19:41:41.825742 call       970[0m     def parse_object(
                [2m19:41:41.825846 line       978[0m         if not unique:  # pragma: no cover
                [2m19:41:41.825898 line       985[0m         if self.use_title_as_name and obj.title:
                [2m19:41:41.825948 line       987[0m         reference = self.model_resolver.add(
                [2m19:41:41.825996 line       988[0m             path,
                [2m19:41:41.826043 line       989[0m             name,
                [2m19:41:41.826089 line       990[0m             class_name=True,
                [2m19:41:41.826132 line       991[0m             singular_name=singular_name,
                [2m19:41:41.826175 line       992[0m             loaded=True,
                [2m19:41:41.826218 line       987[0m         reference = self.model_resolver.add(
                [32m[2mNew var:....... [22mreference = Reference(path='bug.json#', original_name='bug',...name=None, loaded=True, source=None, children=[])[0m
                [2m19:41:41.826273 line       994[0m         class_name = reference.name
                [32m[2mNew var:....... [22mclass_name = 'Bug'[0m
                [2m19:41:41.826332 line       995[0m         self.set_title(class_name, obj)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'Bug'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...-12/schema', 'title': 'bug'}, discriminator=None)[0m
                    [2m19:41:41.826398 call       660[0m     def set_title(self, name: str, obj: JsonSchemaObject) -> None:
                    [2m19:41:41.826458 line       661[0m         if obj.title:
                    [2m19:41:41.826501 line       662[0m             self.extra_template_data[name]["title"] = obj.title
                    [2m19:41:41.826544 return     662[0m             self.extra_template_data[name]["title"] = obj.title
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000200[0m
                [2m19:41:41.826607 line       996[0m         fields = self.parse_object_fields(
                [2m19:41:41.826661 line       997[0m             obj, path, get_module_name(class_name, None, treat_dot_as_module=self.treat_dot_as_module)
                [2m19:41:41.826714 line       996[0m         fields = self.parse_object_fields(
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...-12/schema', 'title': 'bug'}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['bug.json'][0m
                    [32m[2mStarting var:.. [22mmodule_name = ''[0m
                    [2m19:41:41.826769 call       914[0m     def parse_object_fields(
                    [2m19:41:41.826839 line       920[0m         properties: dict[str, JsonSchemaObject | bool] = {} if obj.properties is None else obj.properties
                    [32m[2mNew var:....... [22mproperties = {'bug_animals': JsonSchemaObject(items=None, uni...m_base_path=None, extras={}, discriminator=None)}[0m
                    [2m19:41:41.826883 line       921[0m         requires: set[str] = {*()} if obj.required is None else {*obj.required}
                    [32m[2mNew var:....... [22mrequires = set()[0m
                    [2m19:41:41.826951 line       922[0m         fields: list[DataModelFieldBase] = []
                    [32m[2mNew var:....... [22mfields = [][0m
                    [2m19:41:41.827019 line       924[0m         exclude_field_names: set[str] = set()
                    [32m[2mNew var:....... [22mexclude_field_names = set()[0m
                    [2m19:41:41.827088 line       925[0m         for original_field_name, field in properties.items():
                    [32m[2mNew var:....... [22moriginal_field_name = 'bug_animals'[0m
                    [32m[2mNew var:....... [22mfield = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [2m19:41:41.827157 line       926[0m             field_name, alias = self.model_resolver.get_valid_field_name_and_alias(
                    [2m19:41:41.827249 line       927[0m                 original_field_name, excludes=exclude_field_names
                    [2m19:41:41.827331 line       926[0m             field_name, alias = self.model_resolver.get_valid_field_name_and_alias(
                    [32m[2mNew var:....... [22mfield_name = 'bug_animals'[0m
                    [32m[2mNew var:....... [22malias = None[0m
                    [2m19:41:41.827443 line       929[0m             modular_name = f"{module_name}.{field_name}" if module_name else field_name
                    [32m[2mNew var:....... [22mmodular_name = 'bug_animals'[0m
                    [2m19:41:41.827538 line       931[0m             exclude_field_names.add(field_name)
                    [32m[2mModified var:.. [22mexclude_field_names = {'bug_animals'}[0m
                    [2m19:41:41.827627 line       933[0m             if isinstance(field, bool):
                    [2m19:41:41.827717 line       950[0m             field_type = self.parse_item(modular_name, field, [*path, field_name])
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'bug_animals'[0m
                        [32m[2mStarting var:.. [22mitem = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['bug.json', 'bug_animals'][0m
                        [32m[2mStarting var:.. [22msingular_name = False[0m
                        [32m[2mStarting var:.. [22mparent = None[0m
                        [2m19:41:41.827815 call      1068[0m     def parse_item(  # noqa: PLR0911, PLR0912
                        [2m19:41:41.827885 line      1076[0m         if self.use_title_as_name and item.title:
                        [2m19:41:41.827921 line      1079[0m         if parent and not item.enum and item.has_constraint and (parent.has_constraint or self.field_constraints):
                        [2m19:41:41.827955 line      1091[0m         if item.ref:
                        [2m19:41:41.827990 line      1093[0m         if item.custom_type_path:
                        [2m19:41:41.828024 line      1095[0m         if item.is_array:
                        [2m19:41:41.828061 line      1097[0m         if item.discriminator and parent and parent.is_array and (item.oneOf or item.anyOf):
                        [2m19:41:41.828096 line      1099[0m         if item.anyOf:
                        [2m19:41:41.828131 line      1101[0m         if item.oneOf:
                        [2m19:41:41.828165 line      1103[0m         if item.allOf:
                        [2m19:41:41.828198 line      1112[0m         if item.is_object or item.patternProperties:
                        [2m19:41:41.828235 line      1127[0m         if item.enum:
                        [2m19:41:41.828270 line      1131[0m         return self.get_data_type(item)
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [2m19:41:41.828314 call       631[0m     def get_data_type(self, obj: JsonSchemaObject) -> DataType:
                            [2m19:41:41.828358 line       632[0m         if obj.type is None:
                            [2m19:41:41.828389 line       633[0m             if "const" in obj.extras:
                            [2m19:41:41.828420 line       635[0m             return self.data_type_manager.get_data_type(
                            [2m19:41:41.828450 line       636[0m                 Types.any,
                            [2m19:41:41.828480 line       635[0m             return self.data_type_manager.get_data_type(
                            [2m19:41:41.828522 return     635[0m             return self.data_type_manager.get_data_type(
                            [36m[2mReturn value:.. [22mContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                            [33m[2mElapsed time: [22m00:00:00.000276[0m
                        [2m19:41:41.828598 return    1131[0m         return self.get_data_type(item)
                        [36m[2mReturn value:.. [22mContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                        [33m[2mElapsed time: [22m00:00:00.000846[0m
                    [32m[2mNew var:....... [22mfield_type = ContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                    [2m19:41:41.828667 line       952[0m             if self.force_optional_for_required_fields or (
                    [2m19:41:41.828777 line       953[0m                 self.apply_default_values_for_required_fields and field.has_default
                    [2m19:41:41.828880 line       957[0m                 required = original_field_name in requires
                    [32m[2mNew var:....... [22mrequired = False[0m
                    [2m19:41:41.828974 line       958[0m             fields.append(
                    [2m19:41:41.829072 line       959[0m                 self.get_object_field(
                    [2m19:41:41.829167 line       960[0m                     field_name=field_name,
                    [2m19:41:41.829260 line       961[0m                     field=field,
                    [2m19:41:41.829353 line       962[0m                     required=required,
                    [2m19:41:41.829445 line       963[0m                     field_type=field_type,
                    [2m19:41:41.829537 line       964[0m                     alias=alias,
                    [2m19:41:41.829631 line       965[0m                     original_field_name=original_field_name,
                    [2m19:41:41.829726 line       959[0m                 self.get_object_field(
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mfield_name = 'bug_animals'[0m
                        [32m[2mStarting var:.. [22mfield = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mrequired = False[0m
                        [32m[2mStarting var:.. [22mfield_type = ContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                        [32m[2mStarting var:.. [22malias = None[0m
                        [32m[2mStarting var:.. [22moriginal_field_name = 'bug_animals'[0m
                        [2m19:41:41.829833 call       603[0m     def get_object_field(  # noqa: PLR0913
                        [2m19:41:41.829916 line       613[0m         return self.data_model_field_type(
                        [2m19:41:41.829961 line       614[0m             name=field_name,
                        [2m19:41:41.830004 line       615[0m             default=field.default,
                        [2m19:41:41.830045 line       616[0m             data_type=field_type,
                        [2m19:41:41.830086 line       617[0m             required=required,
                        [2m19:41:41.830126 line       618[0m             alias=alias,
                        [2m19:41:41.830167 line       619[0m             constraints=field.dict() if self.is_constraints_field(field) else None,
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [2m19:41:41.830213 call       598[0m     def is_constraints_field(self, obj: JsonSchemaObject) -> bool:
                            [2m19:41:41.830254 line       599[0m         return obj.is_array or (
                            [2m19:41:41.830284 line       600[0m             self.field_constraints and not (obj.ref or obj.anyOf or obj.oneOf or obj.allOf or obj.is_object or obj.enum)
                            [2m19:41:41.830314 line       599[0m         return obj.is_array or (
                            [2m19:41:41.830345 return     599[0m         return obj.is_array or (
                            [36m[2mReturn value:.. [22mFalse[0m
                            [33m[2mElapsed time: [22m00:00:00.000173[0m
                        [2m19:41:41.830397 line       620[0m             nullable=field.nullable if self.strict_nullable and (field.has_default or required) else None,
                        [2m19:41:41.830441 line       621[0m             strip_default_none=self.strip_default_none,
                        [2m19:41:41.830482 line       622[0m             extras=self.get_field_extras(field),
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [2m19:41:41.830529 call       565[0m     def get_field_extras(self, obj: JsonSchemaObject) -> dict[str, Any]:
                            [2m19:41:41.830570 line       566[0m         if self.field_include_all_keys:
                            [2m19:41:41.830600 line       574[0m                 for k, v in obj.extras.items()
                            [2m19:41:41.830629 line       572[0m             extras = {
                            [2m19:41:41.830658 line       574[0m                 for k, v in obj.extras.items()
                            [2m19:41:41.830687 line       572[0m             extras = {
                            [32m[2mNew var:....... [22mextras = {}[0m
                            [2m19:41:41.830715 line       577[0m         if self.default_field_extras:
                            [2m19:41:41.830749 line       579[0m         return extras
                            [2m19:41:41.830783 return     579[0m         return extras
                            [36m[2mReturn value:.. [22m{}[0m
                            [33m[2mElapsed time: [22m00:00:00.000302[0m
                        [2m19:41:41.830838 line       623[0m             use_annotated=self.use_annotated,
                        [2m19:41:41.830883 line       624[0m             use_field_description=self.use_field_description,
                        [2m19:41:41.830926 line       625[0m             use_default_kwarg=self.use_default_kwarg,
                        [2m19:41:41.830967 line       626[0m             original_name=original_field_name,
                        [2m19:41:41.831009 line       627[0m             has_default=field.has_default,
                        [2m19:41:41.831065 line       628[0m             type_has_null=field.type_has_null,
                        [2m19:41:41.831111 line       613[0m         return self.data_model_field_type(
                        [2m19:41:41.831197 return     613[0m         return self.data_model_field_type(
                        [36m[2mReturn value:.. [22mDataModelField(name='bug_animals', default=None,...ne_literal_as_default=False, type_has_null=False)[0m
                        [33m[2mElapsed time: [22m00:00:00.001440[0m
                    [2m19:41:41.831282 line       958[0m             fields.append(
                    [32m[2mModified var:.. [22mfields = [DataModelField(name='bug_animals', default=None...e_literal_as_default=False, type_has_null=False)][0m
                    [2m19:41:41.831386 line       925[0m         for original_field_name, field in properties.items():
                    [2m19:41:41.831507 line       968[0m         return fields
                    [2m19:41:41.831623 return     968[0m         return fields
                    [36m[2mReturn value:.. [22m[DataModelField(name='bug_animals', default=None...e_literal_as_default=False, type_has_null=False)][0m
                    [33m[2mElapsed time: [22m00:00:00.005000[0m
                [32m[2mNew var:....... [22mfields = [DataModelField(name='bug_animals', default=None...e_literal_as_default=False, type_has_null=False)][0m
                [2m19:41:41.831779 line       999[0m         if fields or not isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.831872 line      1000[0m             data_model_type_class = self.data_model_type
                [32m[2mNew var:....... [22mdata_model_type_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                [2m19:41:41.831952 line      1024[0m         self.set_additional_properties(class_name, obj)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'Bug'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...-12/schema', 'title': 'bug'}, discriminator=None)[0m
                    [2m19:41:41.832045 call       656[0m     def set_additional_properties(self, name: str, obj: JsonSchemaObject) -> None:
                    [2m19:41:41.832111 line       657[0m         if isinstance(obj.additionalProperties, bool):
                    [2m19:41:41.832163 return     657[0m         if isinstance(obj.additionalProperties, bool):
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000209[0m
                [2m19:41:41.832276 line      1026[0m         data_model_type = self._create_data_model(
                [2m19:41:41.832398 line      1027[0m             model_type=data_model_type_class,
                [2m19:41:41.832492 line      1028[0m             reference=reference,
                [2m19:41:41.832569 line      1029[0m             fields=fields,
                [2m19:41:41.832643 line      1030[0m             custom_base_class=obj.custom_base_path or self.base_class,
                [2m19:41:41.832716 line      1031[0m             custom_template_dir=self.custom_template_dir,
                [2m19:41:41.832793 line      1032[0m             extra_template_data=self.extra_template_data,
                [2m19:41:41.832888 line      1033[0m             path=self.current_source_path,
                [2m19:41:41.832957 line      1034[0m             description=obj.description if self.use_schema_description else None,
                [2m19:41:41.833027 line      1035[0m             nullable=obj.type_has_null,
                [2m19:41:41.833099 line      1036[0m             keyword_only=self.keyword_only,
                [2m19:41:41.833169 line      1037[0m             treat_dot_as_module=self.treat_dot_as_module,
                [2m19:41:41.833239 line      1026[0m         data_model_type = self._create_data_model(
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mmodel_type = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                    [32m[2mStarting var:.. [22mkwargs = {'reference': Reference(path='bug.json#', origin...yword_only': False, 'treat_dot_as_module': False}[0m
                    [2m19:41:41.833320 call       731[0m     def _create_data_model(self, model_type: type[DataModel] | None = None, **kwargs: Any) -> DataModel:
                    [2m19:41:41.833392 line       733[0m         data_model_class = model_type or self.data_model_type
                    [32m[2mNew var:....... [22mdata_model_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                    [2m19:41:41.833439 line       734[0m         if issubclass(data_model_class, DataClass):
                    [2m19:41:41.833492 line       736[0m         return data_model_class(**kwargs)
                    [2m19:41:41.833634 return     736[0m         return data_model_class(**kwargs)
                    [36m[2mReturn value:.. [22m<datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
                    [33m[2mElapsed time: [22m00:00:00.000395[0m
                [32m[2mModified var:.. [22mreference = Reference(path='bug.json#', original_name='bug',...BaseModel object at 0x7f80021b2d70>, children=[])[0m
                [32m[2mNew var:....... [22mdata_model_type = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
                [2m19:41:41.833725 line      1039[0m         self.results.append(data_model_type)
                [2m19:41:41.833833 line      1040[0m         return self.data_type(reference=reference)
                [32m[2mModified var:.. [22mreference = Reference(path='bug.json#', original_name='bug',...alse, dict_key=None, treat_dot_as_module=False)])[0m
                [2m19:41:41.833938 return    1040[0m         return self.data_type(reference=reference)
                [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                [33m[2mElapsed time: [22m00:00:00.008323[0m
            [2m19:41:41.834072 line      1609[0m         self.parse_ref(obj, path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...-12/schema', 'title': 'bug'}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['bug.json'][0m
                [2m19:41:41.834129 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                [2m19:41:41.834188 line      1522[0m         if obj.ref:
                [2m19:41:41.834230 line      1524[0m         if obj.items:
                [2m19:41:41.834271 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.834313 line      1532[0m         if obj.patternProperties:
                [2m19:41:41.834353 line      1535[0m         for item in obj.anyOf:
                [2m19:41:41.834395 line      1537[0m         for item in obj.allOf:
                [2m19:41:41.834435 line      1539[0m         for item in obj.oneOf:
                [2m19:41:41.834474 line      1541[0m         if obj.properties:
                [2m19:41:41.834515 line      1542[0m             for property_value in obj.properties.values():
                [32m[2mNew var:....... [22mproperty_value = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [2m19:41:41.834555 line      1543[0m                 if isinstance(property_value, JsonSchemaObject):
                [2m19:41:41.834619 line      1544[0m                     self.parse_ref(property_value, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['bug.json'][0m
                    [2m19:41:41.834683 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.834730 line      1522[0m         if obj.ref:
                    [2m19:41:41.834763 line      1524[0m         if obj.items:
                    [2m19:41:41.834794 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.834830 line      1531[0m             self.parse_ref(obj.additionalProperties, path)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['bug.json'][0m
                        [2m19:41:41.834866 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                        [2m19:41:41.834907 line      1522[0m         if obj.ref:
                        [2m19:41:41.834930 line      1523[0m             self.resolve_ref(obj.ref)
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobject_ref = '#/$defs/AllowedAnimals'[0m
                            [2m19:41:41.834960 call      1482[0m     def resolve_ref(self, object_ref: str) -> Reference:
                            [2m19:41:41.834984 line      1483[0m         reference = self.model_resolver.add_ref(object_ref)
                            [32m[2mNew var:....... [22mreference = Reference(path='bug.json#/$defs/AllowedAnimals',...ame=None, loaded=False, source=None, children=[])[0m
                            [2m19:41:41.835122 line      1484[0m         if reference.loaded:
                            [2m19:41:41.835154 line      1488[0m         ref = self.model_resolver.resolve_ref(object_ref)
                            [32m[2mNew var:....... [22mref = 'bug.json#/$defs/AllowedAnimals'[0m
                            [2m19:41:41.835207 line      1489[0m         if get_ref_type(object_ref) == JSONReference.LOCAL:
                            [2m19:41:41.835235 line      1491[0m             self.reserved_refs[tuple(self.model_resolver.current_root)].add(ref)
                            [2m19:41:41.835256 line      1492[0m             return reference
                            [2m19:41:41.835275 return    1492[0m             return reference
                            [36m[2mReturn value:.. [22mReference(path='bug.json#/$defs/AllowedAnimals',...ame=None, loaded=False, source=None, children=[])[0m
                            [33m[2mElapsed time: [22m00:00:00.000349[0m
                        [2m19:41:41.835318 line      1524[0m         if obj.items:
                        [2m19:41:41.835344 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                        [2m19:41:41.835368 line      1532[0m         if obj.patternProperties:
                        [2m19:41:41.835390 line      1535[0m         for item in obj.anyOf:
                        [2m19:41:41.835411 line      1537[0m         for item in obj.allOf:
                        [2m19:41:41.835433 line      1539[0m         for item in obj.oneOf:
                        [2m19:41:41.835454 line      1541[0m         if obj.properties:
                        [2m19:41:41.835475 return    1541[0m         if obj.properties:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000644[0m
                    [2m19:41:41.835517 line      1532[0m         if obj.patternProperties:
                    [2m19:41:41.835552 line      1535[0m         for item in obj.anyOf:
                    [2m19:41:41.835584 line      1537[0m         for item in obj.allOf:
                    [2m19:41:41.835615 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.835646 line      1541[0m         if obj.properties:
                    [2m19:41:41.835678 return    1541[0m         if obj.properties:
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.001037[0m
                [2m19:41:41.835728 line      1542[0m             for property_value in obj.properties.values():
                [2m19:41:41.835791 return    1542[0m             for property_value in obj.properties.values():
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.001746[0m
            [2m19:41:41.835881 return    1609[0m         self.parse_ref(obj, path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.010519[0m
        [2m19:41:41.835947 line      1727[0m                 for key, model in definitions.items():
        [2m19:41:41.836020 line      1728[0m                     path = [*path_parts, _schema_path, key]
        [32m[2mModified var:.. [22mpath = ['bug.json', '#/$defs', 'AllowedAnimals'][0m
        [2m19:41:41.836088 line      1729[0m                     reference = self.model_resolver.get(path)
        [32m[2mNew var:....... [22mreference = Reference(path='bug.json#/$defs/AllowedAnimals',...ame=None, loaded=False, source=None, children=[])[0m
        [2m19:41:41.836288 line      1730[0m                     if not reference or not reference.loaded:
        [2m19:41:41.836395 line      1731[0m                         self.parse_raw_obj(key, model, path)
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
            [32m[2mStarting var:.. [22mraw = {'additionalProperties': False, 'type': 'object'}[0m
            [32m[2mStarting var:.. [22mpath = ['bug.json', '#/$defs', 'AllowedAnimals'][0m
            [2m19:41:41.836477 call      1577[0m     def parse_raw_obj(
            [2m19:41:41.836515 line      1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['bug.json', '#/$defs', 'AllowedAnimals'][0m
                [2m19:41:41.836590 call      1585[0m     def parse_obj(
                [2m19:41:41.836639 line      1591[0m         if obj.is_array:
                [2m19:41:41.836672 line      1593[0m         elif obj.allOf:
                [2m19:41:41.836697 line      1595[0m         elif obj.oneOf or obj.anyOf:
                [2m19:41:41.836720 line      1599[0m         elif obj.properties:
                [2m19:41:41.836743 line      1601[0m         elif obj.patternProperties:
                [2m19:41:41.836767 line      1603[0m         elif obj.type == "object":
                [2m19:41:41.836790 line      1604[0m             self.parse_object(name, obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['bug.json', '#/$defs', 'AllowedAnimals'][0m
                    [32m[2mStarting var:.. [22msingular_name = False[0m
                    [32m[2mStarting var:.. [22munique = True[0m
                    [2m19:41:41.836826 call       970[0m     def parse_object(
                    [2m19:41:41.836886 line       978[0m         if not unique:  # pragma: no cover
                    [2m19:41:41.836913 line       985[0m         if self.use_title_as_name and obj.title:
                    [2m19:41:41.836939 line       987[0m         reference = self.model_resolver.add(
                    [2m19:41:41.836963 line       988[0m             path,
                    [2m19:41:41.836987 line       989[0m             name,
                    [2m19:41:41.837014 line       990[0m             class_name=True,
                    [2m19:41:41.837039 line       991[0m             singular_name=singular_name,
                    [2m19:41:41.837064 line       992[0m             loaded=True,
                    [2m19:41:41.837088 line       987[0m         reference = self.model_resolver.add(
                    [32m[2mNew var:....... [22mreference = Reference(path='bug.json#/$defs/AllowedAnimals',...name=None, loaded=True, source=None, children=[])[0m
                    [2m19:41:41.837136 line       994[0m         class_name = reference.name
                    [32m[2mNew var:....... [22mclass_name = 'AllowedAnimals'[0m
                    [2m19:41:41.837174 line       995[0m         self.set_title(class_name, obj)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.837215 call       660[0m     def set_title(self, name: str, obj: JsonSchemaObject) -> None:
                        [2m19:41:41.837254 line       661[0m         if obj.title:
                        [2m19:41:41.837279 return     661[0m         if obj.title:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000102[0m
                    [2m19:41:41.837329 line       996[0m         fields = self.parse_object_fields(
                    [2m19:41:41.837362 line       997[0m             obj, path, get_module_name(class_name, None, treat_dot_as_module=self.treat_dot_as_module)
                    [2m19:41:41.837397 line       996[0m         fields = self.parse_object_fields(
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['bug.json', '#/$defs', 'AllowedAnimals'][0m
                        [32m[2mStarting var:.. [22mmodule_name = ''[0m
                        [2m19:41:41.837434 call       914[0m     def parse_object_fields(
                        [2m19:41:41.837482 line       920[0m         properties: dict[str, JsonSchemaObject | bool] = {} if obj.properties is None else obj.properties
                        [32m[2mNew var:....... [22mproperties = {}[0m
                        [2m19:41:41.837508 line       921[0m         requires: set[str] = {*()} if obj.required is None else {*obj.required}
                        [32m[2mNew var:....... [22mrequires = set()[0m
                        [2m19:41:41.837540 line       922[0m         fields: list[DataModelFieldBase] = []
                        [32m[2mNew var:....... [22mfields = [][0m
                        [2m19:41:41.837572 line       924[0m         exclude_field_names: set[str] = set()
                        [32m[2mNew var:....... [22mexclude_field_names = set()[0m
                        [2m19:41:41.837604 line       925[0m         for original_field_name, field in properties.items():
                        [2m19:41:41.837636 line       968[0m         return fields
                        [2m19:41:41.837662 return     968[0m         return fields
                        [36m[2mReturn value:.. [22m[][0m
                        [33m[2mElapsed time: [22m00:00:00.000267[0m
                    [32m[2mNew var:....... [22mfields = [][0m
                    [2m19:41:41.837710 line       999[0m         if fields or not isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.837751 line      1000[0m             data_model_type_class = self.data_model_type
                    [32m[2mNew var:....... [22mdata_model_type_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                    [2m19:41:41.837783 line      1024[0m         self.set_additional_properties(class_name, obj)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'AllowedAnimals'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.837831 call       656[0m     def set_additional_properties(self, name: str, obj: JsonSchemaObject) -> None:
                        [2m19:41:41.837870 line       657[0m         if isinstance(obj.additionalProperties, bool):
                        [2m19:41:41.837893 line       658[0m             self.extra_template_data[name]["additionalProperties"] = obj.additionalProperties
                        [2m19:41:41.837916 return     658[0m             self.extra_template_data[name]["additionalProperties"] = obj.additionalProperties
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000120[0m
                    [2m19:41:41.837960 line      1026[0m         data_model_type = self._create_data_model(
                    [2m19:41:41.837995 line      1027[0m             model_type=data_model_type_class,
                    [2m19:41:41.838027 line      1028[0m             reference=reference,
                    [2m19:41:41.838059 line      1029[0m             fields=fields,
                    [2m19:41:41.838089 line      1030[0m             custom_base_class=obj.custom_base_path or self.base_class,
                    [2m19:41:41.838120 line      1031[0m             custom_template_dir=self.custom_template_dir,
                    [2m19:41:41.838150 line      1032[0m             extra_template_data=self.extra_template_data,
                    [2m19:41:41.838181 line      1033[0m             path=self.current_source_path,
                    [2m19:41:41.838211 line      1034[0m             description=obj.description if self.use_schema_description else None,
                    [2m19:41:41.838242 line      1035[0m             nullable=obj.type_has_null,
                    [2m19:41:41.838276 line      1036[0m             keyword_only=self.keyword_only,
                    [2m19:41:41.838307 line      1037[0m             treat_dot_as_module=self.treat_dot_as_module,
                    [2m19:41:41.838337 line      1026[0m         data_model_type = self._create_data_model(
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mmodel_type = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                        [32m[2mStarting var:.. [22mkwargs = {'reference': Reference(path='bug.json#/$defs/Al...yword_only': False, 'treat_dot_as_module': False}[0m
                        [2m19:41:41.838374 call       731[0m     def _create_data_model(self, model_type: type[DataModel] | None = None, **kwargs: Any) -> DataModel:
                        [2m19:41:41.838421 line       733[0m         data_model_class = model_type or self.data_model_type
                        [32m[2mNew var:....... [22mdata_model_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                        [2m19:41:41.838449 line       734[0m         if issubclass(data_model_class, DataClass):
                        [2m19:41:41.838484 line       736[0m         return data_model_class(**kwargs)
                        [2m19:41:41.838609 return     736[0m         return data_model_class(**kwargs)
                        [36m[2mReturn value:.. [22m<datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
                        [33m[2mElapsed time: [22m00:00:00.000291[0m
                    [32m[2mModified var:.. [22mreference = Reference(path='bug.json#/$defs/AllowedAnimals',...BaseModel object at 0x7f80021b2fd0>, children=[])[0m
                    [32m[2mNew var:....... [22mdata_model_type = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
                    [2m19:41:41.838675 line      1039[0m         self.results.append(data_model_type)
                    [2m19:41:41.838729 line      1040[0m         return self.data_type(reference=reference)
                    [32m[2mModified var:.. [22mreference = Reference(path='bug.json#/$defs/AllowedAnimals',...alse, dict_key=None, treat_dot_as_module=False)])[0m
                    [2m19:41:41.838795 return    1040[0m         return self.data_type(reference=reference)
                    [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                    [33m[2mElapsed time: [22m00:00:00.002071[0m
                [2m19:41:41.838904 line      1609[0m         self.parse_ref(obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['bug.json', '#/$defs', 'AllowedAnimals'][0m
                    [2m19:41:41.838941 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.838981 line      1522[0m         if obj.ref:
                    [2m19:41:41.839006 line      1524[0m         if obj.items:
                    [2m19:41:41.839032 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.839056 line      1532[0m         if obj.patternProperties:
                    [2m19:41:41.839079 line      1535[0m         for item in obj.anyOf:
                    [2m19:41:41.839102 line      1537[0m         for item in obj.allOf:
                    [2m19:41:41.839124 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.839145 line      1541[0m         if obj.properties:
                    [2m19:41:41.839167 return    1541[0m         if obj.properties:
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000264[0m
                [2m19:41:41.839212 return    1609[0m         self.parse_ref(obj, path)
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.002660[0m
            [2m19:41:41.839257 return    1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.002808[0m
        [32m[2mModified var:.. [22mreference = Reference(path='bug.json#/$defs/AllowedAnimals',...alse, dict_key=None, treat_dot_as_module=False)])[0m
        [2m19:41:41.839295 line      1727[0m                 for key, model in definitions.items():
        [2m19:41:41.839390 line      1733[0m                 key = tuple(path_parts)
        [32m[2mModified var:.. [22mkey = ('bug.json',)[0m
        [2m19:41:41.839474 line      1734[0m                 reserved_refs = set(self.reserved_refs.get(key) or [])
        [32m[2mNew var:....... [22mreserved_refs = {'bug.json#/$defs/AllowedAnimals'}[0m
        [2m19:41:41.839562 line      1735[0m                 while reserved_refs:
        [2m19:41:41.839650 line      1736[0m                     for reserved_path in sorted(reserved_refs):
        [32m[2mNew var:....... [22mreserved_path = 'bug.json#/$defs/AllowedAnimals'[0m
        [2m19:41:41.839731 line      1737[0m                         reference = self.model_resolver.get(reserved_path)
        [2m19:41:41.839957 line      1738[0m                         if not reference or reference.loaded:
        [2m19:41:41.840057 line      1739[0m                             continue
        [2m19:41:41.840143 line      1736[0m                     for reserved_path in sorted(reserved_refs):
        [2m19:41:41.840224 line      1745[0m                     previous_reserved_refs = reserved_refs
        [32m[2mNew var:....... [22mprevious_reserved_refs = {'bug.json#/$defs/AllowedAnimals'}[0m
        [2m19:41:41.840306 line      1746[0m                     reserved_refs = set(self.reserved_refs.get(key) or [])
        [2m19:41:41.840394 line      1747[0m                     if previous_reserved_refs == reserved_refs:
        [2m19:41:41.840476 line      1748[0m                         break
        [2m19:41:41.840555 line      1699[0m             with self.root_id_context(raw):
        [2m19:41:41.840645 line      1697[0m         with self.model_resolver.current_root_context(path_parts):
        [2m19:41:41.840735 return    1697[0m         with self.model_resolver.current_root_context(path_parts):
        [36m[2mReturn value:.. [22mNone[0m
        [33m[2mElapsed time: [22m00:00:00.019188[0m
    [2m19:41:41.840852 line      1632[0m         for source, path_parts in self._get_context_source_path_parts():
        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
        [32m[2mStarting var:.. [22msource = Source(path=PosixPath('bug.json'), text='{\n  "$...dAnimals" }\n    }\n  },\n  "title": "bug"\n}\n')[0m
        [32m[2mStarting var:.. [22mpath_parts = ['bug.json'][0m
        [2m19:41:41.840888 call      1629[0m                 yield source, path_parts
        [2m19:41:41.840928 line      1627[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:41.840953 line      1626[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:41.840977 line      1618[0m         for source in self.iter_source:
        [32m[2mModified var:.. [22msource = Source(path=PosixPath('commons.json'), text='{\n...aft/2020-12/schema",\n  "title": "commons"\n}\n')[0m
        [2m19:41:41.841118 line      1619[0m             if isinstance(self.source, ParseResult):
        [2m19:41:41.841152 line      1622[0m                 path_parts = list(source.path.parts)
        [32m[2mModified var:.. [22mpath_parts = ['commons.json'][0m
        [2m19:41:41.841175 line      1623[0m             if self.current_source_path is not None:
        [2m19:41:41.841198 line      1624[0m                 self.current_source_path = source.path
        [2m19:41:41.841214 line      1626[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:41.841297 line      1627[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:41.841328 line      1629[0m                 yield source, path_parts
        [2m19:41:41.841349 return    1629[0m                 yield source, path_parts
        [36m[2mReturn value:.. [22m(Source(path=PosixPath('commons.json'), text='{\...,\n  "title": "commons"\n}\n'), ['commons.json'])[0m
        [33m[2mElapsed time: [22m00:00:00.000500[0m
    [32m[2mModified var:.. [22msource = Source(path=PosixPath('commons.json'), text='{\n...aft/2020-12/schema",\n  "title": "commons"\n}\n')[0m
    [32m[2mModified var:.. [22mpath_parts = ['commons.json'][0m
    [2m19:41:41.841397 line      1633[0m             self.raw_obj = load_yaml(source.text)
    [2m19:41:41.841766 line      1634[0m             if self.raw_obj is None:  # pragma: no cover
    [2m19:41:41.841806 line      1637[0m             if self.custom_class_name_generator:
    [2m19:41:41.841831 line      1640[0m                 if self.class_name:
    [2m19:41:41.841851 line      1644[0m                     obj_name = self.raw_obj.get("title", "Model")
    [32m[2mModified var:.. [22mobj_name = 'commons'[0m
    [2m19:41:41.841869 line      1645[0m                     if not self.model_resolver.validate_name(obj_name):
    [2m19:41:41.841898 line      1647[0m                 if not self.model_resolver.validate_name(obj_name):
    [2m19:41:41.841918 line      1649[0m             self._parse_file(self.raw_obj, obj_name, path_parts)
        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
        [32m[2mStarting var:.. [22mraw = {'$defs': {'maxArray': {'maxItems': 100, 'type':...ma.org/draft/2020-12/schema', 'title': 'commons'}[0m
        [32m[2mStarting var:.. [22mobj_name = 'commons'[0m
        [32m[2mStarting var:.. [22mpath_parts = ['commons.json'][0m
        [32m[2mStarting var:.. [22mobject_paths = None[0m
        [2m19:41:41.841945 call      1688[0m     def _parse_file(  # noqa: PLR0912
        [2m19:41:41.841995 line      1695[0m         object_paths = [o for o in object_paths or [] if o]
        [32m[2mModified var:.. [22mobject_paths = [][0m
        [2m19:41:41.842015 line      1696[0m         path = [*path_parts, f"#/{object_paths[0]}", *object_paths[1:]] if object_paths else path_parts
        [32m[2mNew var:....... [22mpath = ['commons.json'][0m
        [2m19:41:41.842041 line      1697[0m         with self.model_resolver.current_root_context(path_parts):
        [2m19:41:41.842077 line      1698[0m             obj_name = self.model_resolver.add(path, obj_name, unique=False, class_name=True).name
        [32m[2mModified var:.. [22mobj_name = 'Commons'[0m
        [2m19:41:41.842153 line      1699[0m             with self.root_id_context(raw):
            [32m[2mStarting var:.. [22margs = (<datamodel_code_generator.parser.jsonschema.Jso...a.org/draft/2020-12/schema', 'title': 'commons'})[0m
            [32m[2mStarting var:.. [22mkwds = {}[0m
            [32m[2mStarting var:.. [22mfunc = <function JsonSchemaParser.root_id_context at 0x7f80009f6e80>[0m
            [2m19:41:41.842190 call       304[0m     def helper(*args, **kwds):
            [2m19:41:41.842228 line       305[0m         return _GeneratorContextManager(func, args, kwds)
            [2m19:41:41.842247 return     305[0m         return _GeneratorContextManager(func, args, kwds)
            [36m[2mReturn value:.. [22m<contextlib._GeneratorContextManager object at 0x7f8001977a10>[0m
            [33m[2mElapsed time: [22m00:00:00.000088[0m
        [2m19:41:41.842296 line      1701[0m                 raw.pop("self", None)
        [2m19:41:41.842317 line      1703[0m                 root_obj = self.SCHEMA_OBJECT_TYPE.parse_obj(raw)
        [32m[2mNew var:....... [22mroot_obj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'commons'}, discriminator=None)[0m
        [2m19:41:41.842392 line      1704[0m                 self.parse_id(root_obj, path_parts)
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'commons'}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['commons.json'][0m
            [2m19:41:41.842445 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.842491 line      1547[0m         if obj.id:
            [2m19:41:41.842519 line      1548[0m             self.model_resolver.add_id(obj.id, path)
            [2m19:41:41.842675 line      1549[0m         if obj.items:
            [2m19:41:41.842710 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.842741 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.842768 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.842793 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.842825 line      1564[0m         if obj.properties:
            [2m19:41:41.842862 return    1564[0m         if obj.properties:
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.000456[0m
        [2m19:41:41.842913 line      1705[0m                 definitions: dict[Any, Any] | None = None
        [32m[2mNew var:....... [22mdefinitions = None[0m
        [2m19:41:41.842949 line      1706[0m                 _schema_path = ""
        [32m[2mNew var:....... [22m_schema_path = ''[0m
        [2m19:41:41.842990 line      1707[0m                 for _schema_path, split_schema_path in self.schema_paths:
        [32m[2mModified var:.. [22m_schema_path = '#/definitions'[0m
        [32m[2mNew var:....... [22msplit_schema_path = ['definitions'][0m
        [2m19:41:41.843031 line      1708[0m                     try:
        [2m19:41:41.843077 line      1709[0m                         definitions = get_model_by_path(raw, split_schema_path)
        [32m[2mModified var:.. [22mdefinitions = {}[0m
        [2m19:41:41.843119 line      1710[0m                         if definitions:
        [2m19:41:41.843159 line      1707[0m                 for _schema_path, split_schema_path in self.schema_paths:
        [32m[2mModified var:.. [22m_schema_path = '#/$defs'[0m
        [32m[2mModified var:.. [22msplit_schema_path = ['$defs'][0m
        [2m19:41:41.843192 line      1708[0m                     try:
        [2m19:41:41.843234 line      1709[0m                         definitions = get_model_by_path(raw, split_schema_path)
        [32m[2mModified var:.. [22mdefinitions = {'maxArray': {'maxItems': 100, 'type': 'array'},...Array', 'allOf': [{'$ref': '#/$defs/minArray'}]}}[0m
        [2m19:41:41.843271 line      1710[0m                         if definitions:
        [2m19:41:41.843313 line      1711[0m                             break
        [2m19:41:41.843348 line      1714[0m                 if definitions is None:
        [2m19:41:41.843383 line      1717[0m                 for key, model in definitions.items():
        [32m[2mNew var:....... [22mkey = 'maxArray'[0m
        [32m[2mNew var:....... [22mmodel = {'maxItems': 100, 'type': 'array'}[0m
        [2m19:41:41.843418 line      1718[0m                     obj = self.SCHEMA_OBJECT_TYPE.parse_obj(model)
        [32m[2mNew var:....... [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
        [2m19:41:41.843513 line      1719[0m                     self.parse_id(obj, [*path_parts, _schema_path, key])
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'maxArray'][0m
            [2m19:41:41.843577 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.843620 line      1547[0m         if obj.id:
            [2m19:41:41.843644 line      1549[0m         if obj.items:
            [2m19:41:41.843666 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.843692 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.843714 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.843736 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.843757 line      1564[0m         if obj.properties:
            [2m19:41:41.843779 return    1564[0m         if obj.properties:
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.000243[0m
        [2m19:41:41.843833 line      1717[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'minArray'[0m
        [32m[2mModified var:.. [22mmodel = {'minItems': 0, 'type': 'array'}[0m
        [2m19:41:41.843887 line      1718[0m                     obj = self.SCHEMA_OBJECT_TYPE.parse_obj(model)
        [2m19:41:41.843991 line      1719[0m                     self.parse_id(obj, [*path_parts, _schema_path, key])
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'minArray'][0m
            [2m19:41:41.844051 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.844093 line      1547[0m         if obj.id:
            [2m19:41:41.844117 line      1549[0m         if obj.items:
            [2m19:41:41.844140 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.844163 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.844185 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.844208 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.844229 line      1564[0m         if obj.properties:
            [2m19:41:41.844251 return    1564[0m         if obj.properties:
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.000236[0m
        [2m19:41:41.844297 line      1717[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'smallArray'[0m
        [32m[2mModified var:.. [22mmodel = {'$ref': '#/$defs/minArray', 'allOf': [{'$ref': '#/$defs/minArray'}]}[0m
        [2m19:41:41.844347 line      1718[0m                     obj = self.SCHEMA_OBJECT_TYPE.parse_obj(model)
        [2m19:41:41.844472 line      1719[0m                     self.parse_id(obj, [*path_parts, _schema_path, key])
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
            [2m19:41:41.844545 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
            [2m19:41:41.844596 line      1547[0m         if obj.id:
            [2m19:41:41.844630 line      1549[0m         if obj.items:
            [2m19:41:41.844662 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
            [2m19:41:41.844694 line      1557[0m         if obj.patternProperties:
            [2m19:41:41.844727 line      1560[0m         for item in obj.anyOf:
            [2m19:41:41.844759 line      1562[0m         for item in obj.allOf:
            [32m[2mNew var:....... [22mitem = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
            [2m19:41:41.844791 line      1563[0m             self.parse_id(item, path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
                [2m19:41:41.844846 call      1546[0m     def parse_id(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                [2m19:41:41.844885 line      1547[0m         if obj.id:
                [2m19:41:41.844908 line      1549[0m         if obj.items:
                [2m19:41:41.844933 line      1555[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.844955 line      1557[0m         if obj.patternProperties:
                [2m19:41:41.844978 line      1560[0m         for item in obj.anyOf:
                [2m19:41:41.845000 line      1562[0m         for item in obj.allOf:
                [2m19:41:41.845021 line      1564[0m         if obj.properties:
                [2m19:41:41.845042 return    1564[0m         if obj.properties:
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.000230[0m
            [2m19:41:41.845085 line      1562[0m         for item in obj.allOf:
            [2m19:41:41.845129 line      1564[0m         if obj.properties:
            [2m19:41:41.845173 return    1564[0m         if obj.properties:
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.000681[0m
        [2m19:41:41.845235 line      1717[0m                 for key, model in definitions.items():
        [2m19:41:41.845295 line      1721[0m                 if object_paths:
        [2m19:41:41.845353 line      1726[0m                     self.parse_obj(obj_name, root_obj, path_parts or ["#"])
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'Commons'[0m
            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'commons'}, discriminator=None)[0m
            [32m[2mStarting var:.. [22mpath = ['commons.json'][0m
            [2m19:41:41.845414 call      1585[0m     def parse_obj(
            [2m19:41:41.845462 line      1591[0m         if obj.is_array:
            [2m19:41:41.845495 line      1593[0m         elif obj.allOf:
            [2m19:41:41.845521 line      1595[0m         elif obj.oneOf or obj.anyOf:
            [2m19:41:41.845546 line      1599[0m         elif obj.properties:
            [2m19:41:41.845571 line      1601[0m         elif obj.patternProperties:
            [2m19:41:41.845596 line      1603[0m         elif obj.type == "object":
            [2m19:41:41.845623 line      1605[0m         elif obj.enum and not self.should_parse_enum_as_literal(obj):
            [2m19:41:41.845649 line      1608[0m             self.parse_root_type(name, obj, path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'Commons'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'commons'}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['commons.json'][0m
                [2m19:41:41.845685 call      1256[0m     def parse_root_type(  # noqa: PLR0912
                [2m19:41:41.845735 line      1262[0m         reference: Reference | None = None
                [32m[2mNew var:....... [22mreference = None[0m
                [2m19:41:41.845763 line      1263[0m         if obj.ref:
                [2m19:41:41.845798 line      1265[0m         elif obj.custom_type_path:
                [2m19:41:41.845829 line      1269[0m         elif obj.is_array:
                [2m19:41:41.845857 line      1273[0m         elif obj.anyOf or obj.oneOf:
                [2m19:41:41.845885 line      1286[0m         elif obj.patternProperties:
                [2m19:41:41.845912 line      1288[0m         elif obj.enum:
                [2m19:41:41.845940 line      1293[0m         elif obj.type:
                [2m19:41:41.845968 line      1296[0m             data_type = self.data_type_manager.get_data_type(
                [2m19:41:41.845997 line      1297[0m                 Types.any,
                [2m19:41:41.846024 line      1296[0m             data_type = self.data_type_manager.get_data_type(
                [32m[2mNew var:....... [22mdata_type = ContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
                [2m19:41:41.846067 line      1299[0m         if self.force_optional_for_required_fields:
                [2m19:41:41.846119 line      1302[0m             required = not obj.nullable and not (obj.has_default and self.apply_default_values_for_required_fields)
                [32m[2mNew var:....... [22mrequired = True[0m
                [2m19:41:41.846172 line      1303[0m         if self.use_title_as_name and obj.title:
                [2m19:41:41.846224 line      1305[0m         if not reference:
                [2m19:41:41.846266 line      1306[0m             reference = self.model_resolver.add(path, name, loaded=True, class_name=True)
                [32m[2mModified var:.. [22mreference = Reference(path='commons.json#', original_name='c...name=None, loaded=True, source=None, children=[])[0m
                [2m19:41:41.846317 line      1307[0m         self.set_title(name, obj)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'Commons'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'commons'}, discriminator=None)[0m
                    [2m19:41:41.846370 call       660[0m     def set_title(self, name: str, obj: JsonSchemaObject) -> None:
                    [2m19:41:41.846415 line       661[0m         if obj.title:
                    [2m19:41:41.846441 line       662[0m             self.extra_template_data[name]["title"] = obj.title
                    [2m19:41:41.846469 return     662[0m             self.extra_template_data[name]["title"] = obj.title
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000135[0m
                [2m19:41:41.846516 line      1308[0m         self.set_additional_properties(name, obj)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'Commons'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'commons'}, discriminator=None)[0m
                    [2m19:41:41.846568 call       656[0m     def set_additional_properties(self, name: str, obj: JsonSchemaObject) -> None:
                    [2m19:41:41.846611 line       657[0m         if isinstance(obj.additionalProperties, bool):
                    [2m19:41:41.846637 return     657[0m         if isinstance(obj.additionalProperties, bool):
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000107[0m
                [2m19:41:41.846686 line      1309[0m         data_model_root_type = self.data_model_root_type(
                [2m19:41:41.846731 line      1310[0m             reference=reference,
                [2m19:41:41.846773 line      1312[0m                 self.data_model_field_type(
                [2m19:41:41.846821 line      1313[0m                     data_type=data_type,
                [2m19:41:41.846863 line      1314[0m                     default=obj.default,
                [2m19:41:41.846904 line      1315[0m                     required=required,
                [2m19:41:41.846944 line      1316[0m                     constraints=obj.dict() if self.field_constraints else {},
                [2m19:41:41.846984 line      1317[0m                     nullable=obj.nullable if self.strict_nullable else None,
                [2m19:41:41.847024 line      1318[0m                     strip_default_none=self.strip_default_none,
                [2m19:41:41.847068 line      1319[0m                     extras=self.get_field_extras(obj),
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'commons'}, discriminator=None)[0m
                    [2m19:41:41.847115 call       565[0m     def get_field_extras(self, obj: JsonSchemaObject) -> dict[str, Any]:
                    [2m19:41:41.847151 line       566[0m         if self.field_include_all_keys:
                    [2m19:41:41.847177 line       574[0m                 for k, v in obj.extras.items()
                    [2m19:41:41.847201 line       572[0m             extras = {
                    [2m19:41:41.847226 line       574[0m                 for k, v in obj.extras.items()
                    [32m[2mNew var:....... [22mk = '$defs'[0m
                    [32m[2mNew var:....... [22mv = {'maxArray': {'maxItems': 100, 'type': 'array'},...Array', 'allOf': [{'$ref': '#/$defs/minArray'}]}}[0m
                    [2m19:41:41.847250 line       575[0m                 if k in self.field_keys
                    [2m19:41:41.847290 line       573[0m                 self.get_field_extra_key(k.lstrip("x-") if k in self.field_extra_keys_without_x_prefix else k): v
                    [2m19:41:41.847318 line       574[0m                 for k, v in obj.extras.items()
                    [32m[2mModified var:.. [22mk = '$schema'[0m
                    [32m[2mModified var:.. [22mv = 'https://json-schema.org/draft/2020-12/schema'[0m
                    [2m19:41:41.847345 line       575[0m                 if k in self.field_keys
                    [2m19:41:41.847380 line       573[0m                 self.get_field_extra_key(k.lstrip("x-") if k in self.field_extra_keys_without_x_prefix else k): v
                    [2m19:41:41.847405 line       574[0m                 for k, v in obj.extras.items()
                    [32m[2mModified var:.. [22mk = 'title'[0m
                    [32m[2mModified var:.. [22mv = 'commons'[0m
                    [2m19:41:41.847430 line       575[0m                 if k in self.field_keys
                    [2m19:41:41.847465 line       573[0m                 self.get_field_extra_key(k.lstrip("x-") if k in self.field_extra_keys_without_x_prefix else k): v
                    [2m19:41:41.847492 line       574[0m                 for k, v in obj.extras.items()
                    [2m19:41:41.847518 line       572[0m             extras = {
                    [32m[2mNew var:....... [22mextras = {'title': 'commons'}[0m
                    [2m19:41:41.847544 line       577[0m         if self.default_field_extras:
                    [2m19:41:41.847574 line       579[0m         return extras
                    [2m19:41:41.847599 return     579[0m         return extras
                    [36m[2mReturn value:.. [22m{'title': 'commons'}[0m
                    [33m[2mElapsed time: [22m00:00:00.000523[0m
                [2m19:41:41.847646 line      1320[0m                     use_annotated=self.use_annotated,
                [2m19:41:41.847692 line      1321[0m                     use_field_description=self.use_field_description,
                [2m19:41:41.847738 line      1322[0m                     original_name=None,
                [2m19:41:41.847783 line      1323[0m                     has_default=obj.has_default,
                [2m19:41:41.847829 line      1312[0m                 self.data_model_field_type(
                [2m19:41:41.847914 line      1311[0m             fields=[
                [2m19:41:41.847961 line      1326[0m             custom_base_class=obj.custom_base_path or self.base_class,
                [2m19:41:41.848003 line      1327[0m             custom_template_dir=self.custom_template_dir,
                [2m19:41:41.848044 line      1328[0m             extra_template_data=self.extra_template_data,
                [2m19:41:41.848087 line      1329[0m             path=self.current_source_path,
                [2m19:41:41.848127 line      1330[0m             nullable=obj.type_has_null,
                [2m19:41:41.848170 line      1331[0m             treat_dot_as_module=self.treat_dot_as_module,
                [2m19:41:41.848210 line      1332[0m             default=obj.default if obj.has_default else UNDEFINED,
                [2m19:41:41.848251 line      1309[0m         data_model_root_type = self.data_model_root_type(
                [32m[2mModified var:.. [22mreference = Reference(path='commons.json#', original_name='c...RootModel object at 0x7f8000955d10>, children=[])[0m
                [32m[2mNew var:....... [22mdata_model_root_type = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
                [2m19:41:41.848386 line      1334[0m         self.results.append(data_model_root_type)
                [2m19:41:41.848458 line      1335[0m         return self.data_type(reference=reference)
                [32m[2mModified var:.. [22mreference = Reference(path='commons.json#', original_name='c...alse, dict_key=None, treat_dot_as_module=False)])[0m
                [2m19:41:41.848534 return    1335[0m         return self.data_type(reference=reference)
                [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                [33m[2mElapsed time: [22m00:00:00.002958[0m
            [2m19:41:41.848650 line      1609[0m         self.parse_ref(obj, path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...schema', 'title': 'commons'}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['commons.json'][0m
                [2m19:41:41.848692 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                [2m19:41:41.848740 line      1522[0m         if obj.ref:
                [2m19:41:41.848772 line      1524[0m         if obj.items:
                [2m19:41:41.848801 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                [2m19:41:41.848829 line      1532[0m         if obj.patternProperties:
                [2m19:41:41.848855 line      1535[0m         for item in obj.anyOf:
                [2m19:41:41.848881 line      1537[0m         for item in obj.allOf:
                [2m19:41:41.848908 line      1539[0m         for item in obj.oneOf:
                [2m19:41:41.848934 line      1541[0m         if obj.properties:
                [2m19:41:41.848959 return    1541[0m         if obj.properties:
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.000308[0m
            [2m19:41:41.849007 return    1609[0m         self.parse_ref(obj, path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.003633[0m
        [2m19:41:41.849059 line      1727[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'maxArray'[0m
        [32m[2mModified var:.. [22mmodel = {'maxItems': 100, 'type': 'array'}[0m
        [2m19:41:41.849125 line      1728[0m                     path = [*path_parts, _schema_path, key]
        [32m[2mModified var:.. [22mpath = ['commons.json', '#/$defs', 'maxArray'][0m
        [2m19:41:41.849198 line      1729[0m                     reference = self.model_resolver.get(path)
        [32m[2mNew var:....... [22mreference = None[0m
        [2m19:41:41.849421 line      1730[0m                     if not reference or not reference.loaded:
        [2m19:41:41.849499 line      1731[0m                         self.parse_raw_obj(key, model, path)
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'maxArray'[0m
            [32m[2mStarting var:.. [22mraw = {'maxItems': 100, 'type': 'array'}[0m
            [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'maxArray'][0m
            [2m19:41:41.849571 call      1577[0m     def parse_raw_obj(
            [2m19:41:41.849610 line      1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'maxArray'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'maxArray'][0m
                [2m19:41:41.849676 call      1585[0m     def parse_obj(
                [2m19:41:41.849726 line      1591[0m         if obj.is_array:
                [2m19:41:41.849756 line      1592[0m             self.parse_array(name, obj, path)
[33m[2m                    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'maxArray'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'maxArray'][0m
                    [32m[2mStarting var:.. [22moriginal_name = None[0m
                    [2m19:41:41.849804 call      1209[0m     def parse_array(
                    [2m19:41:41.849871 line      1216[0m         if self.use_title_as_name and obj.title:
                    [2m19:41:41.849899 line      1218[0m         reference = self.model_resolver.add(path, name, loaded=True, class_name=True)
                    [32m[2mNew var:....... [22mreference = Reference(path='commons.json#/$defs/maxArray', o...name=None, loaded=True, source=None, children=[])[0m
                    [2m19:41:41.850015 line      1219[0m         field = self.parse_array_fields(original_name or name, obj, [*path, name])
[33m[2m                        Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'maxArray'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'maxArray', 'maxArray'][0m
                        [32m[2mStarting var:.. [22msingular_name = True[0m
                        [2m19:41:41.850087 call      1152[0m     def parse_array_fields(
                        [2m19:41:41.850156 line      1159[0m         if self.force_optional_for_required_fields:
                        [2m19:41:41.850184 line      1163[0m             required = not (obj.has_default and self.apply_default_values_for_required_fields)
                        [32m[2mNew var:....... [22mrequired = True[0m
                        [2m19:41:41.850226 line      1164[0m             if self.strict_nullable:
                        [2m19:41:41.850264 line      1167[0m                 required = not obj.nullable and required
                        [2m19:41:41.850291 line      1168[0m                 nullable = None
                        [32m[2mNew var:....... [22mnullable = None[0m
                        [2m19:41:41.850317 line      1169[0m         if isinstance(obj.items, JsonSchemaObject):
                        [2m19:41:41.850351 line      1171[0m         elif isinstance(obj.items, list):
                        [2m19:41:41.850376 line      1174[0m             items = []
                        [32m[2mNew var:....... [22mitems = [][0m
                        [2m19:41:41.850402 line      1177[0m             self.data_type(
                        [2m19:41:41.850434 line      1178[0m                 data_types=self.parse_list_item(
                        [2m19:41:41.850460 line      1179[0m                     name,
                        [2m19:41:41.850486 line      1180[0m                     items,
                        [2m19:41:41.850514 line      1181[0m                     path,
                        [2m19:41:41.850540 line      1182[0m                     obj,
                        [2m19:41:41.850567 line      1183[0m                     singular_name=singular_name,
                        [2m19:41:41.850593 line      1178[0m                 data_types=self.parse_list_item(
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mname = 'maxArray'[0m
                            [32m[2mStarting var:.. [22mtarget_items = [][0m
                            [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'maxArray', 'maxArray'][0m
                            [32m[2mStarting var:.. [22mparent = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [32m[2mStarting var:.. [22msingular_name = True[0m
                            [2m19:41:41.850628 call      1133[0m     def parse_list_item(
                            [2m19:41:41.850685 line      1149[0m             for index, item in enumerate(target_items)
                            [2m19:41:41.850711 line      1141[0m         return [
                            [2m19:41:41.850735 line      1149[0m             for index, item in enumerate(target_items)
                            [2m19:41:41.850758 line      1141[0m         return [
                            [2m19:41:41.850784 return    1141[0m         return [
                            [36m[2mReturn value:.. [22m[][0m
                            [33m[2mElapsed time: [22m00:00:00.000202[0m
                        [2m19:41:41.850840 line      1185[0m                 is_list=True,
                        [2m19:41:41.850870 line      1177[0m             self.data_type(
                        [2m19:41:41.850928 line      1176[0m         data_types: list[DataType] = [
                        [32m[2mNew var:....... [22mdata_types = [ContextDataType(type=None, reference=None, data...False, dict_key=None, treat_dot_as_module=False)][0m
                        [2m19:41:41.850957 line      1189[0m         if obj.allOf:
                        [2m19:41:41.851001 line      1191[0m         elif obj.is_object:
                        [2m19:41:41.851042 line      1193[0m         if obj.enum:
                        [2m19:41:41.851078 line      1195[0m         return self.data_model_field_type(
                        [2m19:41:41.851112 line      1196[0m             data_type=self.data_type(data_types=data_types),
                        [2m19:41:41.851173 line      1197[0m             default=obj.default,
                        [2m19:41:41.851212 line      1198[0m             required=required,
                        [2m19:41:41.851246 line      1199[0m             constraints=obj.dict(),
                        [2m19:41:41.851311 line      1200[0m             nullable=nullable,
                        [2m19:41:41.851348 line      1201[0m             strip_default_none=self.strip_default_none,
                        [2m19:41:41.851383 line      1202[0m             extras=self.get_field_extras(obj),
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [2m19:41:41.851429 call       565[0m     def get_field_extras(self, obj: JsonSchemaObject) -> dict[str, Any]:
                            [2m19:41:41.851466 line       566[0m         if self.field_include_all_keys:
                            [2m19:41:41.851488 line       574[0m                 for k, v in obj.extras.items()
                            [2m19:41:41.851509 line       572[0m             extras = {
                            [2m19:41:41.851530 line       574[0m                 for k, v in obj.extras.items()
                            [2m19:41:41.851551 line       572[0m             extras = {
                            [32m[2mNew var:....... [22mextras = {}[0m
                            [2m19:41:41.851572 line       577[0m         if self.default_field_extras:
                            [2m19:41:41.851599 line       579[0m         return extras
                            [2m19:41:41.851621 return     579[0m         return extras
                            [36m[2mReturn value:.. [22m{}[0m
                            [33m[2mElapsed time: [22m00:00:00.000231[0m
                        [2m19:41:41.851668 line      1203[0m             use_annotated=self.use_annotated,
                        [2m19:41:41.851708 line      1204[0m             use_field_description=self.use_field_description,
                        [2m19:41:41.851743 line      1205[0m             original_name=None,
                        [2m19:41:41.851779 line      1206[0m             has_default=obj.has_default,
                        [2m19:41:41.851816 line      1195[0m         return self.data_model_field_type(
                        [2m19:41:41.851896 return    1195[0m         return self.data_model_field_type(
                        [36m[2mReturn value:.. [22mREPR FAILED[0m
                        [33m[2mElapsed time: [22m00:00:00.004124[0m
                    [32m[2mNew var:....... [22mfield = REPR FAILED[0m
                    [2m19:41:41.854212 line      1221[0m         if reference in [d.reference for d in field.data_type.all_data_types if d.reference]:
                    [32m[2mNew var:....... [22md = ContextDataType(type=None, reference=None, data_...=False, dict_key=None, treat_dot_as_module=False)[0m
                    [2m19:41:41.856285 line      1221[0m         if reference in [d.reference for d in field.data_type.all_data_types if d.reference]:
                    [32m[2mModified var:.. [22md = REPR FAILED[0m
                    [2m19:41:41.858345 line      1221[0m         if reference in [d.reference for d in field.data_type.all_data_types if d.reference]:
                    [2m19:41:41.862257 line      1242[0m         data_model_root = self.data_model_root_type(
                    [2m19:41:41.864486 line      1243[0m             reference=reference,
                    [2m19:41:41.866477 line      1244[0m             fields=[field],
                    [2m19:41:41.868543 line      1245[0m             custom_base_class=obj.custom_base_path or self.base_class,
                    [2m19:41:41.870545 line      1246[0m             custom_template_dir=self.custom_template_dir,
                    [2m19:41:41.872552 line      1247[0m             extra_template_data=self.extra_template_data,
                    [2m19:41:41.874556 line      1248[0m             path=self.current_source_path,
                    [2m19:41:41.876552 line      1249[0m             description=obj.description if self.use_schema_description else None,
                    [2m19:41:41.878490 line      1250[0m             nullable=obj.type_has_null,
                    [2m19:41:41.880436 line      1251[0m             treat_dot_as_module=self.treat_dot_as_module,
                    [2m19:41:41.882376 line      1242[0m         data_model_root = self.data_model_root_type(
                    [32m[2mModified var:.. [22mreference = Reference(path='commons.json#/$defs/maxArray', o...RootModel object at 0x7f8000955e50>, children=[])[0m
                    [32m[2mNew var:....... [22mdata_model_root = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
                    [2m19:41:41.884413 line      1253[0m         self.results.append(data_model_root)
                    [2m19:41:41.886364 line      1254[0m         return self.data_type(reference=reference)
                    [32m[2mModified var:.. [22mreference = Reference(path='commons.json#/$defs/maxArray', o...alse, dict_key=None, treat_dot_as_module=False)])[0m
                    [2m19:41:41.888403 return    1254[0m         return self.data_type(reference=reference)
                    [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                    [33m[2mElapsed time: [22m00:00:00.040683[0m
                [2m19:41:41.890484 line      1609[0m         self.parse_ref(obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'maxArray'][0m
                    [2m19:41:41.890522 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.890564 line      1522[0m         if obj.ref:
                    [2m19:41:41.890588 line      1524[0m         if obj.items:
                    [2m19:41:41.890610 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.890635 line      1532[0m         if obj.patternProperties:
                    [2m19:41:41.890658 line      1535[0m         for item in obj.anyOf:
                    [2m19:41:41.890679 line      1537[0m         for item in obj.allOf:
                    [2m19:41:41.890699 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.890719 line      1541[0m         if obj.properties:
                    [2m19:41:41.890739 return    1541[0m         if obj.properties:
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000255[0m
                [2m19:41:41.890784 return    1609[0m         self.parse_ref(obj, path)
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.041147[0m
            [2m19:41:41.890831 return    1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.041287[0m
        [2m19:41:41.890868 line      1727[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'minArray'[0m
        [32m[2mModified var:.. [22mmodel = {'minItems': 0, 'type': 'array'}[0m
        [2m19:41:41.890938 line      1728[0m                     path = [*path_parts, _schema_path, key]
        [32m[2mModified var:.. [22mpath = ['commons.json', '#/$defs', 'minArray'][0m
        [2m19:41:41.891008 line      1729[0m                     reference = self.model_resolver.get(path)
        [2m19:41:41.891247 line      1730[0m                     if not reference or not reference.loaded:
        [2m19:41:41.891327 line      1731[0m                         self.parse_raw_obj(key, model, path)
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'minArray'[0m
            [32m[2mStarting var:.. [22mraw = {'minItems': 0, 'type': 'array'}[0m
            [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'minArray'][0m
            [2m19:41:41.891396 call      1577[0m     def parse_raw_obj(
            [2m19:41:41.891434 line      1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'minArray'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'minArray'][0m
                [2m19:41:41.891503 call      1585[0m     def parse_obj(
                [2m19:41:41.891550 line      1591[0m         if obj.is_array:
                [2m19:41:41.891578 line      1592[0m             self.parse_array(name, obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'minArray'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'minArray'][0m
                    [32m[2mStarting var:.. [22moriginal_name = None[0m
                    [2m19:41:41.891609 call      1209[0m     def parse_array(
                    [2m19:41:41.891658 line      1216[0m         if self.use_title_as_name and obj.title:
                    [2m19:41:41.891683 line      1218[0m         reference = self.model_resolver.add(path, name, loaded=True, class_name=True)
                    [32m[2mNew var:....... [22mreference = Reference(path='commons.json#/$defs/minArray', o...name=None, loaded=True, source=None, children=[])[0m
                    [2m19:41:41.891772 line      1219[0m         field = self.parse_array_fields(original_name or name, obj, [*path, name])
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'minArray'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'minArray', 'minArray'][0m
                        [32m[2mStarting var:.. [22msingular_name = True[0m
                        [2m19:41:41.891827 call      1152[0m     def parse_array_fields(
                        [2m19:41:41.891878 line      1159[0m         if self.force_optional_for_required_fields:
                        [2m19:41:41.891903 line      1163[0m             required = not (obj.has_default and self.apply_default_values_for_required_fields)
                        [32m[2mNew var:....... [22mrequired = True[0m
                        [2m19:41:41.891945 line      1164[0m             if self.strict_nullable:
                        [2m19:41:41.891976 line      1167[0m                 required = not obj.nullable and required
                        [2m19:41:41.892001 line      1168[0m                 nullable = None
                        [32m[2mNew var:....... [22mnullable = None[0m
                        [2m19:41:41.892026 line      1169[0m         if isinstance(obj.items, JsonSchemaObject):
                        [2m19:41:41.892058 line      1171[0m         elif isinstance(obj.items, list):
                        [2m19:41:41.892083 line      1174[0m             items = []
                        [32m[2mNew var:....... [22mitems = [][0m
                        [2m19:41:41.892106 line      1177[0m             self.data_type(
                        [2m19:41:41.892138 line      1178[0m                 data_types=self.parse_list_item(
                        [2m19:41:41.892164 line      1179[0m                     name,
                        [2m19:41:41.892188 line      1180[0m                     items,
                        [2m19:41:41.892212 line      1181[0m                     path,
                        [2m19:41:41.892236 line      1182[0m                     obj,
                        [2m19:41:41.892260 line      1183[0m                     singular_name=singular_name,
                        [2m19:41:41.892284 line      1178[0m                 data_types=self.parse_list_item(
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mname = 'minArray'[0m
                            [32m[2mStarting var:.. [22mtarget_items = [][0m
                            [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'minArray', 'minArray'][0m
                            [32m[2mStarting var:.. [22mparent = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [32m[2mStarting var:.. [22msingular_name = True[0m
                            [2m19:41:41.892314 call      1133[0m     def parse_list_item(
                            [2m19:41:41.892370 line      1149[0m             for index, item in enumerate(target_items)
                            [2m19:41:41.892394 line      1141[0m         return [
                            [2m19:41:41.892416 line      1149[0m             for index, item in enumerate(target_items)
                            [2m19:41:41.892439 line      1141[0m         return [
                            [2m19:41:41.892461 return    1141[0m         return [
                            [36m[2mReturn value:.. [22m[][0m
                            [33m[2mElapsed time: [22m00:00:00.000183[0m
                        [2m19:41:41.892508 line      1185[0m                 is_list=True,
                        [2m19:41:41.892535 line      1177[0m             self.data_type(
                        [2m19:41:41.892587 line      1176[0m         data_types: list[DataType] = [
                        [32m[2mNew var:....... [22mdata_types = [ContextDataType(type=None, reference=None, data...False, dict_key=None, treat_dot_as_module=False)][0m
                        [2m19:41:41.892614 line      1189[0m         if obj.allOf:
                        [2m19:41:41.892656 line      1191[0m         elif obj.is_object:
                        [2m19:41:41.892694 line      1193[0m         if obj.enum:
                        [2m19:41:41.892727 line      1195[0m         return self.data_model_field_type(
                        [2m19:41:41.892759 line      1196[0m             data_type=self.data_type(data_types=data_types),
                        [2m19:41:41.892818 line      1197[0m             default=obj.default,
                        [2m19:41:41.892854 line      1198[0m             required=required,
                        [2m19:41:41.892886 line      1199[0m             constraints=obj.dict(),
                        [2m19:41:41.892944 line      1200[0m             nullable=nullable,
                        [2m19:41:41.892977 line      1201[0m             strip_default_none=self.strip_default_none,
                        [2m19:41:41.893010 line      1202[0m             extras=self.get_field_extras(obj),
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [2m19:41:41.893047 call       565[0m     def get_field_extras(self, obj: JsonSchemaObject) -> dict[str, Any]:
                            [2m19:41:41.893080 line       566[0m         if self.field_include_all_keys:
                            [2m19:41:41.893102 line       574[0m                 for k, v in obj.extras.items()
                            [2m19:41:41.893122 line       572[0m             extras = {
                            [2m19:41:41.893142 line       574[0m                 for k, v in obj.extras.items()
                            [2m19:41:41.893162 line       572[0m             extras = {
                            [32m[2mNew var:....... [22mextras = {}[0m
                            [2m19:41:41.893181 line       577[0m         if self.default_field_extras:
                            [2m19:41:41.893206 line       579[0m         return extras
                            [2m19:41:41.893227 return     579[0m         return extras
                            [36m[2mReturn value:.. [22m{}[0m
                            [33m[2mElapsed time: [22m00:00:00.000216[0m
                        [2m19:41:41.893274 line      1203[0m             use_annotated=self.use_annotated,
                        [2m19:41:41.893311 line      1204[0m             use_field_description=self.use_field_description,
                        [2m19:41:41.893344 line      1205[0m             original_name=None,
                        [2m19:41:41.893376 line      1206[0m             has_default=obj.has_default,
                        [2m19:41:41.893408 line      1195[0m         return self.data_model_field_type(
                        [2m19:41:41.893482 return    1195[0m         return self.data_model_field_type(
                        [36m[2mReturn value:.. [22mREPR FAILED[0m
                        [33m[2mElapsed time: [22m00:00:00.003697[0m
                    [32m[2mNew var:....... [22mfield = REPR FAILED[0m
                    [2m19:41:41.895535 line      1221[0m         if reference in [d.reference for d in field.data_type.all_data_types if d.reference]:
                    [32m[2mNew var:....... [22md = ContextDataType(type=None, reference=None, data_...=False, dict_key=None, treat_dot_as_module=False)[0m
                    [2m19:41:41.897562 line      1221[0m         if reference in [d.reference for d in field.data_type.all_data_types if d.reference]:
                    [32m[2mModified var:.. [22md = REPR FAILED[0m
                    [2m19:41:41.899607 line      1221[0m         if reference in [d.reference for d in field.data_type.all_data_types if d.reference]:
                    [2m19:41:41.903572 line      1242[0m         data_model_root = self.data_model_root_type(
                    [2m19:41:41.905616 line      1243[0m             reference=reference,
                    [2m19:41:41.907626 line      1244[0m             fields=[field],
                    [2m19:41:41.909608 line      1245[0m             custom_base_class=obj.custom_base_path or self.base_class,
                    [2m19:41:41.911621 line      1246[0m             custom_template_dir=self.custom_template_dir,
                    [2m19:41:41.913653 line      1247[0m             extra_template_data=self.extra_template_data,
                    [2m19:41:41.915670 line      1248[0m             path=self.current_source_path,
                    [2m19:41:41.917795 line      1249[0m             description=obj.description if self.use_schema_description else None,
                    [2m19:41:41.919816 line      1250[0m             nullable=obj.type_has_null,
                    [2m19:41:41.921812 line      1251[0m             treat_dot_as_module=self.treat_dot_as_module,
                    [2m19:41:41.923841 line      1242[0m         data_model_root = self.data_model_root_type(
                    [32m[2mModified var:.. [22mreference = Reference(path='commons.json#/$defs/minArray', o...RootModel object at 0x7f80021b2ea0>, children=[])[0m
                    [32m[2mNew var:....... [22mdata_model_root = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
                    [2m19:41:41.925959 line      1253[0m         self.results.append(data_model_root)
                    [2m19:41:41.927951 line      1254[0m         return self.data_type(reference=reference)
                    [32m[2mModified var:.. [22mreference = Reference(path='commons.json#/$defs/minArray', o...alse, dict_key=None, treat_dot_as_module=False)])[0m
                    [2m19:41:41.930010 return    1254[0m         return self.data_type(reference=reference)
                    [36m[2mReturn value:.. [22mContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
                    [33m[2mElapsed time: [22m00:00:00.040489[0m
                [2m19:41:41.932110 line      1609[0m         self.parse_ref(obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'minArray'][0m
                    [2m19:41:41.932150 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.932194 line      1522[0m         if obj.ref:
                    [2m19:41:41.932219 line      1524[0m         if obj.items:
                    [2m19:41:41.932243 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.932269 line      1532[0m         if obj.patternProperties:
                    [2m19:41:41.932292 line      1535[0m         for item in obj.anyOf:
                    [2m19:41:41.932314 line      1537[0m         for item in obj.allOf:
                    [2m19:41:41.932338 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.932358 line      1541[0m         if obj.properties:
                    [2m19:41:41.932380 return    1541[0m         if obj.properties:
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.000266[0m
                [2m19:41:41.932424 return    1609[0m         self.parse_ref(obj, path)
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.040960[0m
            [2m19:41:41.932472 return    1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.041105[0m
        [2m19:41:41.932513 line      1727[0m                 for key, model in definitions.items():
        [32m[2mModified var:.. [22mkey = 'smallArray'[0m
        [32m[2mModified var:.. [22mmodel = {'$ref': '#/$defs/minArray', 'allOf': [{'$ref': '#/$defs/minArray'}]}[0m
        [2m19:41:41.932585 line      1728[0m                     path = [*path_parts, _schema_path, key]
        [32m[2mModified var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
        [2m19:41:41.932666 line      1729[0m                     reference = self.model_resolver.get(path)
        [32m[2mModified var:.. [22mreference = REPR FAILED[0m
        [2m19:41:41.932902 line      1730[0m                     if not reference or not reference.loaded:
        [2m19:41:41.934535 line      1731[0m                         self.parse_raw_obj(key, model, path)
            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
            [32m[2mStarting var:.. [22mname = 'smallArray'[0m
            [32m[2mStarting var:.. [22mraw = {'$ref': '#/$defs/minArray', 'allOf': [{'$ref': '#/$defs/minArray'}]}[0m
            [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
            [2m19:41:41.936138 call      1577[0m     def parse_raw_obj(
            [2m19:41:41.936182 line      1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
                [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                [32m[2mStarting var:.. [22mname = 'smallArray'[0m
                [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
                [2m19:41:41.936285 call      1585[0m     def parse_obj(
                [2m19:41:41.936351 line      1591[0m         if obj.is_array:
                [2m19:41:41.936392 line      1593[0m         elif obj.allOf:
                [2m19:41:41.936426 line      1594[0m             self.parse_all_of(name, obj, path)
[33m[2m                    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mname = 'smallArray'[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
                    [32m[2mStarting var:.. [22mignore_duplicate_model = False[0m
                    [2m19:41:41.936488 call       843[0m     def parse_all_of(
                    [2m19:41:41.936563 line       850[0m         if len(obj.allOf) == 1 and not obj.properties:
                    [2m19:41:41.936601 line       851[0m             single_obj = obj.allOf[0]
                    [32m[2mNew var:....... [22msingle_obj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [2m19:41:41.936638 line       853[0m                 single_obj.ref
                    [2m19:41:41.936687 line       854[0m                 and single_obj.ref_type == JSONReference.LOCAL
                    [2m19:41:41.936738 line       855[0m                 and get_model_by_path(self.raw_obj, single_obj.ref[2:].split("/")).get("enum")
                    [2m19:41:41.936809 line       858[0m         fields: list[DataModelFieldBase] = []
                    [32m[2mNew var:....... [22mfields = [][0m
                    [2m19:41:41.936854 line       859[0m         base_classes: list[Reference] = []
                    [32m[2mNew var:....... [22mbase_classes = [][0m
                    [2m19:41:41.936913 line       860[0m         required: list[str] = []
                    [32m[2mNew var:....... [22mrequired = [][0m
                    [2m19:41:41.936962 line       861[0m         union_models: list[Reference] = []
                    [32m[2mNew var:....... [22munion_models = [][0m
                    [2m19:41:41.937010 line       862[0m         self._parse_all_of_item(name, obj, path, fields, base_classes, required, union_models)
[33m[2m                        Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'smallArray'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
                        [32m[2mStarting var:.. [22mfields = [][0m
                        [32m[2mStarting var:.. [22mbase_classes = [][0m
                        [32m[2mStarting var:.. [22mrequired = [][0m
                        [32m[2mStarting var:.. [22munion_models = [][0m
                        [2m19:41:41.937077 call       802[0m     def _parse_all_of_item(  # noqa: PLR0913, PLR0917
                        [2m19:41:41.937165 line       812[0m         for all_of_item in obj.allOf:
                        [32m[2mNew var:....... [22mall_of_item = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [2m19:41:41.937200 line       813[0m             if all_of_item.ref:  # $ref
                        [2m19:41:41.937249 line       814[0m                 base_classes.append(self.model_resolver.add_ref(all_of_item.ref))
                        [32m[2mModified var:.. [22mbase_classes = [Reference(path='commons.json#/$defs/minArray', ...lse, dict_key=None, treat_dot_as_module=False)])][0m
                        [2m19:41:41.937353 line       812[0m         for all_of_item in obj.allOf:
                        [2m19:41:41.937425 return     812[0m         for all_of_item in obj.allOf:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000434[0m
                    [32m[2mModified var:.. [22mbase_classes = [Reference(path='commons.json#/$defs/minArray', ...lse, dict_key=None, treat_dot_as_module=False)])][0m
                    [2m19:41:41.937511 line       863[0m         if not union_models:
                    [2m19:41:41.937581 line       864[0m             return self._parse_object_common_part(
                    [2m19:41:41.937640 line       865[0m                 name, obj, path, ignore_duplicate_model, fields, base_classes, required
                    [2m19:41:41.937698 line       864[0m             return self._parse_object_common_part(
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mname = 'smallArray'[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
                        [32m[2mStarting var:.. [22mignore_duplicate_model = False[0m
                        [32m[2mStarting var:.. [22mfields = [][0m
                        [32m[2mStarting var:.. [22mbase_classes = [Reference(path='commons.json#/$defs/minArray', ...lse, dict_key=None, treat_dot_as_module=False)])][0m
                        [32m[2mStarting var:.. [22mrequired = [][0m
                        [2m19:41:41.937763 call       738[0m     def _parse_object_common_part(  # noqa: PLR0913, PLR0917
                        [2m19:41:41.937854 line       748[0m         if obj.properties:
                        [2m19:41:41.937903 line       755[0m         if ignore_duplicate_model and not fields and len(base_classes) == 1:
                        [2m19:41:41.937950 line       759[0m         if required:
                        [2m19:41:41.937996 line       767[0m         if obj.required:
                        [2m19:41:41.938045 line       781[0m         if self.use_title_as_name and obj.title:  # pragma: no cover
                        [2m19:41:41.938092 line       783[0m         reference = self.model_resolver.add(path, name, class_name=True, loaded=True)
                        [32m[2mNew var:....... [22mreference = REPR FAILED[0m
                        [2m19:41:41.938151 line       784[0m         self.set_additional_properties(reference.name, obj)
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mname = 'SmallArray'[0m
                            [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                            [2m19:41:41.939761 call       656[0m     def set_additional_properties(self, name: str, obj: JsonSchemaObject) -> None:
                            [2m19:41:41.939821 line       657[0m         if isinstance(obj.additionalProperties, bool):
                            [2m19:41:41.939855 return     657[0m         if isinstance(obj.additionalProperties, bool):
                            [36m[2mReturn value:.. [22mNone[0m
                            [33m[2mElapsed time: [22m00:00:00.000138[0m
                        [2m19:41:41.939910 line       786[0m         data_model_type = self._create_data_model(
                        [2m19:41:41.941477 line       787[0m             reference=reference,
                        [2m19:41:41.943028 line       788[0m             fields=fields,
                        [2m19:41:41.944586 line       789[0m             base_classes=base_classes,
                        [2m19:41:41.946193 line       790[0m             custom_base_class=obj.custom_base_path or self.base_class,
                        [2m19:41:41.947756 line       791[0m             custom_template_dir=self.custom_template_dir,
                        [2m19:41:41.949302 line       792[0m             extra_template_data=self.extra_template_data,
                        [2m19:41:41.950914 line       793[0m             path=self.current_source_path,
                        [2m19:41:41.952484 line       794[0m             description=obj.description if self.use_schema_description else None,
                        [2m19:41:41.954122 line       795[0m             keyword_only=self.keyword_only,
                        [2m19:41:41.955673 line       796[0m             treat_dot_as_module=self.treat_dot_as_module,
                        [2m19:41:41.957278 line       786[0m         data_model_type = self._create_data_model(
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mmodel_type = None[0m
                            [32m[2mStarting var:.. [22mkwargs = REPR FAILED[0m
                            [2m19:41:41.958903 call       731[0m     def _create_data_model(self, model_type: type[DataModel] | None = None, **kwargs: Any) -> DataModel:
                            [2m19:41:41.960491 line       733[0m         data_model_class = model_type or self.data_model_type
                            [32m[2mNew var:....... [22mdata_model_class = <class 'datamodel_code_generator.model.pydantic_v2.base_model.BaseModel'>[0m
                            [2m19:41:41.962094 line       734[0m         if issubclass(data_model_class, DataClass):
                            [2m19:41:41.963670 line       736[0m         return data_model_class(**kwargs)
                            [2m19:41:41.965326 return     736[0m         return data_model_class(**kwargs)
                            [36m[2mReturn value:.. [22m<datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
                            [33m[2mElapsed time: [22m00:00:00.008080[0m
                        [32m[2mModified var:.. [22mbase_classes = [Reference(path='commons.json#/$defs/minArray', ...base_model.BaseModel object at 0x7f80009f1b50>])][0m
                        [32m[2mNew var:....... [22mdata_model_type = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
                        [2m19:41:41.967007 line       798[0m         self.results.append(data_model_type)
                        [2m19:41:41.968705 line       800[0m         return self.data_type(reference=reference)
                        [2m19:41:41.970433 return     800[0m         return self.data_type(reference=reference)
                        [36m[2mReturn value:.. [22mREPR FAILED[0m
                        [33m[2mElapsed time: [22m00:00:00.035976[0m
                    [32m[2mModified var:.. [22mbase_classes = [Reference(path='commons.json#/$defs/minArray', ...base_model.BaseModel object at 0x7f80009f1b50>])][0m
                    [2m19:41:41.973764 return     864[0m             return self._parse_object_common_part(
                    [36m[2mReturn value:.. [22mREPR FAILED[0m
                    [33m[2mElapsed time: [22m00:00:00.039045[0m
                [2m19:41:41.975528 line      1609[0m         self.parse_ref(obj, path)
                    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                    [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
                    [2m19:41:41.975595 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                    [2m19:41:41.975652 line      1522[0m         if obj.ref:
                    [2m19:41:41.975686 line      1523[0m             self.resolve_ref(obj.ref)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobject_ref = '#/$defs/minArray'[0m
                        [2m19:41:41.975727 call      1482[0m     def resolve_ref(self, object_ref: str) -> Reference:
                        [2m19:41:41.975754 line      1483[0m         reference = self.model_resolver.add_ref(object_ref)
                        [32m[2mNew var:....... [22mreference = Reference(path='commons.json#/$defs/minArray', o....base_model.BaseModel object at 0x7f80009f1b50>])[0m
                        [2m19:41:41.975851 line      1484[0m         if reference.loaded:
                        [2m19:41:41.975906 line      1485[0m             return reference
                        [2m19:41:41.975947 return    1485[0m             return reference
                        [36m[2mReturn value:.. [22mReference(path='commons.json#/$defs/minArray', o....base_model.BaseModel object at 0x7f80009f1b50>])[0m
                        [33m[2mElapsed time: [22m00:00:00.000297[0m
                    [2m19:41:41.976032 line      1524[0m         if obj.items:
                    [2m19:41:41.976068 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                    [2m19:41:41.976123 line      1532[0m         if obj.patternProperties:
                    [2m19:41:41.976170 line      1535[0m         for item in obj.anyOf:
                    [2m19:41:41.976221 line      1537[0m         for item in obj.allOf:
                    [32m[2mNew var:....... [22mitem = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                    [2m19:41:41.976274 line      1538[0m             self.parse_ref(item, path)
                        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                        [32m[2mStarting var:.. [22mobj = JsonSchemaObject(items=None, uniqueItems=None, t...om_base_path=None, extras={}, discriminator=None)[0m
                        [32m[2mStarting var:.. [22mpath = ['commons.json', '#/$defs', 'smallArray'][0m
                        [2m19:41:41.976372 call      1521[0m     def parse_ref(self, obj: JsonSchemaObject, path: list[str]) -> None:  # noqa: PLR0912
                        [2m19:41:41.976443 line      1522[0m         if obj.ref:
                        [2m19:41:41.976470 line      1523[0m             self.resolve_ref(obj.ref)
                            [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
                            [32m[2mStarting var:.. [22mobject_ref = '#/$defs/minArray'[0m
                            [2m19:41:41.976505 call      1482[0m     def resolve_ref(self, object_ref: str) -> Reference:
                            [2m19:41:41.976533 line      1483[0m         reference = self.model_resolver.add_ref(object_ref)
                            [32m[2mNew var:....... [22mreference = Reference(path='commons.json#/$defs/minArray', o....base_model.BaseModel object at 0x7f80009f1b50>])[0m
                            [2m19:41:41.976630 line      1484[0m         if reference.loaded:
                            [2m19:41:41.976687 line      1485[0m             return reference
                            [2m19:41:41.976725 return    1485[0m             return reference
                            [36m[2mReturn value:.. [22mReference(path='commons.json#/$defs/minArray', o....base_model.BaseModel object at 0x7f80009f1b50>])[0m
                            [33m[2mElapsed time: [22m00:00:00.000298[0m
                        [2m19:41:41.976816 line      1524[0m         if obj.items:
                        [2m19:41:41.976843 line      1530[0m         if isinstance(obj.additionalProperties, JsonSchemaObject):
                        [2m19:41:41.976869 line      1532[0m         if obj.patternProperties:
                        [2m19:41:41.976894 line      1535[0m         for item in obj.anyOf:
                        [2m19:41:41.976916 line      1537[0m         for item in obj.allOf:
                        [2m19:41:41.976937 line      1539[0m         for item in obj.oneOf:
                        [2m19:41:41.976958 line      1541[0m         if obj.properties:
                        [2m19:41:41.976981 return    1541[0m         if obj.properties:
                        [36m[2mReturn value:.. [22mNone[0m
                        [33m[2mElapsed time: [22m00:00:00.000650[0m
                    [2m19:41:41.977026 line      1537[0m         for item in obj.allOf:
                    [2m19:41:41.977073 line      1539[0m         for item in obj.oneOf:
                    [2m19:41:41.977124 line      1541[0m         if obj.properties:
                    [2m19:41:41.977167 return    1541[0m         if obj.properties:
                    [36m[2mReturn value:.. [22mNone[0m
                    [33m[2mElapsed time: [22m00:00:00.001628[0m
                [2m19:41:41.977230 return    1609[0m         self.parse_ref(obj, path)
                [36m[2mReturn value:.. [22mNone[0m
                [33m[2mElapsed time: [22m00:00:00.040992[0m
            [2m19:41:41.977285 return    1583[0m         self.parse_obj(name, self.SCHEMA_OBJECT_TYPE.model_validate(raw), path)
            [36m[2mReturn value:.. [22mNone[0m
            [33m[2mElapsed time: [22m00:00:00.041178[0m
        [2m19:41:41.977327 line      1727[0m                 for key, model in definitions.items():
        [2m19:41:41.980531 line      1733[0m                 key = tuple(path_parts)
        [32m[2mModified var:.. [22mkey = ('commons.json',)[0m
        [2m19:41:41.983511 line      1734[0m                 reserved_refs = set(self.reserved_refs.get(key) or [])
        [32m[2mNew var:....... [22mreserved_refs = {'commons.json#/$defs/smallArray'}[0m
        [2m19:41:41.986329 line      1735[0m                 while reserved_refs:
        [2m19:41:41.987910 line      1736[0m                     for reserved_path in sorted(reserved_refs):
        [32m[2mNew var:....... [22mreserved_path = 'commons.json#/$defs/smallArray'[0m
        [2m19:41:41.989467 line      1737[0m                         reference = self.model_resolver.get(reserved_path)
        [2m19:41:41.991293 line      1738[0m                         if not reference or reference.loaded:
        [2m19:41:41.992928 line      1739[0m                             continue
        [2m19:41:41.994514 line      1736[0m                     for reserved_path in sorted(reserved_refs):
        [2m19:41:41.996095 line      1745[0m                     previous_reserved_refs = reserved_refs
        [32m[2mNew var:....... [22mprevious_reserved_refs = {'commons.json#/$defs/smallArray'}[0m
        [2m19:41:41.997672 line      1746[0m                     reserved_refs = set(self.reserved_refs.get(key) or [])
        [2m19:41:41.999296 line      1747[0m                     if previous_reserved_refs == reserved_refs:
        [2m19:41:42.000925 line      1748[0m                         break
        [2m19:41:42.002523 line      1699[0m             with self.root_id_context(raw):
        [2m19:41:42.004123 line      1697[0m         with self.model_resolver.current_root_context(path_parts):
        [2m19:41:42.005703 return    1697[0m         with self.model_resolver.current_root_context(path_parts):
        [36m[2mReturn value:.. [22mNone[0m
        [33m[2mElapsed time: [22m00:00:00.165415[0m
    [2m19:41:42.007371 line      1632[0m         for source, path_parts in self._get_context_source_path_parts():
        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
        [32m[2mStarting var:.. [22msource = Source(path=PosixPath('commons.json'), text='{\n...aft/2020-12/schema",\n  "title": "commons"\n}\n')[0m
        [32m[2mStarting var:.. [22mpath_parts = ['commons.json'][0m
        [2m19:41:42.007422 call      1629[0m                 yield source, path_parts
        [2m19:41:42.007464 line      1627[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:42.007490 line      1626[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:42.007515 line      1618[0m         for source in self.iter_source:
        [2m19:41:42.007536 return    1618[0m         for source in self.iter_source:
        [36m[2mReturn value:.. [22mNone[0m
        [33m[2mElapsed time: [22m00:00:00.000148[0m
    [2m19:41:42.007577 exception 1632[0m         for source, path_parts in self._get_context_source_path_parts():
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.007659 line      1651[0m         self._resolve_unparsed_json_pointer()
[33m[2m        Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/jsonschema.py[0m
        [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
        [2m19:41:42.007700 call      1653[0m     def _resolve_unparsed_json_pointer(self) -> None:
        [2m19:41:42.007729 line      1654[0m         model_count: int = len(self.results)
        [32m[2mNew var:....... [22mmodel_count = 10[0m
        [2m19:41:42.007741 line      1655[0m         for source in self.iter_source:
        [32m[2mNew var:....... [22msource = Source(path=PosixPath('aaaschema.json'), text='{...n  "title": "animals",\n  "type": "object"\n}\n')[0m
        [2m19:41:42.008030 line      1656[0m             path_parts = list(source.path.parts)
        [32m[2mNew var:....... [22mpath_parts = ['aaaschema.json'][0m
        [2m19:41:42.008074 line      1657[0m             reserved_refs = self.reserved_refs.get(tuple(path_parts))
        [32m[2mNew var:....... [22mreserved_refs = {'aaaschema.json#/$defs/dog', 'aaaschema.json#/$defs/AllowedAnimals', 'aaaschema.json#/$defs/cat'}[0m
        [2m19:41:42.008110 line      1658[0m             if not reserved_refs:
        [2m19:41:42.008138 line      1660[0m             if self.current_source_path is not None:
        [2m19:41:42.008159 line      1661[0m                 self.current_source_path = source.path
        [2m19:41:42.008178 line      1664[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:42.008268 line      1665[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:42.008302 line      1667[0m                 for reserved_ref in sorted(reserved_refs):
        [32m[2mNew var:....... [22mreserved_ref = 'aaaschema.json#/$defs/AllowedAnimals'[0m
        [2m19:41:42.008325 line      1668[0m                     if self.model_resolver.add_ref(reserved_ref, resolved=True).loaded:
        [2m19:41:42.008356 line      1669[0m                         continue
        [2m19:41:42.008377 line      1667[0m                 for reserved_ref in sorted(reserved_refs):
        [32m[2mModified var:.. [22mreserved_ref = 'aaaschema.json#/$defs/cat'[0m
        [2m19:41:42.008397 line      1668[0m                     if self.model_resolver.add_ref(reserved_ref, resolved=True).loaded:
        [2m19:41:42.008424 line      1669[0m                         continue
        [2m19:41:42.008445 line      1667[0m                 for reserved_ref in sorted(reserved_refs):
        [32m[2mModified var:.. [22mreserved_ref = 'aaaschema.json#/$defs/dog'[0m
        [2m19:41:42.008464 line      1668[0m                     if self.model_resolver.add_ref(reserved_ref, resolved=True).loaded:
        [2m19:41:42.008491 line      1669[0m                         continue
        [2m19:41:42.008511 line      1667[0m                 for reserved_ref in sorted(reserved_refs):
        [2m19:41:42.008530 line      1665[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:42.008556 line      1664[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:42.008582 line      1655[0m         for source in self.iter_source:
        [32m[2mModified var:.. [22msource = Source(path=PosixPath('bug.json'), text='{\n  "$...dAnimals" }\n    }\n  },\n  "title": "bug"\n}\n')[0m
        [2m19:41:42.008677 line      1656[0m             path_parts = list(source.path.parts)
        [32m[2mModified var:.. [22mpath_parts = ['bug.json'][0m
        [2m19:41:42.008712 line      1657[0m             reserved_refs = self.reserved_refs.get(tuple(path_parts))
        [32m[2mModified var:.. [22mreserved_refs = {'bug.json#/$defs/AllowedAnimals'}[0m
        [2m19:41:42.008740 line      1658[0m             if not reserved_refs:
        [2m19:41:42.008764 line      1660[0m             if self.current_source_path is not None:
        [2m19:41:42.008783 line      1661[0m                 self.current_source_path = source.path
        [2m19:41:42.008808 line      1664[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:42.008890 line      1665[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:42.008924 line      1667[0m                 for reserved_ref in sorted(reserved_refs):
        [32m[2mModified var:.. [22mreserved_ref = 'bug.json#/$defs/AllowedAnimals'[0m
        [2m19:41:42.008944 line      1668[0m                     if self.model_resolver.add_ref(reserved_ref, resolved=True).loaded:
        [2m19:41:42.008970 line      1669[0m                         continue
        [2m19:41:42.008988 line      1667[0m                 for reserved_ref in sorted(reserved_refs):
        [2m19:41:42.009005 line      1665[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:42.009031 line      1664[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:42.009053 line      1655[0m         for source in self.iter_source:
        [32m[2mModified var:.. [22msource = Source(path=PosixPath('commons.json'), text='{\n...aft/2020-12/schema",\n  "title": "commons"\n}\n')[0m
        [2m19:41:42.009136 line      1656[0m             path_parts = list(source.path.parts)
        [32m[2mModified var:.. [22mpath_parts = ['commons.json'][0m
        [2m19:41:42.009174 line      1657[0m             reserved_refs = self.reserved_refs.get(tuple(path_parts))
        [32m[2mModified var:.. [22mreserved_refs = {'commons.json#/$defs/smallArray'}[0m
        [2m19:41:42.009200 line      1658[0m             if not reserved_refs:
        [2m19:41:42.009224 line      1660[0m             if self.current_source_path is not None:
        [2m19:41:42.009243 line      1661[0m                 self.current_source_path = source.path
        [2m19:41:42.009261 line      1664[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:42.009335 line      1665[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:42.009365 line      1667[0m                 for reserved_ref in sorted(reserved_refs):
        [32m[2mModified var:.. [22mreserved_ref = 'commons.json#/$defs/smallArray'[0m
        [2m19:41:42.009386 line      1668[0m                     if self.model_resolver.add_ref(reserved_ref, resolved=True).loaded:
        [2m19:41:42.009413 line      1669[0m                         continue
        [2m19:41:42.009432 line      1667[0m                 for reserved_ref in sorted(reserved_refs):
        [2m19:41:42.009450 line      1665[0m                 self.model_resolver.current_root_context(path_parts),
        [2m19:41:42.009474 line      1664[0m                 self.model_resolver.current_base_path_context(source.path.parent),
        [2m19:41:42.009497 line      1655[0m         for source in self.iter_source:
        [2m19:41:42.009521 exception 1655[0m         for source in self.iter_source:
        [31mException:..... [1mStopIteration[0m
        [2m19:41:42.009577 line      1674[0m         if model_count != len(self.results):
        [2m19:41:42.009601 return    1674[0m         if model_count != len(self.results):
        [36m[2mReturn value:.. [22mNone[0m
        [33m[2mElapsed time: [22m00:00:00.001949[0m
    [2m19:41:42.009648 return    1651[0m         self._resolve_unparsed_json_pointer()
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.468034[0m
[2m19:41:42.009698 line      1246[0m         if with_import:
[2m19:41:42.009722 line      1247[0m             self.imports.append(IMPORT_ANNOTATIONS)
[2m19:41:42.009758 line      1249[0m         if format_:
[2m19:41:42.009777 line      1250[0m             code_formatter: CodeFormatter | None = CodeFormatter(
[2m19:41:42.009794 line      1251[0m                 self.target_python_version,
[2m19:41:42.009820 line      1252[0m                 settings_path,
[2m19:41:42.009838 line      1253[0m                 self.wrap_string_literal,
[2m19:41:42.009857 line      1254[0m                 skip_string_normalization=not self.use_double_quotes,
[2m19:41:42.009874 line      1255[0m                 known_third_party=self.known_third_party,
[2m19:41:42.009891 line      1256[0m                 custom_formatters=self.custom_formatter,
[2m19:41:42.009909 line      1257[0m                 custom_formatters_kwargs=self.custom_formatters_kwargs,
[2m19:41:42.009926 line      1258[0m                 encoding=self.encoding,
[2m19:41:42.009944 line      1259[0m                 formatters=self.formatters,
[2m19:41:42.009961 line      1250[0m             code_formatter: CodeFormatter | None = CodeFormatter(
[32m[2mNew var:....... [22mcode_formatter = <datamodel_code_generator.format.CodeFormatter object at 0x7f80009e1be0>[0m
[2m19:41:42.011077 line      1264[0m         _, sorted_data_models, require_update_action_models = sort_data_models(self.results)
[32m[2mNew var:....... [22m_ = [][0m
[32m[2mNew var:....... [22msorted_data_models = OrderedDict({'aaaschema.json#/$defs/cat': <datam....root_model.RootModel object at 0x7f80009e1a90>})[0m
[32m[2mNew var:....... [22mrequire_update_action_models = [][0m
[2m19:41:42.011313 line      1266[0m         results: dict[tuple[str, ...], Result] = {}
[32m[2mNew var:....... [22mresults = {}[0m
[2m19:41:42.011376 line      1268[0m         def module_key(data_model: DataModel) -> tuple[str, ...]:
[32m[2mNew var:....... [22mmodule_key = <function Parser.parse.<locals>.module_key at 0x7f80019067a0>[0m
[2m19:41:42.011420 line      1271[0m         def sort_key(data_model: DataModel) -> tuple[int, tuple[str, ...]]:
[32m[2mNew var:....... [22msort_key = <function Parser.parse.<locals>.sort_key at 0x7f8001907ec0>[0m
[2m19:41:42.011460 line      1275[0m         grouped_models = groupby(
[2m19:41:42.011497 line      1276[0m             sorted(sorted_data_models.values(), key=sort_key, reverse=True),
[2m19:41:42.011885 line      1277[0m             key=module_key,
[2m19:41:42.011928 line      1275[0m         grouped_models = groupby(
[32m[2mNew var:....... [22mgrouped_models = <itertools.groupby object at 0x7f800199ba00>[0m
[2m19:41:42.011962 line      1280[0m         module_models: list[tuple[tuple[str, ...], list[DataModel]]] = []
[32m[2mNew var:....... [22mmodule_models = [][0m
[2m19:41:42.011998 line      1281[0m         unused_models: list[DataModel] = []
[32m[2mNew var:....... [22munused_models = [][0m
[2m19:41:42.012034 line      1282[0m         model_to_module_models: dict[DataModel, tuple[tuple[str, ...], list[DataModel]]] = {}
[32m[2mNew var:....... [22mmodel_to_module_models = {}[0m
[2m19:41:42.012069 line      1283[0m         module_to_import: dict[tuple[str, ...], Imports] = {}
[32m[2mNew var:....... [22mmodule_to_import = {}[0m
[2m19:41:42.012104 line      1285[0m         previous_module: tuple[str, ...] = ()
[32m[2mNew var:....... [22mprevious_module = ()[0m
[2m19:41:42.012139 line      1286[0m         for module, models in ((k, [*v]) for k, v in grouped_models):
[32m[2mNew var:....... [22mmodule = ('commons',)[0m
[32m[2mNew var:....... [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
[2m19:41:42.012222 line      1287[0m             for model in models:
[32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
[2m19:41:42.012271 line      1288[0m                 model_to_module_models[model] = module, models
[32m[2mModified var:.. [22mmodel_to_module_models = {<datamodel_code_generator.model.pydantic_v2.roo...base_model.BaseModel object at 0x7f80009f1b50>])}[0m
[2m19:41:42.012313 line      1287[0m             for model in models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
[2m19:41:42.012356 line      1288[0m                 model_to_module_models[model] = module, models
[2m19:41:42.012398 line      1287[0m             for model in models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
[2m19:41:42.012437 line      1288[0m                 model_to_module_models[model] = module, models
[2m19:41:42.012481 line      1287[0m             for model in models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
[2m19:41:42.012521 line      1288[0m                 model_to_module_models[model] = module, models
[2m19:41:42.012565 line      1287[0m             for model in models:
[2m19:41:42.012607 line      1289[0m             self.__delete_duplicate_models(models)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [2m19:41:42.012677 call       556[0m     def __delete_duplicate_models(self, models: list[DataModel]) -> None:  # noqa: PLR0912
    [2m19:41:42.012719 line       557[0m         model_class_names: dict[str, DataModel] = {}
    [32m[2mNew var:....... [22mmodel_class_names = {}[0m
    [2m19:41:42.012735 line       558[0m         model_to_duplicate_models: defaultdict[DataModel, list[DataModel]] = defaultdict(list)
    [32m[2mNew var:....... [22mmodel_to_duplicate_models = defaultdict(<class 'list'>, {})[0m
    [2m19:41:42.012756 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
    [2m19:41:42.012778 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.012805 line       561[0m                 root_data_type = model.fields[0].data_type
    [32m[2mNew var:....... [22mroot_data_type = ContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.012827 line       566[0m                     root_data_type.reference
    [2m19:41:42.012871 line       583[0m                 for child in model.reference.children:
    [32m[2mNew var:....... [22mchild = ContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.012902 line       585[0m                     if isinstance(child, DataModel):
    [2m19:41:42.013013 line       583[0m                 for child in model.reference.children:
    [2m19:41:42.013063 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mNew var:....... [22mclass_name = 'Commons'[0m
    [2m19:41:42.013118 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.013172 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Commons': <datamodel_code_generator.model.pyda...2.root_model.RootModel object at 0x7f8000955d10>}[0m
    [2m19:41:42.013220 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
    [2m19:41:42.013271 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.013322 line       561[0m                 root_data_type = model.fields[0].data_type
    [32m[2mModified var:.. [22mroot_data_type = REPR FAILED[0m
    [2m19:41:42.013368 line       566[0m                     root_data_type.reference
    [2m19:41:42.015619 line       583[0m                 for child in model.reference.children:
    [2m19:41:42.018762 line       585[0m                     if isinstance(child, DataModel):
    [2m19:41:42.020851 line       583[0m                 for child in model.reference.children:
    [2m19:41:42.022887 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mModified var:.. [22mclass_name = 'MaxArray'[0m
    [2m19:41:42.024886 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.026919 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Commons': <datamodel_code_generator.model.pyda...2.root_model.RootModel object at 0x7f8000955e50>}[0m
    [2m19:41:42.028872 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
    [2m19:41:42.030973 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.033049 line       561[0m                 root_data_type = model.fields[0].data_type
    [2m19:41:42.035104 line       566[0m                     root_data_type.reference
    [2m19:41:42.037171 line       583[0m                 for child in model.reference.children:
    [2m19:41:42.039261 line       585[0m                     if isinstance(child, DataModel):
    [2m19:41:42.041382 line       583[0m                 for child in model.reference.children:
    [32m[2mModified var:.. [22mchild = BaseClassDataType(type=None, reference=Reference...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.043461 line       585[0m                     if isinstance(child, DataModel):
    [2m19:41:42.045606 line       583[0m                 for child in model.reference.children:
    [32m[2mModified var:.. [22mchild = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.047698 line       585[0m                     if isinstance(child, DataModel):
    [2m19:41:42.049809 line       586[0m                         for base_class in child.base_classes[:]:
    [32m[2mNew var:....... [22mbase_class = BaseClassDataType(type=None, reference=Reference...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.051913 line       587[0m                             if base_class.reference == model.reference:
    [2m19:41:42.054059 line       588[0m                                 child.base_classes.remove(base_class)
    [2m19:41:42.056270 line       586[0m                         for base_class in child.base_classes[:]:
    [2m19:41:42.058683 line       589[0m                         if not child.base_classes:  # pragma: no cover
    [2m19:41:42.060772 line       590[0m                             child.set_base_class()
    [2m19:41:42.062894 line       583[0m                 for child in model.reference.children:
    [2m19:41:42.065068 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mModified var:.. [22mclass_name = 'MinArray'[0m
    [2m19:41:42.067433 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.069559 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Commons': <datamodel_code_generator.model.pyda...2.root_model.RootModel object at 0x7f80021b2ea0>}[0m
    [2m19:41:42.071916 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.074110 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.076234 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mModified var:.. [22mclass_name = 'SmallArray'[0m
    [2m19:41:42.078389 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.080466 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Commons': <datamodel_code_generator.model.pyda...2.base_model.BaseModel object at 0x7f80009f1b50>}[0m
    [2m19:41:42.082941 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [2m19:41:42.085088 line       613[0m         for model, duplicate_models in model_to_duplicate_models.items():
    [2m19:41:42.087236 return     613[0m         for model, duplicate_models in model_to_duplicate_models.items():
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.076679[0m
[2m19:41:42.089359 line      1290[0m             self.__replace_duplicate_name_in_module(models)
[2m19:41:42.090125 line      1291[0m             if len(previous_module) - len(module) > 1:
[2m19:41:42.090198 line      1299[0m             module_models.append((
[2m19:41:42.090248 line      1300[0m                 module,
[2m19:41:42.090297 line      1301[0m                 models,
[2m19:41:42.090343 line      1299[0m             module_models.append((
[32m[2mModified var:.. [22mmodule_models = [(('commons',), [<datamodel_code_generator.model...base_model.BaseModel object at 0x7f80009f1b50>])][0m
[2m19:41:42.090389 line      1303[0m             previous_module = module
[32m[2mModified var:.. [22mprevious_module = ('commons',)[0m
[2m19:41:42.090444 line      1286[0m         for module, models in ((k, [*v]) for k, v in grouped_models):
[32m[2mModified var:.. [22mmodule = ('bug',)[0m
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
[2m19:41:42.090531 line      1287[0m             for model in models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
[2m19:41:42.090597 line      1288[0m                 model_to_module_models[model] = module, models
[32m[2mModified var:.. [22mmodel_to_module_models = {<datamodel_code_generator.model.pydantic_v2.roo...base_model.BaseModel object at 0x7f80021b2fd0>])}[0m
[2m19:41:42.090652 line      1287[0m             for model in models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
[2m19:41:42.090707 line      1288[0m                 model_to_module_models[model] = module, models
[2m19:41:42.090763 line      1287[0m             for model in models:
[2m19:41:42.090819 line      1289[0m             self.__delete_duplicate_models(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [2m19:41:42.090880 call       556[0m     def __delete_duplicate_models(self, models: list[DataModel]) -> None:  # noqa: PLR0912
    [2m19:41:42.090910 line       557[0m         model_class_names: dict[str, DataModel] = {}
    [32m[2mNew var:....... [22mmodel_class_names = {}[0m
    [2m19:41:42.090927 line       558[0m         model_to_duplicate_models: defaultdict[DataModel, list[DataModel]] = defaultdict(list)
    [32m[2mNew var:....... [22mmodel_to_duplicate_models = defaultdict(<class 'list'>, {})[0m
    [2m19:41:42.090949 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
    [2m19:41:42.090973 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.091001 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mNew var:....... [22mclass_name = 'Bug'[0m
    [2m19:41:42.091028 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.091051 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Bug': <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>}[0m
    [2m19:41:42.091070 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
    [2m19:41:42.091093 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.091118 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mModified var:.. [22mclass_name = 'AllowedAnimals'[0m
    [2m19:41:42.091138 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.091167 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Bug': <datamodel_code_generator.model.pydantic...2.base_model.BaseModel object at 0x7f80021b2fd0>}[0m
    [2m19:41:42.091186 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [2m19:41:42.091209 line       613[0m         for model, duplicate_models in model_to_duplicate_models.items():
    [2m19:41:42.091228 return     613[0m         for model, duplicate_models in model_to_duplicate_models.items():
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000386[0m
[2m19:41:42.091280 line      1290[0m             self.__replace_duplicate_name_in_module(models)
[2m19:41:42.091576 line      1291[0m             if len(previous_module) - len(module) > 1:
[2m19:41:42.091640 line      1299[0m             module_models.append((
[2m19:41:42.091694 line      1300[0m                 module,
[2m19:41:42.091746 line      1301[0m                 models,
[2m19:41:42.091794 line      1299[0m             module_models.append((
[32m[2mModified var:.. [22mmodule_models = [(('commons',), [<datamodel_code_generator.model...base_model.BaseModel object at 0x7f80021b2fd0>])][0m
[2m19:41:42.091849 line      1303[0m             previous_module = module
[32m[2mModified var:.. [22mprevious_module = ('bug',)[0m
[2m19:41:42.091906 line      1286[0m         for module, models in ((k, [*v]) for k, v in grouped_models):
[32m[2mModified var:.. [22mmodule = ('aaaschema',)[0m
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
[2m19:41:42.091997 line      1287[0m             for model in models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
[2m19:41:42.092065 line      1288[0m                 model_to_module_models[model] = module, models
[32m[2mModified var:.. [22mmodel_to_module_models = {<datamodel_code_generator.model.pydantic_v2.roo...root_model.RootModel object at 0x7f80009e1a90>])}[0m
[2m19:41:42.092122 line      1287[0m             for model in models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
[2m19:41:42.092179 line      1288[0m                 model_to_module_models[model] = module, models
[2m19:41:42.092234 line      1287[0m             for model in models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
[2m19:41:42.092285 line      1288[0m                 model_to_module_models[model] = module, models
[2m19:41:42.092342 line      1287[0m             for model in models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
[2m19:41:42.092395 line      1288[0m                 model_to_module_models[model] = module, models
[2m19:41:42.092453 line      1287[0m             for model in models:
[2m19:41:42.092508 line      1289[0m             self.__delete_duplicate_models(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [2m19:41:42.092570 call       556[0m     def __delete_duplicate_models(self, models: list[DataModel]) -> None:  # noqa: PLR0912
    [2m19:41:42.092599 line       557[0m         model_class_names: dict[str, DataModel] = {}
    [32m[2mNew var:....... [22mmodel_class_names = {}[0m
    [2m19:41:42.092615 line       558[0m         model_to_duplicate_models: defaultdict[DataModel, list[DataModel]] = defaultdict(list)
    [32m[2mNew var:....... [22mmodel_to_duplicate_models = defaultdict(<class 'list'>, {})[0m
    [2m19:41:42.092640 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
    [2m19:41:42.092662 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.092690 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mNew var:....... [22mclass_name = 'Cat'[0m
    [2m19:41:42.092711 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.092735 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Cat': <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>}[0m
    [2m19:41:42.092753 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
    [2m19:41:42.092777 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.092804 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mModified var:.. [22mclass_name = 'Dog'[0m
    [2m19:41:42.092824 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.092846 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Cat': <datamodel_code_generator.model.pydantic...2.base_model.BaseModel object at 0x7f8000955bd0>}[0m
    [2m19:41:42.092863 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
    [2m19:41:42.092887 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.092911 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mModified var:.. [22mclass_name = 'Animals'[0m
    [2m19:41:42.092932 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.092955 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Cat': <datamodel_code_generator.model.pydantic...2.base_model.BaseModel object at 0x7f80009e17f0>}[0m
    [2m19:41:42.092974 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
    [2m19:41:42.092997 line       560[0m             if isinstance(model, self.data_model_root_type):
    [2m19:41:42.093020 line       561[0m                 root_data_type = model.fields[0].data_type
    [32m[2mNew var:....... [22mroot_data_type = REPR FAILED[0m
    [2m19:41:42.093040 line       566[0m                     root_data_type.reference
    [2m19:41:42.094442 line       583[0m                 for child in model.reference.children:
    [32m[2mNew var:....... [22mchild = ContextDataType(type=None, reference=Reference(p...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.095625 line       585[0m                     if isinstance(child, DataModel):
    [2m19:41:42.096875 line       583[0m                 for child in model.reference.children:
    [2m19:41:42.098063 line       592[0m             class_name = model.duplicate_class_name or model.class_name
    [32m[2mModified var:.. [22mclass_name = 'AllowedAnimals'[0m
    [2m19:41:42.099332 line       593[0m             if class_name in model_class_names:
    [2m19:41:42.100544 line       612[0m             model_class_names[class_name] = model
    [32m[2mModified var:.. [22mmodel_class_names = {'Cat': <datamodel_code_generator.model.pydantic...2.root_model.RootModel object at 0x7f80009e1a90>}[0m
    [2m19:41:42.101711 line       559[0m         for model in models.copy():  # noqa: PLR1702
    [2m19:41:42.102959 line       613[0m         for model, duplicate_models in model_to_duplicate_models.items():
    [2m19:41:42.104267 return     613[0m         for model, duplicate_models in model_to_duplicate_models.items():
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.013051[0m
[2m19:41:42.105653 line      1290[0m             self.__replace_duplicate_name_in_module(models)
[2m19:41:42.106347 line      1291[0m             if len(previous_module) - len(module) > 1:
[2m19:41:42.106431 line      1299[0m             module_models.append((
[2m19:41:42.106501 line      1300[0m                 module,
[2m19:41:42.106564 line      1301[0m                 models,
[2m19:41:42.106627 line      1299[0m             module_models.append((
[32m[2mModified var:.. [22mmodule_models = [(('commons',), [<datamodel_code_generator.model...root_model.RootModel object at 0x7f80009e1a90>])][0m
[2m19:41:42.106688 line      1303[0m             previous_module = module
[32m[2mModified var:.. [22mprevious_module = ('aaaschema',)[0m
[2m19:41:42.106756 line      1286[0m         for module, models in ((k, [*v]) for k, v in grouped_models):
[2m19:41:42.106832 line      1305[0m         class Processed(NamedTuple):
[32m[2mNew var:....... [22mProcessed = <class 'datamodel_code_generator.parser.base.Parser.parse.<locals>.Processed'>[0m
[2m19:41:42.107247 line      1312[0m         processed_models: list[Processed] = []
[32m[2mNew var:....... [22mprocessed_models = [][0m
[2m19:41:42.107329 line      1314[0m         for module_, models in module_models:
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
[32m[2mNew var:....... [22mmodule_ = ('commons',)[0m
[2m19:41:42.107398 line      1315[0m             imports = module_to_import[module_] = Imports(self.use_exact_imports)
[32m[2mModified var:.. [22mmodule_to_import = {('commons',): Imports(<class 'set'>, {})}[0m
[32m[2mNew var:....... [22mimports = Imports(<class 'set'>, {})[0m
[2m19:41:42.107483 line      1316[0m             init = False
[32m[2mNew var:....... [22minit = False[0m
[2m19:41:42.107561 line      1317[0m             if module_:
[2m19:41:42.107634 line      1318[0m                 parent = (*module_[:-1], "__init__.py")
[32m[2mNew var:....... [22mparent = ('__init__.py',)[0m
[2m19:41:42.107700 line      1319[0m                 if parent not in results:
[2m19:41:42.107771 line      1320[0m                     results[parent] = Result(body="")
[32m[2mModified var:.. [22mresults = {('__init__.py',): Result(body='', source=None)}[0m
[2m19:41:42.107853 line      1321[0m                 if (*module_, "__init__.py") in results:
[2m19:41:42.107938 line      1325[0m                     module = tuple(part.replace("-", "_") for part in (*module_[:-1], f"{module_[-1]}.py"))
[32m[2mModified var:.. [22mmodule = ('commons.py',)[0m
[2m19:41:42.108017 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
[32m[2mNew var:....... [22mfield = DataModelField(name=None, default=None, required...one_literal_as_default=False, type_has_null=None)[0m
[2m19:41:42.108098 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[2m19:41:42.108218 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
[32m[2mModified var:.. [22mfield = REPR FAILED[0m
[2m19:41:42.108314 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[2m19:41:42.110558 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
[2m19:41:42.112651 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[2m19:41:42.115023 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
[2m19:41:42.117855 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
[32m[2mNew var:....... [22mall_module_fields = set()[0m
[2m19:41:42.120044 line      1330[0m             scoped_model_resolver = ModelResolver(exclude_names=all_module_fields)
[32m[2mNew var:....... [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80021b3100>[0m
[2m19:41:42.120225 line      1332[0m             self.__alias_shadowed_imports(models, all_module_fields)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [32m[2mStarting var:.. [22mall_model_field_names = set()[0m
    [2m19:41:42.120329 call      1217[0m     def __alias_shadowed_imports(  # noqa: PLR6301
    [2m19:41:42.120377 line      1222[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
    [2m19:41:42.120393 line      1223[0m             for model_field in model.fields:
    [32m[2mNew var:....... [22mmodel_field = DataModelField(name=None, default=None, required...one_literal_as_default=False, type_has_null=None)[0m
    [2m19:41:42.120414 line      1225[0m                     model_field.data_type.type in all_model_field_names
    [2m19:41:42.120475 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.120514 line      1222[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
    [2m19:41:42.120551 line      1223[0m             for model_field in model.fields:
    [32m[2mModified var:.. [22mmodel_field = REPR FAILED[0m
    [2m19:41:42.120593 line      1225[0m                     model_field.data_type.type in all_model_field_names
    [2m19:41:42.122769 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.124764 line      1222[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
    [2m19:41:42.126783 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.128798 line      1225[0m                     model_field.data_type.type in all_model_field_names
    [2m19:41:42.130798 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.132829 line      1222[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.135001 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.137098 line      1222[0m         for model in models:
    [2m19:41:42.139253 return    1222[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.021061[0m
[2m19:41:42.141410 line      1333[0m             self.__override_required_field(models)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [2m19:41:42.141557 call      1062[0m     def __override_required_field(
    [2m19:41:42.141601 line      1066[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
    [2m19:41:42.141617 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.141662 line      1068[0m                 continue
    [2m19:41:42.141680 line      1066[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
    [2m19:41:42.141693 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.141718 line      1068[0m                 continue
    [2m19:41:42.141731 line      1066[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
    [2m19:41:42.141746 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.141766 line      1068[0m                 continue
    [2m19:41:42.141779 line      1066[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.141793 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.141824 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [2m19:41:42.141843 line      1066[0m         for model in models:
    [2m19:41:42.141856 return    1066[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000345[0m
[2m19:41:42.141909 line      1334[0m             self.__replace_unique_list_to_set(models)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [2m19:41:42.142010 call       856[0m     def __replace_unique_list_to_set(self, models: list[DataModel]) -> None:
    [2m19:41:42.142045 line       857[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
    [2m19:41:42.142060 line       858[0m             for model_field in model.fields:
    [32m[2mNew var:....... [22mmodel_field = DataModelField(name=None, default=None, required...one_literal_as_default=False, type_has_null=None)[0m
    [2m19:41:42.142079 line       859[0m                 if not self.use_unique_items_as_set:
    [2m19:41:42.142144 line       860[0m                     continue
    [2m19:41:42.142183 line       858[0m             for model_field in model.fields:
    [2m19:41:42.142220 line       857[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
    [2m19:41:42.142254 line       858[0m             for model_field in model.fields:
    [32m[2mModified var:.. [22mmodel_field = REPR FAILED[0m
    [2m19:41:42.142293 line       859[0m                 if not self.use_unique_items_as_set:
    [2m19:41:42.144436 line       860[0m                     continue
    [2m19:41:42.146563 line       858[0m             for model_field in model.fields:
    [2m19:41:42.149266 line       857[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
    [2m19:41:42.151442 line       858[0m             for model_field in model.fields:
    [2m19:41:42.153512 line       859[0m                 if not self.use_unique_items_as_set:
    [2m19:41:42.155573 line       860[0m                     continue
    [2m19:41:42.157593 line       858[0m             for model_field in model.fields:
    [2m19:41:42.159647 line       857[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.161676 line       858[0m             for model_field in model.fields:
    [2m19:41:42.163710 line       857[0m         for model in models:
    [2m19:41:42.165793 return     857[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.025858[0m
[2m19:41:42.167887 line      1335[0m             self.__change_from_import(models, imports, scoped_model_resolver, init)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {})[0m
    [32m[2mStarting var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80021b3100>[0m
    [32m[2mStarting var:.. [22minit = False[0m
    [2m19:41:42.168023 call       648[0m     def __change_from_import(
    [2m19:41:42.168086 line       655[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
    [2m19:41:42.168105 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.168217 line       655[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
    [2m19:41:42.168238 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.168298 line       655[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
    [2m19:41:42.168318 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.168369 line       655[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.168391 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.168451 line       655[0m         for model in models:
    [2m19:41:42.168470 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
    [2m19:41:42.168489 line       658[0m             before_import = model.imports
    [32m[2mNew var:....... [22mbefore_import = (Import(from_='typing', import_='Any', alias=Non...t_='RootModel', alias=None, reference_path=None))[0m
    [2m19:41:42.168620 line       659[0m             imports.append(before_import)
    [32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Any'}, 'pydantic': {'RootModel', 'Field'}})[0m
    [2m19:41:42.168675 line       660[0m             for data_type in model.all_data_types:
    [32m[2mNew var:....... [22mdata_type = ContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.168715 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.168764 line       666[0m                     continue
    [2m19:41:42.168820 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = BaseClassDataType(type='RootModel', reference=No...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.168859 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.168906 line       666[0m                     continue
    [2m19:41:42.168943 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.168980 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.169050 line       702[0m             after_import = model.imports
    [32m[2mNew var:....... [22mafter_import = (Import(from_='typing', import_='Any', alias=Non...t_='RootModel', alias=None, reference_path=None))[0m
    [2m19:41:42.169161 line       703[0m             if before_import != after_import:
    [2m19:41:42.169220 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
    [2m19:41:42.169265 line       658[0m             before_import = model.imports
    [32m[2mModified var:.. [22mbefore_import = (Import(from_='typing', import_='List', alias=No...t_='RootModel', alias=None, reference_path=None))[0m
    [2m19:41:42.169401 line       659[0m             imports.append(before_import)
    [32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'List', 'Any'}, 'pydantic': {'RootModel', 'Field'}})[0m
    [2m19:41:42.169463 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = ContextDataType(type=None, reference=None, data_...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.169518 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.169566 line       666[0m                     continue
    [2m19:41:42.169609 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = REPR FAILED[0m
    [2m19:41:42.169651 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.171754 line       666[0m                     continue
    [2m19:41:42.173798 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = BaseClassDataType(type='RootModel', reference=No...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.175821 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.175876 line       666[0m                     continue
    [2m19:41:42.175922 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.175964 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.176032 line       702[0m             after_import = model.imports
    [32m[2mModified var:.. [22mafter_import = (Import(from_='typing', import_='List', alias=No...t_='RootModel', alias=None, reference_path=None))[0m
    [2m19:41:42.176187 line       703[0m             if before_import != after_import:
    [2m19:41:42.176242 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
    [2m19:41:42.176285 line       658[0m             before_import = model.imports
    [2m19:41:42.176409 line       659[0m             imports.append(before_import)
    [2m19:41:42.176463 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = ContextDataType(type=None, reference=None, data_...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.176509 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.176554 line       666[0m                     continue
    [2m19:41:42.176597 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = REPR FAILED[0m
    [2m19:41:42.176649 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.178763 line       666[0m                     continue
    [2m19:41:42.180754 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = BaseClassDataType(type='RootModel', reference=No...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.182802 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.182865 line       666[0m                     continue
    [2m19:41:42.182910 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.182955 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.183030 line       702[0m             after_import = model.imports
    [2m19:41:42.183196 line       703[0m             if before_import != after_import:
    [2m19:41:42.183249 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.183294 line       658[0m             before_import = model.imports
    [32m[2mModified var:.. [22mbefore_import = (Import(from_='pydantic', import_='BaseModel', alias=None, reference_path=None),)[0m
    [2m19:41:42.183348 line       659[0m             imports.append(before_import)
    [32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'List', 'Any'}, 'pydantic': {'RootModel', 'BaseModel', 'Field'}})[0m
    [2m19:41:42.183399 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = BaseClassDataType(type='BaseModel', reference=No...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.183446 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.183490 line       666[0m                     continue
    [2m19:41:42.183529 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.183568 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.183625 line       702[0m             after_import = model.imports
    [32m[2mModified var:.. [22mafter_import = (Import(from_='pydantic', import_='BaseModel', alias=None, reference_path=None),)[0m
    [2m19:41:42.183670 line       703[0m             if before_import != after_import:
    [2m19:41:42.183714 line       657[0m         for model in models:
    [2m19:41:42.183748 return     657[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.015814[0m
[32m[2mModified var:.. [22mmodule_to_import = {('commons',): Imports(<class 'set'>, {'typing':...pydantic': {'RootModel', 'BaseModel', 'Field'}})}[0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'List', 'Any'}, 'pydantic': {'RootModel', 'BaseModel', 'Field'}})[0m
[2m19:41:42.183846 line      1336[0m             self.__extract_inherited_enum(models)
[2m19:41:42.183987 line      1337[0m             self.__set_reference_default_value_to_field(models)
[2m19:41:42.184092 line      1338[0m             self.__reuse_model(models, require_update_action_models)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [32m[2mStarting var:.. [22mrequire_update_action_models = [][0m
    [2m19:41:42.184197 call       883[0m     def __reuse_model(self, models: list[DataModel], require_update_action_models: list[str]) -> None:
    [2m19:41:42.184248 line       884[0m         if not self.reuse_model:
    [2m19:41:42.184266 line       885[0m             return
    [2m19:41:42.184282 return     885[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000128[0m
[2m19:41:42.184331 line      1339[0m             self.__collapse_root_models(models, unused_models, imports, scoped_model_resolver)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [32m[2mStarting var:.. [22munused_models = [][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'List', 'Any'}, 'pydantic': {'RootModel', 'BaseModel', 'Field'}})[0m
    [32m[2mStarting var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80021b3100>[0m
    [2m19:41:42.184456 call       923[0m     def __collapse_root_models(  # noqa: PLR0912
    [2m19:41:42.184525 line       930[0m         if not self.collapse_root_models:
    [2m19:41:42.184548 line       931[0m             return
    [2m19:41:42.184570 return     931[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000179[0m
[2m19:41:42.184616 line      1340[0m             self.__set_default_enum_member(models)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [2m19:41:42.184707 call      1034[0m     def __set_default_enum_member(  # noqa: PLR0912
    [2m19:41:42.184742 line      1038[0m         if not self.set_default_enum_member:
    [2m19:41:42.184758 line      1039[0m             return
    [2m19:41:42.184774 return    1039[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000102[0m
[2m19:41:42.184817 line      1341[0m             self.__sort_models(models, imports)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'List', 'Any'}, 'pydantic': {'RootModel', 'BaseModel', 'Field'}})[0m
    [2m19:41:42.184910 call      1104[0m     def __sort_models(
    [2m19:41:42.184951 line      1109[0m         if not self.keep_model_order:
    [2m19:41:42.184968 line      1110[0m             return
    [2m19:41:42.184984 return    1110[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000115[0m
[2m19:41:42.185032 line      1342[0m             self.__change_field_name(models)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [2m19:41:42.185124 call      1136[0m     def __change_field_name(
    [2m19:41:42.185161 line      1140[0m         if self.data_model_type != pydantic_model_v2.BaseModel:
    [2m19:41:42.185178 line      1142[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
    [2m19:41:42.185192 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.185230 line      1146[0m             for field in model.fields:
    [32m[2mNew var:....... [22mfield = DataModelField(name=None, default=None, required...one_literal_as_default=False, type_has_null=None)[0m
    [2m19:41:42.185247 line      1147[0m                 filed_name = field.name
    [32m[2mNew var:....... [22mfiled_name = None[0m
    [2m19:41:42.185308 line      1148[0m                 filed_name_resolver = ModelResolver(snake_case_field=self.snake_case_field, remove_suffix_number=True)
    [32m[2mNew var:....... [22mfiled_name_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80009f2210>[0m
    [2m19:41:42.185422 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [32m[2mNew var:....... [22mdata_type = ContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.185482 line      1150[0m                     if data_type.reference:
    [2m19:41:42.185542 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.185591 line      1152[0m                 new_filed_name = filed_name_resolver.add(["field"], cast("str", filed_name)).name
    [32m[2mNew var:....... [22mnew_filed_name = 'field_'[0m
    [2m19:41:42.185706 line      1153[0m                 if filed_name != new_filed_name:
    [2m19:41:42.185770 line      1154[0m                     field.alias = filed_name
    [2m19:41:42.185857 line      1155[0m                     field.name = new_filed_name
    [32m[2mModified var:.. [22mfield = DataModelField(name='field_', default=None, requ...one_literal_as_default=False, type_has_null=None)[0m
    [2m19:41:42.185924 line      1146[0m             for field in model.fields:
    [2m19:41:42.185979 line      1142[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
    [2m19:41:42.186031 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.186098 line      1146[0m             for field in model.fields:
    [32m[2mModified var:.. [22mfield = REPR FAILED[0m
    [2m19:41:42.186147 line      1147[0m                 filed_name = field.name
    [2m19:41:42.188380 line      1148[0m                 filed_name_resolver = ModelResolver(snake_case_field=self.snake_case_field, remove_suffix_number=True)
    [32m[2mModified var:.. [22mfiled_name_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001d86360>[0m
    [2m19:41:42.190576 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [32m[2mModified var:.. [22mdata_type = ContextDataType(type=None, reference=None, data_...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.192732 line      1150[0m                     if data_type.reference:
    [2m19:41:42.194740 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [32m[2mModified var:.. [22mdata_type = REPR FAILED[0m
    [2m19:41:42.196718 line      1150[0m                     if data_type.reference:
    [2m19:41:42.200921 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.204857 line      1152[0m                 new_filed_name = filed_name_resolver.add(["field"], cast("str", filed_name)).name
    [2m19:41:42.208841 line      1153[0m                 if filed_name != new_filed_name:
    [2m19:41:42.212808 line      1154[0m                     field.alias = filed_name
    [2m19:41:42.216833 line      1155[0m                     field.name = new_filed_name
    [2m19:41:42.221026 line      1146[0m             for field in model.fields:
    [2m19:41:42.225196 line      1142[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
    [2m19:41:42.229158 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.233497 line      1146[0m             for field in model.fields:
    [2m19:41:42.237489 line      1147[0m                 filed_name = field.name
    [2m19:41:42.241513 line      1148[0m                 filed_name_resolver = ModelResolver(snake_case_field=self.snake_case_field, remove_suffix_number=True)
    [32m[2mModified var:.. [22mfiled_name_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001d869c0>[0m
    [2m19:41:42.245562 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [32m[2mModified var:.. [22mdata_type = ContextDataType(type=None, reference=None, data_...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.249644 line      1150[0m                     if data_type.reference:
    [2m19:41:42.251707 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [32m[2mModified var:.. [22mdata_type = REPR FAILED[0m
    [2m19:41:42.253696 line      1150[0m                     if data_type.reference:
    [2m19:41:42.257655 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.261646 line      1152[0m                 new_filed_name = filed_name_resolver.add(["field"], cast("str", filed_name)).name
    [2m19:41:42.265652 line      1153[0m                 if filed_name != new_filed_name:
    [2m19:41:42.269699 line      1154[0m                     field.alias = filed_name
    [2m19:41:42.273934 line      1155[0m                     field.name = new_filed_name
    [2m19:41:42.277970 line      1146[0m             for field in model.fields:
    [2m19:41:42.282510 line      1142[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.286571 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.290510 line      1146[0m             for field in model.fields:
    [2m19:41:42.294425 line      1142[0m         for model in models:
    [2m19:41:42.298345 return    1142[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.117314[0m
[2m19:41:42.302459 line      1343[0m             self.__apply_discriminator_type(models, imports)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'List', 'Any'}, 'pydantic': {'RootModel', 'BaseModel', 'Field'}})[0m
    [2m19:41:42.302615 call       729[0m     def __apply_discriminator_type(  # noqa: PLR0912, PLR0915
    [2m19:41:42.302676 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
    [2m19:41:42.302698 line       735[0m             for field in model.fields:
    [32m[2mNew var:....... [22mfield = DataModelField(name='field_', default=None, requ...one_literal_as_default=False, type_has_null=None)[0m
    [2m19:41:42.302723 line       736[0m                 discriminator = field.extras.get("discriminator")
    [32m[2mNew var:....... [22mdiscriminator = None[0m
    [2m19:41:42.302785 line       737[0m                 if not discriminator or not isinstance(discriminator, dict):
    [2m19:41:42.302860 line       738[0m                     continue
    [2m19:41:42.302905 line       735[0m             for field in model.fields:
    [2m19:41:42.302949 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
    [2m19:41:42.302991 line       735[0m             for field in model.fields:
    [32m[2mModified var:.. [22mfield = REPR FAILED[0m
    [2m19:41:42.303045 line       736[0m                 discriminator = field.extras.get("discriminator")
    [2m19:41:42.305080 line       737[0m                 if not discriminator or not isinstance(discriminator, dict):
    [2m19:41:42.307073 line       738[0m                     continue
    [2m19:41:42.309089 line       735[0m             for field in model.fields:
    [2m19:41:42.311091 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
    [2m19:41:42.313099 line       735[0m             for field in model.fields:
    [2m19:41:42.315116 line       736[0m                 discriminator = field.extras.get("discriminator")
    [2m19:41:42.317161 line       737[0m                 if not discriminator or not isinstance(discriminator, dict):
    [2m19:41:42.319244 line       738[0m                     continue
    [2m19:41:42.321276 line       735[0m             for field in model.fields:
    [2m19:41:42.323274 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.325324 line       735[0m             for field in model.fields:
    [2m19:41:42.327368 line       734[0m         for model in models:  # noqa: PLR1702
    [2m19:41:42.329383 return     734[0m         for model in models:  # noqa: PLR1702
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.028844[0m
[2m19:41:42.331453 line      1344[0m             self.__set_one_literal_on_default(models)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [2m19:41:42.331599 call      1157[0m     def __set_one_literal_on_default(self, models: list[DataModel]) -> None:
    [2m19:41:42.331643 line      1158[0m         if not self.use_one_literal_as_default:
    [2m19:41:42.331657 line      1159[0m             return
    [2m19:41:42.331673 return    1159[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000106[0m
[2m19:41:42.331718 line      1346[0m             processed_models.append(Processed(module, models, init, imports, scoped_model_resolver))
[32m[2mModified var:.. [22mprocessed_models = [Processed(module=('commons.py',), models=[<data...ference.ModelResolver object at 0x7f80021b3100>)][0m
[2m19:41:42.331818 line      1314[0m         for module_, models in module_models:
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
[32m[2mModified var:.. [22mmodule_ = ('bug',)[0m
[2m19:41:42.331915 line      1315[0m             imports = module_to_import[module_] = Imports(self.use_exact_imports)
[32m[2mModified var:.. [22mmodule_to_import = {('commons',): Imports(<class 'set'>, {'typing':...'Field'}}), ('bug',): Imports(<class 'set'>, {})}[0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {})[0m
[2m19:41:42.332018 line      1316[0m             init = False
[2m19:41:42.332116 line      1317[0m             if module_:
[2m19:41:42.332203 line      1318[0m                 parent = (*module_[:-1], "__init__.py")
[2m19:41:42.332282 line      1319[0m                 if parent not in results:
[2m19:41:42.332360 line      1321[0m                 if (*module_, "__init__.py") in results:
[2m19:41:42.332437 line      1325[0m                     module = tuple(part.replace("-", "_") for part in (*module_[:-1], f"{module_[-1]}.py"))
[32m[2mModified var:.. [22mmodule = ('bug.py',)[0m
[2m19:41:42.332515 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
[32m[2mNew var:....... [22mfield = DataModelField(name='bug_animals', default=None,...ne_literal_as_default=False, type_has_null=False)[0m
[2m19:41:42.332595 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[2m19:41:42.332703 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
[2m19:41:42.332797 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
[32m[2mModified var:.. [22mall_module_fields = {'bug_animals'}[0m
[2m19:41:42.332908 line      1330[0m             scoped_model_resolver = ModelResolver(exclude_names=all_module_fields)
[32m[2mModified var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001923550>[0m
[2m19:41:42.333058 line      1332[0m             self.__alias_shadowed_imports(models, all_module_fields)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [32m[2mStarting var:.. [22mall_model_field_names = {'bug_animals'}[0m
    [2m19:41:42.333152 call      1217[0m     def __alias_shadowed_imports(  # noqa: PLR6301
    [2m19:41:42.333188 line      1222[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
    [2m19:41:42.333206 line      1223[0m             for model_field in model.fields:
    [32m[2mNew var:....... [22mmodel_field = DataModelField(name='bug_animals', default=None,...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.333229 line      1225[0m                     model_field.data_type.type in all_model_field_names
    [2m19:41:42.333272 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.333305 line      1222[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
    [2m19:41:42.333337 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.333375 line      1222[0m         for model in models:
    [2m19:41:42.333406 return    1222[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000302[0m
[2m19:41:42.333469 line      1333[0m             self.__override_required_field(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [2m19:41:42.333546 call      1062[0m     def __override_required_field(
    [2m19:41:42.333572 line      1066[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
    [2m19:41:42.333584 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.333611 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [32m[2mNew var:....... [22mindex = 0[0m
    [32m[2mNew var:....... [22mmodel_field = DataModelField(name='bug_animals', default=None,...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.333628 line      1070[0m                 data_type = model_field.data_type
    [32m[2mNew var:....... [22mdata_type = ContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.333684 line      1072[0m                     not model_field.original_name  # noqa: PLR0916
    [2m19:41:42.333737 line      1073[0m                     or data_type.data_types
    [2m19:41:42.333780 line      1074[0m                     or data_type.reference
    [2m19:41:42.333829 line      1075[0m                     or data_type.type
    [2m19:41:42.333870 line      1079[0m                     continue
    [2m19:41:42.333910 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [2m19:41:42.333950 line      1066[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
    [2m19:41:42.333989 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.334038 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [2m19:41:42.334079 line      1066[0m         for model in models:
    [2m19:41:42.334121 return    1066[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000639[0m
[2m19:41:42.334207 line      1334[0m             self.__replace_unique_list_to_set(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [2m19:41:42.334305 call       856[0m     def __replace_unique_list_to_set(self, models: list[DataModel]) -> None:
    [2m19:41:42.334336 line       857[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
    [2m19:41:42.334354 line       858[0m             for model_field in model.fields:
    [32m[2mNew var:....... [22mmodel_field = DataModelField(name='bug_animals', default=None,...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.334374 line       859[0m                 if not self.use_unique_items_as_set:
    [2m19:41:42.334418 line       860[0m                     continue
    [2m19:41:42.334450 line       858[0m             for model_field in model.fields:
    [2m19:41:42.334487 line       857[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
    [2m19:41:42.334520 line       858[0m             for model_field in model.fields:
    [2m19:41:42.334561 line       857[0m         for model in models:
    [2m19:41:42.334589 return     857[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000334[0m
[2m19:41:42.334654 line      1335[0m             self.__change_from_import(models, imports, scoped_model_resolver, init)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {})[0m
    [32m[2mStarting var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001923550>[0m
    [32m[2mStarting var:.. [22minit = False[0m
    [2m19:41:42.334747 call       648[0m     def __change_from_import(
    [2m19:41:42.334802 line       655[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
    [2m19:41:42.334820 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.334928 line       655[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
    [2m19:41:42.334958 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.335026 line       655[0m         for model in models:
    [2m19:41:42.335046 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
    [2m19:41:42.335072 line       658[0m             before_import = model.imports
    [32m[2mNew var:....... [22mbefore_import = (Import(from_='typing', import_='Any', alias=Non...t_='BaseModel', alias=None, reference_path=None))[0m
    [2m19:41:42.335173 line       659[0m             imports.append(before_import)
    [32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', 'Any'}, 'pydantic': {'BaseModel'}})[0m
    [2m19:41:42.335232 line       660[0m             for data_type in model.all_data_types:
    [32m[2mNew var:....... [22mdata_type = ContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.335279 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.335330 line       666[0m                     continue
    [2m19:41:42.335369 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = BaseClassDataType(type='BaseModel', reference=No...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.335412 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.335459 line       666[0m                     continue
    [2m19:41:42.335497 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.335538 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.335611 line       702[0m             after_import = model.imports
    [32m[2mNew var:....... [22mafter_import = (Import(from_='typing', import_='Any', alias=Non...t_='BaseModel', alias=None, reference_path=None))[0m
    [2m19:41:42.335699 line       703[0m             if before_import != after_import:
    [2m19:41:42.335757 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
    [2m19:41:42.335808 line       658[0m             before_import = model.imports
    [32m[2mModified var:.. [22mbefore_import = (Import(from_='pydantic', import_='BaseModel', a..._='ConfigDict', alias=None, reference_path=None))[0m
    [2m19:41:42.335864 line       659[0m             imports.append(before_import)
    [32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', 'Any'}, 'pydantic': {'BaseModel', 'ConfigDict'}})[0m
    [2m19:41:42.335920 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.335971 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.336015 line       666[0m                     continue
    [2m19:41:42.336059 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.336103 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.336168 line       702[0m             after_import = model.imports
    [32m[2mModified var:.. [22mafter_import = (Import(from_='pydantic', import_='BaseModel', a..._='ConfigDict', alias=None, reference_path=None))[0m
    [2m19:41:42.336219 line       703[0m             if before_import != after_import:
    [2m19:41:42.336267 line       657[0m         for model in models:
    [2m19:41:42.336308 return     657[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.001621[0m
[32m[2mModified var:.. [22mmodule_to_import = {('commons',): Imports(<class 'set'>, {'typing':...Any'}, 'pydantic': {'BaseModel', 'ConfigDict'}})}[0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', 'Any'}, 'pydantic': {'BaseModel', 'ConfigDict'}})[0m
[2m19:41:42.336389 line      1336[0m             self.__extract_inherited_enum(models)
[2m19:41:42.336513 line      1337[0m             self.__set_reference_default_value_to_field(models)
[2m19:41:42.336604 line      1338[0m             self.__reuse_model(models, require_update_action_models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [32m[2mStarting var:.. [22mrequire_update_action_models = [][0m
    [2m19:41:42.336690 call       883[0m     def __reuse_model(self, models: list[DataModel], require_update_action_models: list[str]) -> None:
    [2m19:41:42.336740 line       884[0m         if not self.reuse_model:
    [2m19:41:42.336761 line       885[0m             return
    [2m19:41:42.336778 return     885[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000153[0m
[2m19:41:42.336861 line      1339[0m             self.__collapse_root_models(models, unused_models, imports, scoped_model_resolver)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [32m[2mStarting var:.. [22munused_models = [][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', 'Any'}, 'pydantic': {'BaseModel', 'ConfigDict'}})[0m
    [32m[2mStarting var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001923550>[0m
    [2m19:41:42.336955 call       923[0m     def __collapse_root_models(  # noqa: PLR0912
    [2m19:41:42.337012 line       930[0m         if not self.collapse_root_models:
    [2m19:41:42.337034 line       931[0m             return
    [2m19:41:42.337057 return     931[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000142[0m
[2m19:41:42.337110 line      1340[0m             self.__set_default_enum_member(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [2m19:41:42.337201 call      1034[0m     def __set_default_enum_member(  # noqa: PLR0912
    [2m19:41:42.337234 line      1038[0m         if not self.set_default_enum_member:
    [2m19:41:42.337251 line      1039[0m             return
    [2m19:41:42.337268 return    1039[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000097[0m
[2m19:41:42.337315 line      1341[0m             self.__sort_models(models, imports)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', 'Any'}, 'pydantic': {'BaseModel', 'ConfigDict'}})[0m
    [2m19:41:42.337400 call      1104[0m     def __sort_models(
    [2m19:41:42.337442 line      1109[0m         if not self.keep_model_order:
    [2m19:41:42.337462 line      1110[0m             return
    [2m19:41:42.337481 return    1110[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000115[0m
[2m19:41:42.337532 line      1342[0m             self.__change_field_name(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [2m19:41:42.337615 call      1136[0m     def __change_field_name(
    [2m19:41:42.337646 line      1140[0m         if self.data_model_type != pydantic_model_v2.BaseModel:
    [2m19:41:42.337665 line      1142[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
    [2m19:41:42.337681 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.337720 line      1146[0m             for field in model.fields:
    [32m[2mNew var:....... [22mfield = DataModelField(name='bug_animals', default=None,...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.337734 line      1147[0m                 filed_name = field.name
    [32m[2mNew var:....... [22mfiled_name = 'bug_animals'[0m
    [2m19:41:42.337781 line      1148[0m                 filed_name_resolver = ModelResolver(snake_case_field=self.snake_case_field, remove_suffix_number=True)
    [32m[2mNew var:....... [22mfiled_name_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001923e50>[0m
    [2m19:41:42.337883 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [32m[2mNew var:....... [22mdata_type = ContextDataType(type='Any', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.337930 line      1150[0m                     if data_type.reference:
    [2m19:41:42.337981 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.338025 line      1152[0m                 new_filed_name = filed_name_resolver.add(["field"], cast("str", filed_name)).name
    [32m[2mNew var:....... [22mnew_filed_name = 'bug_animals'[0m
    [2m19:41:42.338115 line      1153[0m                 if filed_name != new_filed_name:
    [2m19:41:42.338169 line      1146[0m             for field in model.fields:
    [2m19:41:42.338213 line      1142[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
    [2m19:41:42.338256 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.338315 line      1146[0m             for field in model.fields:
    [2m19:41:42.338356 line      1142[0m         for model in models:
    [2m19:41:42.338399 return    1142[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000844[0m
[2m19:41:42.338478 line      1343[0m             self.__apply_discriminator_type(models, imports)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', 'Any'}, 'pydantic': {'BaseModel', 'ConfigDict'}})[0m
    [2m19:41:42.338571 call       729[0m     def __apply_discriminator_type(  # noqa: PLR0912, PLR0915
    [2m19:41:42.338613 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
    [2m19:41:42.338634 line       735[0m             for field in model.fields:
    [32m[2mNew var:....... [22mfield = DataModelField(name='bug_animals', default=None,...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.338663 line       736[0m                 discriminator = field.extras.get("discriminator")
    [32m[2mNew var:....... [22mdiscriminator = None[0m
    [2m19:41:42.338708 line       737[0m                 if not discriminator or not isinstance(discriminator, dict):
    [2m19:41:42.338752 line       738[0m                     continue
    [2m19:41:42.338788 line       735[0m             for field in model.fields:
    [2m19:41:42.338830 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
    [2m19:41:42.338867 line       735[0m             for field in model.fields:
    [2m19:41:42.338909 line       734[0m         for model in models:  # noqa: PLR1702
    [2m19:41:42.338944 return     734[0m         for model in models:  # noqa: PLR1702
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000429[0m
[2m19:41:42.339012 line      1344[0m             self.__set_one_literal_on_default(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [2m19:41:42.339100 call      1157[0m     def __set_one_literal_on_default(self, models: list[DataModel]) -> None:
    [2m19:41:42.339131 line      1158[0m         if not self.use_one_literal_as_default:
    [2m19:41:42.339149 line      1159[0m             return
    [2m19:41:42.339164 return    1159[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000095[0m
[2m19:41:42.339213 line      1346[0m             processed_models.append(Processed(module, models, init, imports, scoped_model_resolver))
[32m[2mModified var:.. [22mprocessed_models = [Processed(module=('commons.py',), models=[<data...ference.ModelResolver object at 0x7f8001923550>)][0m
[2m19:41:42.339299 line      1314[0m         for module_, models in module_models:
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
[32m[2mModified var:.. [22mmodule_ = ('aaaschema',)[0m
[2m19:41:42.339390 line      1315[0m             imports = module_to_import[module_] = Imports(self.use_exact_imports)
[32m[2mModified var:.. [22mmodule_to_import = {('commons',): Imports(<class 'set'>, {'typing':...'}}), ('aaaschema',): Imports(<class 'set'>, {})}[0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {})[0m
[2m19:41:42.339494 line      1316[0m             init = False
[2m19:41:42.339595 line      1317[0m             if module_:
[2m19:41:42.339678 line      1318[0m                 parent = (*module_[:-1], "__init__.py")
[2m19:41:42.339759 line      1319[0m                 if parent not in results:
[2m19:41:42.339842 line      1321[0m                 if (*module_, "__init__.py") in results:
[2m19:41:42.339924 line      1325[0m                     module = tuple(part.replace("-", "_") for part in (*module_[:-1], f"{module_[-1]}.py"))
[32m[2mModified var:.. [22mmodule = ('aaaschema.py',)[0m
[2m19:41:42.340008 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
[32m[2mNew var:....... [22mfield = DataModelField(name='name', default=None, requir...ne_literal_as_default=False, type_has_null=False)[0m
[2m19:41:42.340097 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[2m19:41:42.340211 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
[2m19:41:42.340310 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[2m19:41:42.340410 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
[32m[2mModified var:.. [22mfield = REPR FAILED[0m
[2m19:41:42.340506 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[2m19:41:42.342301 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
[2m19:41:42.344032 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[2m19:41:42.345248 line      1329[0m             all_module_fields = {field.name for model in models for field in model.fields if field.name is not None}
[32m[2mModified var:.. [22mall_module_fields = {'animals', 'name'}[0m
[2m19:41:42.346476 line      1330[0m             scoped_model_resolver = ModelResolver(exclude_names=all_module_fields)
[32m[2mModified var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80009c07d0>[0m
[2m19:41:42.346626 line      1332[0m             self.__alias_shadowed_imports(models, all_module_fields)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [32m[2mStarting var:.. [22mall_model_field_names = {'animals', 'name'}[0m
    [2m19:41:42.346733 call      1217[0m     def __alias_shadowed_imports(  # noqa: PLR6301
    [2m19:41:42.346777 line      1222[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
    [2m19:41:42.346797 line      1223[0m             for model_field in model.fields:
    [32m[2mNew var:....... [22mmodel_field = DataModelField(name='name', default=None, requir...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.346830 line      1225[0m                     model_field.data_type.type in all_model_field_names
    [2m19:41:42.346874 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.346907 line      1222[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
    [2m19:41:42.346939 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.346977 line      1225[0m                     model_field.data_type.type in all_model_field_names
    [2m19:41:42.347007 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.347038 line      1222[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
    [2m19:41:42.347068 line      1223[0m             for model_field in model.fields:
    [32m[2mModified var:.. [22mmodel_field = REPR FAILED[0m
    [2m19:41:42.347105 line      1225[0m                     model_field.data_type.type in all_model_field_names
    [2m19:41:42.348695 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.350314 line      1222[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
    [2m19:41:42.351947 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.353536 line      1225[0m                     model_field.data_type.type in all_model_field_names
    [2m19:41:42.354686 line      1223[0m             for model_field in model.fields:
    [2m19:41:42.355832 line      1222[0m         for model in models:
    [2m19:41:42.357025 return    1222[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.011483[0m
[2m19:41:42.358238 line      1333[0m             self.__override_required_field(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [2m19:41:42.358362 call      1062[0m     def __override_required_field(
    [2m19:41:42.358407 line      1066[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
    [2m19:41:42.358425 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.358461 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [32m[2mNew var:....... [22mindex = 0[0m
    [32m[2mNew var:....... [22mmodel_field = DataModelField(name='name', default=None, requir...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.358479 line      1070[0m                 data_type = model_field.data_type
    [32m[2mNew var:....... [22mdata_type = ContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.358527 line      1072[0m                     not model_field.original_name  # noqa: PLR0916
    [2m19:41:42.358574 line      1073[0m                     or data_type.data_types
    [2m19:41:42.358611 line      1074[0m                     or data_type.reference
    [2m19:41:42.358649 line      1075[0m                     or data_type.type
    [2m19:41:42.358688 line      1079[0m                     continue
    [2m19:41:42.358725 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [2m19:41:42.358763 line      1066[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
    [2m19:41:42.358803 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.358853 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [2m19:41:42.358890 line      1070[0m                 data_type = model_field.data_type
    [2m19:41:42.358927 line      1072[0m                     not model_field.original_name  # noqa: PLR0916
    [2m19:41:42.358963 line      1073[0m                     or data_type.data_types
    [2m19:41:42.359000 line      1074[0m                     or data_type.reference
    [2m19:41:42.359036 line      1075[0m                     or data_type.type
    [2m19:41:42.359074 line      1079[0m                     continue
    [2m19:41:42.359113 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [2m19:41:42.359149 line      1066[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
    [2m19:41:42.359185 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.359231 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [32m[2mModified var:.. [22mmodel_field = REPR FAILED[0m
    [2m19:41:42.359267 line      1070[0m                 data_type = model_field.data_type
    [32m[2mModified var:.. [22mdata_type = REPR FAILED[0m
    [2m19:41:42.360913 line      1072[0m                     not model_field.original_name  # noqa: PLR0916
    [2m19:41:42.364122 line      1073[0m                     or data_type.data_types
    [2m19:41:42.367372 line      1074[0m                     or data_type.reference
    [2m19:41:42.370644 line      1079[0m                     continue
    [2m19:41:42.373829 line      1069[0m             for index, model_field in enumerate(model.fields[:]):
    [2m19:41:42.376979 line      1066[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
    [2m19:41:42.380176 line      1067[0m             if isinstance(model, (Enum, self.data_model_root_type)):
    [2m19:41:42.383399 line      1068[0m                 continue
    [2m19:41:42.386581 line      1066[0m         for model in models:
    [2m19:41:42.389873 return    1066[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.034790[0m
[2m19:41:42.393182 line      1334[0m             self.__replace_unique_list_to_set(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [2m19:41:42.393319 call       856[0m     def __replace_unique_list_to_set(self, models: list[DataModel]) -> None:
    [2m19:41:42.393355 line       857[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
    [2m19:41:42.393373 line       858[0m             for model_field in model.fields:
    [32m[2mNew var:....... [22mmodel_field = DataModelField(name='name', default=None, requir...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.393398 line       859[0m                 if not self.use_unique_items_as_set:
    [2m19:41:42.393440 line       860[0m                     continue
    [2m19:41:42.393469 line       858[0m             for model_field in model.fields:
    [2m19:41:42.393499 line       857[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
    [2m19:41:42.393528 line       858[0m             for model_field in model.fields:
    [2m19:41:42.393565 line       859[0m                 if not self.use_unique_items_as_set:
    [2m19:41:42.393593 line       860[0m                     continue
    [2m19:41:42.393622 line       858[0m             for model_field in model.fields:
    [2m19:41:42.393650 line       857[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
    [2m19:41:42.393680 line       858[0m             for model_field in model.fields:
    [32m[2mModified var:.. [22mmodel_field = REPR FAILED[0m
    [2m19:41:42.393724 line       859[0m                 if not self.use_unique_items_as_set:
    [2m19:41:42.395398 line       860[0m                     continue
    [2m19:41:42.397085 line       858[0m             for model_field in model.fields:
    [2m19:41:42.398781 line       857[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
    [2m19:41:42.400432 line       858[0m             for model_field in model.fields:
    [2m19:41:42.402151 line       859[0m                 if not self.use_unique_items_as_set:
    [2m19:41:42.403377 line       860[0m                     continue
    [2m19:41:42.404583 line       858[0m             for model_field in model.fields:
    [2m19:41:42.405784 line       857[0m         for model in models:
    [2m19:41:42.406994 return     857[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.014870[0m
[2m19:41:42.408219 line      1335[0m             self.__change_from_import(models, imports, scoped_model_resolver, init)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {})[0m
    [32m[2mStarting var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80009c07d0>[0m
    [32m[2mStarting var:.. [22minit = False[0m
    [2m19:41:42.408351 call       648[0m     def __change_from_import(
    [2m19:41:42.408414 line       655[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
    [2m19:41:42.408437 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.408544 line       655[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
    [2m19:41:42.408567 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.408625 line       655[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
    [2m19:41:42.408656 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.408715 line       655[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
    [2m19:41:42.408735 line       656[0m             scoped_model_resolver.add([model.path], model.class_name)
    [2m19:41:42.408788 line       655[0m         for model in models:
    [2m19:41:42.408835 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
    [2m19:41:42.408859 line       658[0m             before_import = model.imports
    [32m[2mNew var:....... [22mbefore_import = (Import(from_='typing', import_='Optional', alia...t_='BaseModel', alias=None, reference_path=None))[0m
    [2m19:41:42.408950 line       659[0m             imports.append(before_import)
    [32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional'}, 'pydantic': {'BaseModel'}})[0m
    [2m19:41:42.409009 line       660[0m             for data_type in model.all_data_types:
    [32m[2mNew var:....... [22mdata_type = ContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.409051 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.409097 line       666[0m                     continue
    [2m19:41:42.409133 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = BaseClassDataType(type='BaseModel', reference=No...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.409173 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.409220 line       666[0m                     continue
    [2m19:41:42.409258 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.409299 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.409376 line       702[0m             after_import = model.imports
    [32m[2mNew var:....... [22mafter_import = (Import(from_='typing', import_='Optional', alia...t_='BaseModel', alias=None, reference_path=None))[0m
    [2m19:41:42.409456 line       703[0m             if before_import != after_import:
    [2m19:41:42.409510 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
    [2m19:41:42.409553 line       658[0m             before_import = model.imports
    [2m19:41:42.409629 line       659[0m             imports.append(before_import)
    [2m19:41:42.409678 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = ContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.409729 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.409777 line       666[0m                     continue
    [2m19:41:42.409824 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = BaseClassDataType(type='BaseModel', reference=No...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.409867 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.409917 line       666[0m                     continue
    [2m19:41:42.409959 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.410002 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.410066 line       702[0m             after_import = model.imports
    [2m19:41:42.410143 line       703[0m             if before_import != after_import:
    [2m19:41:42.410188 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
    [2m19:41:42.410233 line       658[0m             before_import = model.imports
    [32m[2mModified var:.. [22mbefore_import = (Import(from_='typing', import_='Optional', alia..._='ConfigDict', alias=None, reference_path=None))[0m
    [2m19:41:42.410375 line       659[0m             imports.append(before_import)
    [32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional'}, 'pydantic': {'BaseModel', 'ConfigDict'}})[0m
    [2m19:41:42.410441 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = REPR FAILED[0m
    [2m19:41:42.410497 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.412427 line       668[0m                 if isinstance(data_type, BaseClassDataType):
    [2m19:41:42.414175 line       674[0m                     from_, import_ = full_path = relative(model.module_name, data_type.full_name)
    [32m[2mNew var:....... [22mfrom_ = '.'[0m
    [32m[2mNew var:....... [22mimport_ = 'commons'[0m
    [32m[2mNew var:....... [22mfull_path = ('.', 'commons')[0m
    [2m19:41:42.415954 line       675[0m                     if imports.use_exact:  # pragma: no cover
    [2m19:41:42.417678 line       677[0m                     import_ = import_.replace("-", "_")
    [2m19:41:42.419452 line       679[0m                         len(model.module_path) > 1
    [2m19:41:42.421178 line       686[0m                 alias = scoped_model_resolver.add(full_path, import_).name
    [32m[2mNew var:....... [22malias = 'commons'[0m
    [2m19:41:42.422927 line       688[0m                 name = data_type.reference.short_name
    [32m[2mNew var:....... [22mname = 'SmallArray'[0m
    [2m19:41:42.424635 line       689[0m                 if from_ and import_ and alias != name:
    [2m19:41:42.426335 line       690[0m                     data_type.alias = alias if data_type.reference.short_name == import_ else f"{alias}.{name}"
    [2m19:41:42.428026 line       692[0m                 if init:
    [2m19:41:42.429708 line       694[0m                 imports.append(
    [2m19:41:42.431391 line       695[0m                     Import(
    [2m19:41:42.433089 line       696[0m                         from_=from_,
    [2m19:41:42.434763 line       697[0m                         import_=import_,
    [2m19:41:42.436444 line       698[0m                         alias=alias,
    [2m19:41:42.438112 line       699[0m                         reference_path=data_type.reference.path,
    [2m19:41:42.439766 line       695[0m                     Import(
    [2m19:41:42.441434 line       694[0m                 imports.append(
    [32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional'}, ...: {'BaseModel', 'ConfigDict'}, '.': {'commons'}})[0m
    [2m19:41:42.443089 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = BaseClassDataType(type='BaseModel', reference=No...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.444731 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.444797 line       666[0m                     continue
    [2m19:41:42.444861 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.444915 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.445001 line       702[0m             after_import = model.imports
    [32m[2mModified var:.. [22mafter_import = (Import(from_='typing', import_='Optional', alia..._='ConfigDict', alias=None, reference_path=None))[0m
    [2m19:41:42.445166 line       703[0m             if before_import != after_import:
    [2m19:41:42.445228 line       657[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
    [2m19:41:42.445279 line       658[0m             before_import = model.imports
    [32m[2mModified var:.. [22mbefore_import = (Import(from_='typing', import_='Union', alias=N...t_='RootModel', alias=None, reference_path=None))[0m
    [2m19:41:42.445432 line       659[0m             imports.append(before_import)
    [32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', '...', 'BaseModel', 'ConfigDict'}, '.': {'commons'}})[0m
    [2m19:41:42.445501 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = REPR FAILED[0m
    [2m19:41:42.445559 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.446747 line       666[0m                     continue
    [2m19:41:42.447941 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.449132 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.450335 line       666[0m                     continue
    [2m19:41:42.451510 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.452694 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.453880 line       666[0m                     continue
    [2m19:41:42.455049 line       660[0m             for data_type in model.all_data_types:
    [32m[2mModified var:.. [22mdata_type = BaseClassDataType(type='RootModel', reference=No...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.456208 line       663[0m                 if not data_type.reference or data_type.reference.source in models:
    [2m19:41:42.456270 line       666[0m                     continue
    [2m19:41:42.456318 line       660[0m             for data_type in model.all_data_types:
    [2m19:41:42.456365 exception  660[0m             for data_type in model.all_data_types:
    [31mException:..... [1mStopIteration[0m
    [2m19:41:42.456443 line       702[0m             after_import = model.imports
    [32m[2mModified var:.. [22mafter_import = (Import(from_='typing', import_='Union', alias=N...t_='RootModel', alias=None, reference_path=None))[0m
    [2m19:41:42.456614 line       703[0m             if before_import != after_import:
    [2m19:41:42.456673 line       657[0m         for model in models:
    [2m19:41:42.456720 return     657[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.048439[0m
[32m[2mModified var:.. [22mmodule_to_import = {('commons',): Imports(<class 'set'>, {'typing':..., 'BaseModel', 'ConfigDict'}, '.': {'commons'}})}[0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', '...', 'BaseModel', 'ConfigDict'}, '.': {'commons'}})[0m
[2m19:41:42.456841 line      1336[0m             self.__extract_inherited_enum(models)
[2m19:41:42.456982 line      1337[0m             self.__set_reference_default_value_to_field(models)
[2m19:41:42.457090 line      1338[0m             self.__reuse_model(models, require_update_action_models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [32m[2mStarting var:.. [22mrequire_update_action_models = [][0m
    [2m19:41:42.457189 call       883[0m     def __reuse_model(self, models: list[DataModel], require_update_action_models: list[str]) -> None:
    [2m19:41:42.457230 line       884[0m         if not self.reuse_model:
    [2m19:41:42.457251 line       885[0m             return
    [2m19:41:42.457268 return     885[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000119[0m
[2m19:41:42.457324 line      1339[0m             self.__collapse_root_models(models, unused_models, imports, scoped_model_resolver)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [32m[2mStarting var:.. [22munused_models = [][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', '...', 'BaseModel', 'ConfigDict'}, '.': {'commons'}})[0m
    [32m[2mStarting var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80009c07d0>[0m
    [2m19:41:42.457419 call       923[0m     def __collapse_root_models(  # noqa: PLR0912
    [2m19:41:42.457471 line       930[0m         if not self.collapse_root_models:
    [2m19:41:42.457495 line       931[0m             return
    [2m19:41:42.457517 return     931[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000136[0m
[2m19:41:42.457567 line      1340[0m             self.__set_default_enum_member(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [2m19:41:42.457655 call      1034[0m     def __set_default_enum_member(  # noqa: PLR0912
    [2m19:41:42.457685 line      1038[0m         if not self.set_default_enum_member:
    [2m19:41:42.457702 line      1039[0m             return
    [2m19:41:42.457718 return    1039[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000091[0m
[2m19:41:42.457762 line      1341[0m             self.__sort_models(models, imports)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', '...', 'BaseModel', 'ConfigDict'}, '.': {'commons'}})[0m
    [2m19:41:42.457861 call      1104[0m     def __sort_models(
    [2m19:41:42.457901 line      1109[0m         if not self.keep_model_order:
    [2m19:41:42.457923 line      1110[0m             return
    [2m19:41:42.457942 return    1110[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000116[0m
[2m19:41:42.457992 line      1342[0m             self.__change_field_name(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [2m19:41:42.458079 call      1136[0m     def __change_field_name(
    [2m19:41:42.458107 line      1140[0m         if self.data_model_type != pydantic_model_v2.BaseModel:
    [2m19:41:42.458123 line      1142[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
    [2m19:41:42.458138 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.458173 line      1146[0m             for field in model.fields:
    [32m[2mNew var:....... [22mfield = DataModelField(name='name', default=None, requir...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.458188 line      1147[0m                 filed_name = field.name
    [32m[2mNew var:....... [22mfiled_name = 'name'[0m
    [2m19:41:42.458232 line      1148[0m                 filed_name_resolver = ModelResolver(snake_case_field=self.snake_case_field, remove_suffix_number=True)
    [32m[2mNew var:....... [22mfiled_name_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80009c0f50>[0m
    [2m19:41:42.458331 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [32m[2mNew var:....... [22mdata_type = ContextDataType(type='str', reference=None, data...=False, dict_key=None, treat_dot_as_module=False)[0m
    [2m19:41:42.458376 line      1150[0m                     if data_type.reference:
    [2m19:41:42.458421 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.458459 line      1152[0m                 new_filed_name = filed_name_resolver.add(["field"], cast("str", filed_name)).name
    [32m[2mNew var:....... [22mnew_filed_name = 'name'[0m
    [2m19:41:42.458556 line      1153[0m                 if filed_name != new_filed_name:
    [2m19:41:42.458626 line      1146[0m             for field in model.fields:
    [2m19:41:42.458669 line      1142[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
    [2m19:41:42.458712 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.458768 line      1146[0m             for field in model.fields:
    [2m19:41:42.458808 line      1147[0m                 filed_name = field.name
    [2m19:41:42.458847 line      1148[0m                 filed_name_resolver = ModelResolver(snake_case_field=self.snake_case_field, remove_suffix_number=True)
    [32m[2mModified var:.. [22mfiled_name_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80019460b0>[0m
    [2m19:41:42.458928 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.458977 line      1150[0m                     if data_type.reference:
    [2m19:41:42.459017 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.459057 line      1152[0m                 new_filed_name = filed_name_resolver.add(["field"], cast("str", filed_name)).name
    [2m19:41:42.459135 line      1153[0m                 if filed_name != new_filed_name:
    [2m19:41:42.459175 line      1146[0m             for field in model.fields:
    [2m19:41:42.459215 line      1142[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
    [2m19:41:42.459253 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.459310 line      1146[0m             for field in model.fields:
    [32m[2mModified var:.. [22mfield = REPR FAILED[0m
    [2m19:41:42.459347 line      1147[0m                 filed_name = field.name
    [32m[2mModified var:.. [22mfiled_name = 'animals'[0m
    [2m19:41:42.460999 line      1148[0m                 filed_name_resolver = ModelResolver(snake_case_field=self.snake_case_field, remove_suffix_number=True)
    [32m[2mModified var:.. [22mfiled_name_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001946cf0>[0m
    [2m19:41:42.462638 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [32m[2mModified var:.. [22mdata_type = REPR FAILED[0m
    [2m19:41:42.464279 line      1150[0m                     if data_type.reference:
    [2m19:41:42.467465 line      1151[0m                         filed_name_resolver.exclude_names.add(data_type.reference.short_name)
    [2m19:41:42.470659 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.473779 line      1152[0m                 new_filed_name = filed_name_resolver.add(["field"], cast("str", filed_name)).name
    [32m[2mModified var:.. [22mnew_filed_name = 'animals'[0m
    [2m19:41:42.477083 line      1153[0m                 if filed_name != new_filed_name:
    [2m19:41:42.480235 line      1146[0m             for field in model.fields:
    [2m19:41:42.483427 line      1142[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
    [2m19:41:42.486586 line      1143[0m             if "Enum" in model.base_class:
    [2m19:41:42.489755 line      1146[0m             for field in model.fields:
    [2m19:41:42.492911 line      1147[0m                 filed_name = field.name
    [32m[2mModified var:.. [22mfiled_name = None[0m
    [2m19:41:42.495568 line      1148[0m                 filed_name_resolver = ModelResolver(snake_case_field=self.snake_case_field, remove_suffix_number=True)
    [32m[2mModified var:.. [22mfiled_name_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80019a82f0>[0m
    [2m19:41:42.498331 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.501077 line      1150[0m                     if data_type.reference:
    [2m19:41:42.503350 line      1151[0m                         filed_name_resolver.exclude_names.add(data_type.reference.short_name)
    [2m19:41:42.505571 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.507790 line      1150[0m                     if data_type.reference:
    [2m19:41:42.510016 line      1151[0m                         filed_name_resolver.exclude_names.add(data_type.reference.short_name)
    [2m19:41:42.512259 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.514498 line      1150[0m                     if data_type.reference:
    [2m19:41:42.516727 line      1149[0m                 for data_type in field.data_type.all_data_types:
    [2m19:41:42.518942 line      1152[0m                 new_filed_name = filed_name_resolver.add(["field"], cast("str", filed_name)).name
    [32m[2mModified var:.. [22mnew_filed_name = 'field_'[0m
    [2m19:41:42.521234 line      1153[0m                 if filed_name != new_filed_name:
    [2m19:41:42.523468 line      1154[0m                     field.alias = filed_name
    [2m19:41:42.525705 line      1155[0m                     field.name = new_filed_name
    [2m19:41:42.527976 line      1146[0m             for field in model.fields:
    [2m19:41:42.530251 line      1142[0m         for model in models:
    [2m19:41:42.532462 return    1142[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.076624[0m
[2m19:41:42.534727 line      1343[0m             self.__apply_discriminator_type(models, imports)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', '...', 'BaseModel', 'ConfigDict'}, '.': {'commons'}})[0m
    [2m19:41:42.534890 call       729[0m     def __apply_discriminator_type(  # noqa: PLR0912, PLR0915
    [2m19:41:42.534937 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
    [2m19:41:42.534961 line       735[0m             for field in model.fields:
    [32m[2mNew var:....... [22mfield = DataModelField(name='name', default=None, requir...ne_literal_as_default=False, type_has_null=False)[0m
    [2m19:41:42.534986 line       736[0m                 discriminator = field.extras.get("discriminator")
    [32m[2mNew var:....... [22mdiscriminator = None[0m
    [2m19:41:42.535033 line       737[0m                 if not discriminator or not isinstance(discriminator, dict):
    [2m19:41:42.535076 line       738[0m                     continue
    [2m19:41:42.535111 line       735[0m             for field in model.fields:
    [2m19:41:42.535146 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
    [2m19:41:42.535181 line       735[0m             for field in model.fields:
    [2m19:41:42.535221 line       736[0m                 discriminator = field.extras.get("discriminator")
    [2m19:41:42.535255 line       737[0m                 if not discriminator or not isinstance(discriminator, dict):
    [2m19:41:42.535289 line       738[0m                     continue
    [2m19:41:42.535324 line       735[0m             for field in model.fields:
    [2m19:41:42.535357 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
    [2m19:41:42.535394 line       735[0m             for field in model.fields:
    [32m[2mModified var:.. [22mfield = REPR FAILED[0m
    [2m19:41:42.535434 line       736[0m                 discriminator = field.extras.get("discriminator")
    [2m19:41:42.537059 line       737[0m                 if not discriminator or not isinstance(discriminator, dict):
    [2m19:41:42.538678 line       738[0m                     continue
    [2m19:41:42.540260 line       735[0m             for field in model.fields:
    [2m19:41:42.541834 line       734[0m         for model in models:  # noqa: PLR1702
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
    [2m19:41:42.543434 line       735[0m             for field in model.fields:
    [2m19:41:42.545017 line       736[0m                 discriminator = field.extras.get("discriminator")
    [2m19:41:42.546175 line       737[0m                 if not discriminator or not isinstance(discriminator, dict):
    [2m19:41:42.547322 line       738[0m                     continue
    [2m19:41:42.548454 line       735[0m             for field in model.fields:
    [2m19:41:42.549559 line       734[0m         for model in models:  # noqa: PLR1702
    [2m19:41:42.550677 return     734[0m         for model in models:  # noqa: PLR1702
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.016967[0m
[2m19:41:42.551877 line      1344[0m             self.__set_one_literal_on_default(models)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [2m19:41:42.551999 call      1157[0m     def __set_one_literal_on_default(self, models: list[DataModel]) -> None:
    [2m19:41:42.552038 line      1158[0m         if not self.use_one_literal_as_default:
    [2m19:41:42.552054 line      1159[0m             return
    [2m19:41:42.552071 return    1159[0m             return
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000103[0m
[2m19:41:42.552121 line      1346[0m             processed_models.append(Processed(module, models, init, imports, scoped_model_resolver))
[32m[2mModified var:.. [22mprocessed_models = [Processed(module=('commons.py',), models=[<data...ference.ModelResolver object at 0x7f80009c07d0>)][0m
[2m19:41:42.552219 line      1314[0m         for module_, models in module_models:
[2m19:41:42.552314 line      1348[0m         for processed_model in processed_models:
[32m[2mNew var:....... [22mprocessed_model = Processed(module=('commons.py',), models=[<datam...eference.ModelResolver object at 0x7f80021b3100>)[0m
[2m19:41:42.552400 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
[2m19:41:42.552497 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.552703 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
[2m19:41:42.552805 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.553005 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
[2m19:41:42.553099 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.553280 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
[2m19:41:42.553376 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.553481 line      1349[0m             for model in processed_model.models:
[2m19:41:42.553568 line      1348[0m         for processed_model in processed_models:
[32m[2mModified var:.. [22mprocessed_model = Processed(module=('bug.py',), models=[<datamodel...eference.ModelResolver object at 0x7f8001923550>)[0m
[2m19:41:42.553659 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
[2m19:41:42.553755 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.553900 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
[2m19:41:42.554003 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.554110 line      1349[0m             for model in processed_model.models:
[2m19:41:42.554202 line      1348[0m         for processed_model in processed_models:
[32m[2mModified var:.. [22mprocessed_model = Processed(module=('aaaschema.py',), models=[<dat...eference.ModelResolver object at 0x7f80009c07d0>)[0m
[2m19:41:42.554293 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
[2m19:41:42.554391 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.554524 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
[2m19:41:42.554617 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.554742 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
[2m19:41:42.554858 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.555060 line      1349[0m             for model in processed_model.models:
[32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
[2m19:41:42.555186 line      1350[0m                 processed_model.imports.append(model.imports)
[2m19:41:42.555391 line      1349[0m             for model in processed_model.models:
[2m19:41:42.555495 line      1348[0m         for processed_model in processed_models:
[2m19:41:42.555589 line      1352[0m         for unused_model in unused_models:
[2m19:41:42.555680 line      1359[0m         for processed_model in processed_models:
[32m[2mModified var:.. [22mprocessed_model = Processed(module=('commons.py',), models=[<datam...eference.ModelResolver object at 0x7f80021b3100>)[0m
[2m19:41:42.555786 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mNew var:....... [22mm = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
[2m19:41:42.572034 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mModified var:.. [22mm = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
[2m19:41:42.572558 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mModified var:.. [22mm = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
[2m19:41:42.572969 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mModified var:.. [22mm = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
[2m19:41:42.586094 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mNew var:....... [22mmodel_code = "class Commons(RootModel[Any]):\n    root: Any =...ength=0)\nclass SmallArray(BaseModel):\n    pass"[0m
[2m19:41:42.586271 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[2m19:41:42.586389 line      1362[0m             unused_imports = [
[2m19:41:42.586490 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[32m[2mNew var:....... [22mfrom_ = 'typing'[0m
[32m[2mNew var:....... [22mimports_ = {'List', 'Any'}[0m
[2m19:41:42.586583 line      1365[0m                 for import_ in imports_
[32m[2mNew var:....... [22mimport_ = 'List'[0m
[2m19:41:42.586686 line      1366[0m                 if import_ not in model_code
[2m19:41:42.586784 line      1363[0m                 (from_, import_)
[2m19:41:42.586884 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'Any'[0m
[2m19:41:42.586973 line      1366[0m                 if import_ not in model_code
[2m19:41:42.587067 line      1363[0m                 (from_, import_)
[2m19:41:42.587154 line      1365[0m                 for import_ in imports_
[2m19:41:42.587239 line      1363[0m                 (from_, import_)
[2m19:41:42.587329 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[32m[2mModified var:.. [22mfrom_ = 'pydantic'[0m
[32m[2mModified var:.. [22mimports_ = {'RootModel', 'BaseModel', 'Field'}[0m
[2m19:41:42.587416 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'RootModel'[0m
[2m19:41:42.587522 line      1366[0m                 if import_ not in model_code
[2m19:41:42.587616 line      1363[0m                 (from_, import_)
[2m19:41:42.587702 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'BaseModel'[0m
[2m19:41:42.587791 line      1366[0m                 if import_ not in model_code
[2m19:41:42.587903 line      1363[0m                 (from_, import_)
[2m19:41:42.587994 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'Field'[0m
[2m19:41:42.588080 line      1366[0m                 if import_ not in model_code
[2m19:41:42.588173 line      1363[0m                 (from_, import_)
[2m19:41:42.588258 line      1365[0m                 for import_ in imports_
[2m19:41:42.588347 line      1363[0m                 (from_, import_)
[2m19:41:42.588434 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[2m19:41:42.588522 line      1362[0m             unused_imports = [
[32m[2mNew var:....... [22munused_imports = [][0m
[2m19:41:42.588613 line      1368[0m             for from_, import_ in unused_imports:
[2m19:41:42.588713 line      1359[0m         for processed_model in processed_models:
[32m[2mModified var:.. [22mprocessed_model = Processed(module=('bug.py',), models=[<datamodel...eference.ModelResolver object at 0x7f8001923550>)[0m
[2m19:41:42.588806 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mNew var:....... [22mm = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
[2m19:41:42.589101 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mModified var:.. [22mm = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
[2m19:41:42.591634 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mModified var:.. [22mmodel_code = "class Bug(BaseModel):\n    bug_animals: Optiona...ig = ConfigDict(\n        extra='forbid',\n    )"[0m
[2m19:41:42.591808 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[2m19:41:42.591929 line      1362[0m             unused_imports = [
[2m19:41:42.592027 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[32m[2mNew var:....... [22mfrom_ = 'typing'[0m
[32m[2mNew var:....... [22mimports_ = {'Optional', 'Any'}[0m
[2m19:41:42.592118 line      1365[0m                 for import_ in imports_
[32m[2mNew var:....... [22mimport_ = 'Optional'[0m
[2m19:41:42.592221 line      1366[0m                 if import_ not in model_code
[2m19:41:42.592318 line      1363[0m                 (from_, import_)
[2m19:41:42.592406 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'Any'[0m
[2m19:41:42.592493 line      1366[0m                 if import_ not in model_code
[2m19:41:42.592586 line      1363[0m                 (from_, import_)
[2m19:41:42.592672 line      1365[0m                 for import_ in imports_
[2m19:41:42.592758 line      1363[0m                 (from_, import_)
[2m19:41:42.592849 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[32m[2mModified var:.. [22mfrom_ = 'pydantic'[0m
[32m[2mModified var:.. [22mimports_ = {'BaseModel', 'ConfigDict'}[0m
[2m19:41:42.592934 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'BaseModel'[0m
[2m19:41:42.593029 line      1366[0m                 if import_ not in model_code
[2m19:41:42.593120 line      1363[0m                 (from_, import_)
[2m19:41:42.593205 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'ConfigDict'[0m
[2m19:41:42.593295 line      1366[0m                 if import_ not in model_code
[2m19:41:42.593386 line      1363[0m                 (from_, import_)
[2m19:41:42.593473 line      1365[0m                 for import_ in imports_
[2m19:41:42.593568 line      1363[0m                 (from_, import_)
[2m19:41:42.593660 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[2m19:41:42.593747 line      1362[0m             unused_imports = [
[2m19:41:42.593835 line      1368[0m             for from_, import_ in unused_imports:
[2m19:41:42.593920 line      1359[0m         for processed_model in processed_models:
[32m[2mModified var:.. [22mprocessed_model = Processed(module=('aaaschema.py',), models=[<dat...eference.ModelResolver object at 0x7f80009c07d0>)[0m
[2m19:41:42.594004 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mNew var:....... [22mm = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
[2m19:41:42.594272 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mModified var:.. [22mm = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
[2m19:41:42.594526 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mModified var:.. [22mm = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
[2m19:41:42.594906 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mModified var:.. [22mm = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
[2m19:41:42.597560 line      1361[0m             model_code = str("\n".join([str(m) for m in processed_model.models]))
[32m[2mModified var:.. [22mmodel_code = "class Cat(BaseModel):\n    name: Optional[str] ...xtra='forbid',\n    )\n    root: Union[Dog, Cat]"[0m
[2m19:41:42.597717 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[2m19:41:42.597842 line      1362[0m             unused_imports = [
[2m19:41:42.597950 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[32m[2mNew var:....... [22mfrom_ = 'typing'[0m
[32m[2mNew var:....... [22mimports_ = {'Optional', 'Union'}[0m
[2m19:41:42.598049 line      1365[0m                 for import_ in imports_
[32m[2mNew var:....... [22mimport_ = 'Optional'[0m
[2m19:41:42.598157 line      1366[0m                 if import_ not in model_code
[2m19:41:42.598263 line      1363[0m                 (from_, import_)
[2m19:41:42.598361 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'Union'[0m
[2m19:41:42.598463 line      1366[0m                 if import_ not in model_code
[2m19:41:42.598570 line      1363[0m                 (from_, import_)
[2m19:41:42.598675 line      1365[0m                 for import_ in imports_
[2m19:41:42.598781 line      1363[0m                 (from_, import_)
[2m19:41:42.598911 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[32m[2mModified var:.. [22mfrom_ = 'pydantic'[0m
[32m[2mModified var:.. [22mimports_ = {'RootModel', 'BaseModel', 'ConfigDict'}[0m
[2m19:41:42.599016 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'RootModel'[0m
[2m19:41:42.599299 line      1366[0m                 if import_ not in model_code
[2m19:41:42.599404 line      1363[0m                 (from_, import_)
[2m19:41:42.599507 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'BaseModel'[0m
[2m19:41:42.599612 line      1366[0m                 if import_ not in model_code
[2m19:41:42.599722 line      1363[0m                 (from_, import_)
[2m19:41:42.599823 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'ConfigDict'[0m
[2m19:41:42.599922 line      1366[0m                 if import_ not in model_code
[2m19:41:42.600030 line      1363[0m                 (from_, import_)
[2m19:41:42.600129 line      1365[0m                 for import_ in imports_
[2m19:41:42.600229 line      1363[0m                 (from_, import_)
[2m19:41:42.600328 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[32m[2mModified var:.. [22mfrom_ = '.'[0m
[32m[2mModified var:.. [22mimports_ = {'commons'}[0m
[2m19:41:42.600430 line      1365[0m                 for import_ in imports_
[32m[2mModified var:.. [22mimport_ = 'commons'[0m
[2m19:41:42.600540 line      1366[0m                 if import_ not in model_code
[2m19:41:42.600645 line      1363[0m                 (from_, import_)
[2m19:41:42.600744 line      1365[0m                 for import_ in imports_
[2m19:41:42.600845 line      1363[0m                 (from_, import_)
[2m19:41:42.600944 line      1364[0m                 for from_, imports_ in processed_model.imports.items()
[2m19:41:42.601040 line      1362[0m             unused_imports = [
[2m19:41:42.601137 line      1368[0m             for from_, import_ in unused_imports:
[2m19:41:42.601236 line      1359[0m         for processed_model in processed_models:
[2m19:41:42.601334 line      1371[0m         for module, models, init, imports, scoped_model_resolver in processed_models:  # noqa: B007
[32m[2mModified var:.. [22mmodule = ('commons.py',)[0m
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'List', 'Any'}, 'pydantic': {'RootModel', 'BaseModel', 'Field'}})[0m
[32m[2mModified var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80021b3100>[0m
[2m19:41:42.601429 line      1373[0m             self.__change_imported_model_name(models, imports, scoped_model_resolver)
[33m[2m    Source path:... [22m/home/user/projects/personal/datamodel-code-generator-issue-2460/.venv/lib/python3.13/site-packages/datamodel_code_generator/parser/base.py[0m
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'List', 'Any'}, 'pydantic': {'RootModel', 'BaseModel', 'Field'}})[0m
    [32m[2mStarting var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80021b3100>[0m
    [2m19:41:42.601567 call      1195[0m     def __change_imported_model_name(  # noqa: PLR6301
    [2m19:41:42.601622 line      1203[0m             for from_, import_ in imports.items()
    [2m19:41:42.601640 line      1201[0m         imported_names = {
    [2m19:41:42.601657 line      1203[0m             for from_, import_ in imports.items()
    [32m[2mNew var:....... [22mfrom_ = 'typing'[0m
    [32m[2mNew var:....... [22mimport_ = {'List', 'Any'}[0m
    [2m19:41:42.601672 line      1204[0m             for i in import_
    [32m[2mNew var:....... [22mi = 'List'[0m
    [2m19:41:42.601700 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.601726 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'Any'[0m
    [2m19:41:42.601746 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.601769 line      1204[0m             for i in import_
    [2m19:41:42.601794 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.601814 line      1203[0m             for from_, import_ in imports.items()
    [32m[2mModified var:.. [22mfrom_ = 'pydantic'[0m
    [32m[2mModified var:.. [22mimport_ = {'RootModel', 'BaseModel', 'Field'}[0m
    [2m19:41:42.601831 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'RootModel'[0m
    [2m19:41:42.601859 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.601883 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'BaseModel'[0m
    [2m19:41:42.601902 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.601925 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'Field'[0m
    [2m19:41:42.601942 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.601965 line      1204[0m             for i in import_
    [2m19:41:42.601983 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.602000 line      1203[0m             for from_, import_ in imports.items()
    [2m19:41:42.602017 line      1201[0m         imported_names = {
    [32m[2mNew var:....... [22mimported_names = {'BaseModel', 'Any', 'List', 'RootModel', 'Field'}[0m
    [2m19:41:42.602034 line      1206[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955d10>[0m
    [2m19:41:42.602058 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.602087 line      1208[0m                 continue
    [2m19:41:42.602106 line      1206[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f8000955e50>[0m
    [2m19:41:42.602125 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.602150 line      1208[0m                 continue
    [2m19:41:42.602168 line      1206[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80021b2ea0>[0m
    [2m19:41:42.602185 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.602209 line      1208[0m                 continue
    [2m19:41:42.602227 line      1206[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009f1b50>[0m
    [2m19:41:42.602246 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.602269 line      1208[0m                 continue
    [2m19:41:42.602287 line      1206[0m         for model in models:
    [2m19:41:42.602303 return    1206[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000783[0m
[2m19:41:42.602359 line      1371[0m         for module, models, init, imports, scoped_model_resolver in processed_models:  # noqa: B007
[32m[2mModified var:.. [22mmodule = ('bug.py',)[0m
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', 'Any'}, 'pydantic': {'BaseModel', 'ConfigDict'}})[0m
[32m[2mModified var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001923550>[0m
[2m19:41:42.602472 line      1373[0m             self.__change_imported_model_name(models, imports, scoped_model_resolver)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', 'Any'}, 'pydantic': {'BaseModel', 'ConfigDict'}})[0m
    [32m[2mStarting var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001923550>[0m
    [2m19:41:42.602601 call      1195[0m     def __change_imported_model_name(  # noqa: PLR6301
    [2m19:41:42.602638 line      1203[0m             for from_, import_ in imports.items()
    [2m19:41:42.602655 line      1201[0m         imported_names = {
    [2m19:41:42.602670 line      1203[0m             for from_, import_ in imports.items()
    [32m[2mNew var:....... [22mfrom_ = 'typing'[0m
    [32m[2mNew var:....... [22mimport_ = {'Optional', 'Any'}[0m
    [2m19:41:42.602685 line      1204[0m             for i in import_
    [32m[2mNew var:....... [22mi = 'Optional'[0m
    [2m19:41:42.602712 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.602735 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'Any'[0m
    [2m19:41:42.602753 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.602774 line      1204[0m             for i in import_
    [2m19:41:42.602791 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.602810 line      1203[0m             for from_, import_ in imports.items()
    [32m[2mModified var:.. [22mfrom_ = 'pydantic'[0m
    [32m[2mModified var:.. [22mimport_ = {'BaseModel', 'ConfigDict'}[0m
    [2m19:41:42.602827 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'BaseModel'[0m
    [2m19:41:42.602854 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.602876 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'ConfigDict'[0m
    [2m19:41:42.602894 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.602915 line      1204[0m             for i in import_
    [2m19:41:42.602932 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.602949 line      1203[0m             for from_, import_ in imports.items()
    [2m19:41:42.602965 line      1201[0m         imported_names = {
    [32m[2mNew var:....... [22mimported_names = {'Any', 'BaseModel', 'Optional', 'ConfigDict'}[0m
    [2m19:41:42.602982 line      1206[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2d70>[0m
    [2m19:41:42.603003 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.603029 line      1208[0m                 continue
    [2m19:41:42.603046 line      1206[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80021b2fd0>[0m
    [2m19:41:42.603063 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.603086 line      1208[0m                 continue
    [2m19:41:42.603103 line      1206[0m         for model in models:
    [2m19:41:42.603120 return    1206[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000552[0m
[2m19:41:42.603168 line      1371[0m         for module, models, init, imports, scoped_model_resolver in processed_models:  # noqa: B007
[32m[2mModified var:.. [22mmodule = ('aaaschema.py',)[0m
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', '...', 'BaseModel', 'ConfigDict'}, '.': {'commons'}})[0m
[32m[2mModified var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80009c07d0>[0m
[2m19:41:42.603270 line      1373[0m             self.__change_imported_model_name(models, imports, scoped_model_resolver)
    [32m[2mStarting var:.. [22mself = <datamodel_code_generator.parser.jsonschema.JsonSchemaParser object at 0x7f80009e02f0>[0m
    [32m[2mStarting var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
    [32m[2mStarting var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', '...', 'BaseModel', 'ConfigDict'}, '.': {'commons'}})[0m
    [32m[2mStarting var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80009c07d0>[0m
    [2m19:41:42.603391 call      1195[0m     def __change_imported_model_name(  # noqa: PLR6301
    [2m19:41:42.603430 line      1203[0m             for from_, import_ in imports.items()
    [2m19:41:42.603448 line      1201[0m         imported_names = {
    [2m19:41:42.603464 line      1203[0m             for from_, import_ in imports.items()
    [32m[2mNew var:....... [22mfrom_ = 'typing'[0m
    [32m[2mNew var:....... [22mimport_ = {'Optional', 'Union'}[0m
    [2m19:41:42.603480 line      1204[0m             for i in import_
    [32m[2mNew var:....... [22mi = 'Optional'[0m
    [2m19:41:42.603508 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.603533 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'Union'[0m
    [2m19:41:42.603552 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.603577 line      1204[0m             for i in import_
    [2m19:41:42.603597 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.603616 line      1203[0m             for from_, import_ in imports.items()
    [32m[2mModified var:.. [22mfrom_ = 'pydantic'[0m
    [32m[2mModified var:.. [22mimport_ = {'RootModel', 'BaseModel', 'ConfigDict'}[0m
    [2m19:41:42.603634 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'RootModel'[0m
    [2m19:41:42.603662 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.603687 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'BaseModel'[0m
    [2m19:41:42.603706 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.603729 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'ConfigDict'[0m
    [2m19:41:42.603747 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.603771 line      1204[0m             for i in import_
    [2m19:41:42.603789 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.603809 line      1203[0m             for from_, import_ in imports.items()
    [32m[2mModified var:.. [22mfrom_ = '.'[0m
    [32m[2mModified var:.. [22mimport_ = {'commons'}[0m
    [2m19:41:42.603829 line      1204[0m             for i in import_
    [32m[2mModified var:.. [22mi = 'commons'[0m
    [2m19:41:42.603859 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.603883 line      1204[0m             for i in import_
    [2m19:41:42.603901 line      1202[0m             imports.alias[from_][i] if i in imports.alias[from_] and i != imports.alias[from_][i] else i
    [2m19:41:42.603921 line      1203[0m             for from_, import_ in imports.items()
    [2m19:41:42.603939 line      1201[0m         imported_names = {
    [32m[2mNew var:....... [22mimported_names = {'Union', 'BaseModel', 'RootModel', 'Optional', 'commons', 'ConfigDict'}[0m
    [2m19:41:42.603957 line      1206[0m         for model in models:
    [32m[2mNew var:....... [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955950>[0m
    [2m19:41:42.603980 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.604008 line      1208[0m                 continue
    [2m19:41:42.604027 line      1206[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f8000955bd0>[0m
    [2m19:41:42.604046 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.604071 line      1208[0m                 continue
    [2m19:41:42.604090 line      1206[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.base_model.BaseModel object at 0x7f80009e17f0>[0m
    [2m19:41:42.604107 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.604132 line      1208[0m                 continue
    [2m19:41:42.604150 line      1206[0m         for model in models:
    [32m[2mModified var:.. [22mmodel = <datamodel_code_generator.model.pydantic_v2.root_model.RootModel object at 0x7f80009e1a90>[0m
    [2m19:41:42.604170 line      1207[0m             if model.class_name not in imported_names:  # pragma: no cover
    [2m19:41:42.604194 line      1208[0m                 continue
    [2m19:41:42.604213 line      1206[0m         for model in models:
    [2m19:41:42.604232 return    1206[0m         for model in models:
    [36m[2mReturn value:.. [22mNone[0m
    [33m[2mElapsed time: [22m00:00:00.000871[0m
[2m19:41:42.604279 line      1371[0m         for module, models, init, imports, scoped_model_resolver in processed_models:  # noqa: B007
[2m19:41:42.604382 line      1375[0m         for module, models, init, imports, scoped_model_resolver in processed_models:  # noqa: B007
[32m[2mModified var:.. [22mmodule = ('commons.py',)[0m
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.roo...2.base_model.BaseModel object at 0x7f80009f1b50>][0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'List', 'Any'}, 'pydantic': {'RootModel', 'BaseModel', 'Field'}})[0m
[32m[2mModified var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80021b3100>[0m
[2m19:41:42.604483 line      1376[0m             result: list[str] = []
[32m[2mNew var:....... [22mresult = [][0m
[2m19:41:42.604599 line      1377[0m             if models:
[2m19:41:42.604701 line      1378[0m                 if with_import:
[2m19:41:42.604795 line      1379[0m                     result += [str(self.imports), str(imports), "\n"]
[32m[2mModified var:.. [22mresult = ['from __future__ import annotations', 'from typ...dantic import BaseModel, Field, RootModel', '\n'][0m
[2m19:41:42.604928 line      1381[0m                 code = dump_templates(models)
[32m[2mNew var:....... [22mcode = "class Commons(RootModel[Any]):\n    root: Any =...h=0)\n\n\nclass SmallArray(BaseModel):\n    pass"[0m
[2m19:41:42.605829 line      1382[0m                 result += [code]
[32m[2mModified var:.. [22mresult = ['from __future__ import annotations', 'from typ...=0)\n\n\nclass SmallArray(BaseModel):\n    pass"][0m
[2m19:41:42.605983 line      1384[0m                 if self.dump_resolve_reference_action is not None:
[2m19:41:42.606102 line      1385[0m                     result += [
[2m19:41:42.606210 line      1386[0m                         "\n",
[2m19:41:42.606313 line      1387[0m                         self.dump_resolve_reference_action(
[2m19:41:42.606416 line      1388[0m                             m.reference.short_name for m in models if m.path in require_update_action_models
[2m19:41:42.606516 line      1387[0m                         self.dump_resolve_reference_action(
[2m19:41:42.606628 line      1385[0m                     result += [
[32m[2mModified var:.. [22mresult = ['from __future__ import annotations', 'from typ...lass SmallArray(BaseModel):\n    pass", '\n', ''][0m
[2m19:41:42.606732 line      1391[0m             if not result and not init:
[2m19:41:42.606846 line      1393[0m             body = "\n".join(result)
[32m[2mNew var:....... [22mbody = "from __future__ import annotations\nfrom typing...\n\nclass SmallArray(BaseModel):\n    pass\n\n\n"[0m
[2m19:41:42.606946 line      1394[0m             if code_formatter:
[2m19:41:42.607054 line      1395[0m                 body = code_formatter.format_code(body)
[32m[2mModified var:.. [22mbody = "from __future__ import annotations\n\nfrom typi...0)\n\n\nclass SmallArray(BaseModel):\n    pass\n"[0m
[2m19:41:42.627000 line      1397[0m             results[module] = Result(body=body, source=models[0].file_path if models else None)
[32m[2mModified var:.. [22mresults = {('__init__.py',): Result(body='', source=None),...\n    pass\n", source=PosixPath('commons.json'))}[0m
[2m19:41:42.627201 line      1375[0m         for module, models, init, imports, scoped_model_resolver in processed_models:  # noqa: B007
[32m[2mModified var:.. [22mmodule = ('bug.py',)[0m
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.base_model.BaseModel object at 0x7f80021b2fd0>][0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', 'Any'}, 'pydantic': {'BaseModel', 'ConfigDict'}})[0m
[32m[2mModified var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f8001923550>[0m
[2m19:41:42.627341 line      1376[0m             result: list[str] = []
[32m[2mModified var:.. [22mresult = [][0m
[2m19:41:42.627478 line      1377[0m             if models:
[2m19:41:42.627593 line      1378[0m                 if with_import:
[2m19:41:42.627702 line      1379[0m                     result += [str(self.imports), str(imports), "\n"]
[32m[2mModified var:.. [22mresult = ['from __future__ import annotations', 'from typ...rom pydantic import BaseModel, ConfigDict', '\n'][0m
[2m19:41:42.627829 line      1381[0m                 code = dump_templates(models)
[32m[2mModified var:.. [22mcode = "class Bug(BaseModel):\n    bug_animals: Optiona...ig = ConfigDict(\n        extra='forbid',\n    )"[0m
[2m19:41:42.628284 line      1382[0m                 result += [code]
[32m[2mModified var:.. [22mresult = ['from __future__ import annotations', 'from typ...g = ConfigDict(\n        extra='forbid',\n    )"][0m
[2m19:41:42.628430 line      1384[0m                 if self.dump_resolve_reference_action is not None:
[2m19:41:42.628556 line      1385[0m                     result += [
[2m19:41:42.628672 line      1386[0m                         "\n",
[2m19:41:42.628781 line      1387[0m                         self.dump_resolve_reference_action(
[2m19:41:42.628895 line      1388[0m                             m.reference.short_name for m in models if m.path in require_update_action_models
[2m19:41:42.628997 line      1387[0m                         self.dump_resolve_reference_action(
[2m19:41:42.629110 line      1385[0m                     result += [
[32m[2mModified var:.. [22mresult = ['from __future__ import annotations', 'from typ...Dict(\n        extra='forbid',\n    )", '\n', ''][0m
[2m19:41:42.629213 line      1391[0m             if not result and not init:
[2m19:41:42.629321 line      1393[0m             body = "\n".join(result)
[32m[2mModified var:.. [22mbody = "from __future__ import annotations\nfrom typing...onfigDict(\n        extra='forbid',\n    )\n\n\n"[0m
[2m19:41:42.629425 line      1394[0m             if code_formatter:
[2m19:41:42.629531 line      1395[0m                 body = code_formatter.format_code(body)
[32m[2mModified var:.. [22mbody = "from __future__ import annotations\n\nfrom typi... = ConfigDict(\n        extra='forbid',\n    )\n"[0m
[2m19:41:42.632148 line      1397[0m             results[module] = Result(body=body, source=models[0].file_path if models else None)
[32m[2mModified var:.. [22mresults = {('__init__.py',): Result(body='', source=None),...orbid',\n    )\n", source=PosixPath('bug.json'))}[0m
[2m19:41:42.632338 line      1375[0m         for module, models, init, imports, scoped_model_resolver in processed_models:  # noqa: B007
[32m[2mModified var:.. [22mmodule = ('aaaschema.py',)[0m
[32m[2mModified var:.. [22mmodels = [<datamodel_code_generator.model.pydantic_v2.bas...2.root_model.RootModel object at 0x7f80009e1a90>][0m
[32m[2mModified var:.. [22mimports = Imports(<class 'set'>, {'typing': {'Optional', '...', 'BaseModel', 'ConfigDict'}, '.': {'commons'}})[0m
[32m[2mModified var:.. [22mscoped_model_resolver = <datamodel_code_generator.reference.ModelResolver object at 0x7f80009c07d0>[0m
[2m19:41:42.632489 line      1376[0m             result: list[str] = []
[32m[2mModified var:.. [22mresult = [][0m
[2m19:41:42.632634 line      1377[0m             if models:
[2m19:41:42.632758 line      1378[0m                 if with_import:
[2m19:41:42.632875 line      1379[0m                     result += [str(self.imports), str(imports), "\n"]
[32m[2mModified var:.. [22mresult = ['from __future__ import annotations', 'from typ...figDict, RootModel\nfrom . import commons', '\n'][0m
[2m19:41:42.633006 line      1381[0m                 code = dump_templates(models)
[32m[2mModified var:.. [22mcode = "class Cat(BaseModel):\n    name: Optional[str] ...xtra='forbid',\n    )\n    root: Union[Dog, Cat]"[0m
[2m19:41:42.633944 line      1382[0m                 result += [code]
[32m[2mModified var:.. [22mresult = ['from __future__ import annotations', 'from typ...tra='forbid',\n    )\n    root: Union[Dog, Cat]"][0m
[2m19:41:42.634114 line      1384[0m                 if self.dump_resolve_reference_action is not None:
[2m19:41:42.634254 line      1385[0m                     result += [
[2m19:41:42.634377 line      1386[0m                         "\n",
[2m19:41:42.634495 line      1387[0m                         self.dump_resolve_reference_action(
[2m19:41:42.634612 line      1388[0m                             m.reference.short_name for m in models if m.path in require_update_action_models
[2m19:41:42.634725 line      1387[0m                         self.dump_resolve_reference_action(
[2m19:41:42.634852 line      1385[0m                     result += [
[32m[2mModified var:.. [22mresult = ['from __future__ import annotations', 'from typ...d',\n    )\n    root: Union[Dog, Cat]", '\n', ''][0m
[2m19:41:42.634972 line      1391[0m             if not result and not init:
[2m19:41:42.635105 line      1393[0m             body = "\n".join(result)
[32m[2mModified var:.. [22mbody = "from __future__ import annotations\nfrom typing...forbid',\n    )\n    root: Union[Dog, Cat]\n\n\n"[0m
[2m19:41:42.635226 line      1394[0m             if code_formatter:
[2m19:41:42.635350 line      1395[0m                 body = code_formatter.format_code(body)
[32m[2mModified var:.. [22mbody = "from __future__ import annotations\n\nfrom typi...ra='forbid',\n    )\n    root: Union[Dog, Cat]\n"[0m
[2m19:41:42.640238 line      1397[0m             results[module] = Result(body=body, source=models[0].file_path if models else None)
[32m[2mModified var:.. [22mresults = {('__init__.py',): Result(body='', source=None),...og, Cat]\n", source=PosixPath('aaaschema.json'))}[0m
[2m19:41:42.640458 line      1375[0m         for module, models, init, imports, scoped_model_resolver in processed_models:  # noqa: B007
[2m19:41:42.640627 line      1400[0m         if [*results] == [("__init__.py",)]:
[2m19:41:42.640756 line      1403[0m         results = {tuple(i.replace("-", "_") for i in k): v for k, v in results.items()}
[32m[2mNew var:....... [22mk = ('__init__.py',)[0m
[32m[2mNew var:....... [22mv = Result(body='', source=None)[0m
[2m19:41:42.640907 line      1403[0m         results = {tuple(i.replace("-", "_") for i in k): v for k, v in results.items()}
[32m[2mModified var:.. [22mk = ('commons.py',)[0m
[32m[2mModified var:.. [22mv = Result(body="from __future__ import annotations\...:\n    pass\n", source=PosixPath('commons.json'))[0m
[2m19:41:42.641052 line      1403[0m         results = {tuple(i.replace("-", "_") for i in k): v for k, v in results.items()}
[32m[2mModified var:.. [22mk = ('bug.py',)[0m
[32m[2mModified var:.. [22mv = Result(body="from __future__ import annotations\...forbid',\n    )\n", source=PosixPath('bug.json'))[0m
[2m19:41:42.641191 line      1403[0m         results = {tuple(i.replace("-", "_") for i in k): v for k, v in results.items()}
[32m[2mModified var:.. [22mk = ('aaaschema.py',)[0m
[32m[2mModified var:.. [22mv = Result(body="from __future__ import annotations\...Dog, Cat]\n", source=PosixPath('aaaschema.json'))[0m
[2m19:41:42.641324 line      1403[0m         results = {tuple(i.replace("-", "_") for i in k): v for k, v in results.items()}
[2m19:41:42.641455 line      1406[0m             if self.treat_dot_as_module
[2m19:41:42.641571 line      1409[0m                 for k, v in results.items()
[2m19:41:42.641684 line      1407[0m             else {
[2m19:41:42.641797 line      1409[0m                 for k, v in results.items()
[32m[2mNew var:....... [22mk = ('__init__.py',)[0m
[32m[2mNew var:....... [22mv = Result(body='', source=None)[0m
[2m19:41:42.641923 line      1408[0m                 tuple((part[: part.rfind(".")].replace(".", "_") + part[part.rfind(".") :]) for part in k): v
[2m19:41:42.642061 line      1409[0m                 for k, v in results.items()
[32m[2mModified var:.. [22mk = ('commons.py',)[0m
[32m[2mModified var:.. [22mv = Result(body="from __future__ import annotations\...:\n    pass\n", source=PosixPath('commons.json'))[0m
[2m19:41:42.642182 line      1408[0m                 tuple((part[: part.rfind(".")].replace(".", "_") + part[part.rfind(".") :]) for part in k): v
[2m19:41:42.642316 line      1409[0m                 for k, v in results.items()
[32m[2mModified var:.. [22mk = ('bug.py',)[0m
[32m[2mModified var:.. [22mv = Result(body="from __future__ import annotations\...forbid',\n    )\n", source=PosixPath('bug.json'))[0m
[2m19:41:42.642437 line      1408[0m                 tuple((part[: part.rfind(".")].replace(".", "_") + part[part.rfind(".") :]) for part in k): v
[2m19:41:42.642568 line      1409[0m                 for k, v in results.items()
[32m[2mModified var:.. [22mk = ('aaaschema.py',)[0m
[32m[2mModified var:.. [22mv = Result(body="from __future__ import annotations\...Dog, Cat]\n", source=PosixPath('aaaschema.json'))[0m
[2m19:41:42.642688 line      1408[0m                 tuple((part[: part.rfind(".")].replace(".", "_") + part[part.rfind(".") :]) for part in k): v
[2m19:41:42.642823 line      1409[0m                 for k, v in results.items()
[2m19:41:42.642943 line      1407[0m             else {
[2m19:41:42.643062 line      1404[0m         return (
[2m19:41:42.643177 return    1404[0m         return (
[36m[2mReturn value:.. [22m{('__init__.py',): Result(body='', source=None),...og, Cat]\n", source=PosixPath('aaaschema.json'))}[0m
[33m[2mElapsed time: [22m00:00:01.101913[0m
